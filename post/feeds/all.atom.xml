<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Post-rsses on Tavish Armstrong</title>
    <link>http://tavisharmstrong.com/post/feeds/all.atom/index.xml</link>
    <description>Recent content in Post-rsses on Tavish Armstrong</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 21 Dec 2016 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://tavisharmstrong.com/post/feeds/all.atom/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Building for reliability: feature flags</title>
      <link>http://tavisharmstrong.com/2016/12/21/building-for-reliability-feature-flags</link>
      <pubDate>Wed, 21 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>http://tavisharmstrong.com/2016/12/21/building-for-reliability-feature-flags</guid>
      <description>&lt;p&gt;A while back I started writing about &lt;a href=&#34;https://github.com/tarmstrong/longcv/tree/master/bio.md&#34;&gt;everything I learned&lt;/a&gt; before I got my current job. My original intention was to make an exhaustive list of all the random things I learned, and then work through it to figure out which of those skills was essential to my job, which were merely useful for social signaling, and which were merely good for passing interviews. I still want to finish writing that, but I also want to write more about what I&amp;rsquo;ve learned since I left school. None of what I&amp;rsquo;ve learned is that novel or impressive; I just hope it&amp;rsquo;s useful to students or people who have had different work experience. I also want to write it down to test my own understanding.&lt;/p&gt;

&lt;p&gt;Today I&amp;rsquo;ll write about a technique for improving reliability that I learned on the job: feature flags.&lt;/p&gt;

&lt;p&gt;Before I start explain what these are, I&amp;rsquo;ll talk a bit about why you would even care about reliability, and in the sorts of situations you might want to use feature flags.&lt;/p&gt;

&lt;p&gt;First, context matters and reliability is not inherently virtuous. If you operate an API that delivers cat gifs to clients on request and all the users are hobby projects that can go down without upsetting anyone, you probably don&amp;rsquo;t need to care about reliability that much. If you push a bad commit and take down your site, people will not see cats for a few minutes while you try to fix it. That&amp;rsquo;s probably fine.&lt;/p&gt;

&lt;p&gt;There are plenty of situations where you might want to care about reliability. The boring examples involve money: if you go down you don&amp;rsquo;t make money or your customers don&amp;rsquo;t make money. This is a really easy reason to care about reliability because you can trade off software developer time against potential lost money. If you want the dollars lost to go down, you can pay more engineers to make your reliability better &lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:tradeoffs&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:tradeoffs&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;p&gt;There are more exciting reasons to care about reliability. You might want your software to be reliable if it is important for the medical treatment of people in your hospital. Let&amp;rsquo;s say, for example, that your electronic medical record system helps save X lives per year by being more efficient and less error-prone than the paper-based equivalent. That marginal improvement (X) probably goes away if the system is down for a 48-hours straight at some point in that month because your doctors will have to do more guesswork. This is more important than lost money because lives are on the line; the tradeoff is just harder to make.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s talk about a hypothetical example. Let&amp;rsquo;s say I have too many cats and would like to capitalize upon this surplus of fluff. I don&amp;rsquo;t know how to teach these cats how to do my bidding, so I have to capitalize on these cats in some other way. I know one thing: cats love to pose for photos. I have the perfect solution: I develop an API that serves cat gifs in response to payments. This API is adopted by struggling social media apps to keep their user engaged. In exchange for referrals, I give the social media companies a commission on every sale.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s say in the begging I started by writing my app in Ruby. I&amp;rsquo;m pretty comfortable with Ruby, after all, and it made getting set up pretty fast. This Ruby on Rails app talks to another server inside my VPN that operates a remote webcam pointed at these cats. It&amp;rsquo;s going great and the cats are thrilled. Here&amp;rsquo;s what that code looks like:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;def handle_successful_payment
  client = CatCamClient.new(host: &#39;https://cats.tavi.sh&#39;)
  cat_photo = client.get_cat!
  # return a 200 with the cat!
  [200, cat_photo]
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Unforunately, the masses want more cats from more angles. I make a new backend server that operates multiple cameras: a helmet cam for Alice the cat, a motion-sensing robot camera that follows Bob the cat around, etc. This new server is much more complicated but I&amp;rsquo;ve tested it pretty well.&lt;/p&gt;

&lt;p&gt;When I switch traffic over to the new backend server, I discover that the database on my cat server is not well indexed, which slows down my API to the point where most requests are timing out. The social networks are now mad at me because the cats were the only reason people were still using their apps, and the cats are mad at me because they want more attention.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;def handle_successful_payment
  client = CatCamClient.new(host: &#39;https://fancycats.tavi.sh&#39;)
  cat_photo = client.get_cat!
  # return a 200 with the cat!
  [200, cat_photo]
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In future I resolve to do better. The next time I make my change I write some code that looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;def handle_successful_payment
  url = if CatApp.flag_on?(&#39;fancy_cats&#39;)
    &#39;https://fancy-cats.tavi.sh&#39;
  else
    &#39;https://cats.tavi.sh&#39;
  end
  client = CatCamClient.new(host: url)
  cat_photo = client.get_cat!
  # return a 200 with the cat!
  [200, cat_photo]
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In this example, before I make my request to the backend server, I first check to see which backend server to use. To do so, the &lt;code&gt;CatApp.flag_on?&lt;/code&gt; helper checks the database to see if the confuration flag is on. If so, we use the &lt;code&gt;https://fancy-cats.tavi.sh&lt;/code&gt; url to fetch a cat.&lt;/p&gt;

&lt;p&gt;What does this get me? It means that I no longer need to deploy my code in order to change which backend server my web frontend server is talking to. I can just flip a switch in the database (maybe I&amp;rsquo;m fancy enough to have an administrative web app for employees where I can put it) and have the new backend run. Now when I run into problems with the backend server being slow, I can immediately fix it without having to write or deploy code. That makes the downtime shorter. Nice!&lt;/p&gt;

&lt;p&gt;I could even go one step further and have the flag be a &lt;em&gt;probability&lt;/em&gt; rather than a boolean. In that case, I could set the feature flag to only go hit the new backend 10% of the time. That way, if there&amp;rsquo;s a problem with the new backend, I&amp;rsquo;ve only broken cats for 10% of people. It&amp;rsquo;s definitely not nice to break things for 10% of people, but I&amp;rsquo;ve mitigated a pretty serious failure. In the event of downtime, I lose 90% less money, which makes it easier for me to afford more helmet cams for my cats.&lt;/p&gt;

&lt;p&gt;What are some other fun things you can do with feature flags?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You could profile both paths and figure out which one is faster. That way you can tell whether you are actually making something faster with your new database (instead of trusting the hype).

&lt;ul&gt;
&lt;li&gt;Github&amp;rsquo;s Scientist library has support for this!&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;You can display new features of your product to a smaller portion of your visitors to see whether or not it works well before rolling it out completely.&lt;/li&gt;
&lt;li&gt;You could use feature flags on desktop software (which would probably talk to a server you control) in order to slowly roll out risky changes while mitigating the risk of bricking a few billion dollars worth of computers.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here are more tips for using feature flags:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;In my example I suggested using a database field to determine whether a flag is on. Using a database can cause you a lot of pain if it shares a database with the rest of your app, because a problematic change to the main app could harm your ability to change the feature flag.&lt;/li&gt;
&lt;li&gt;Adding feature flags makes it harder to write tests, because you now have to test both code paths. Even though the feature flag decreases the risk of your new code path taking down your site, it doesn&amp;rsquo;t help much if the new code path does the same calculation incorrectly. (In the best case scenario, it raises an exception and quits; in the worst, it silently fails while your tests gleefully pass).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There you go: feature flags. They are so much fun!!!&lt;/p&gt;

&lt;p&gt;Is there anything I missed out on? Does anybody have great reference implementations that I can look at? Send me emails!&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:tradeoffs&#34;&gt;software engineering, like all engineering, is about making tradeoffs. One thing to keep in mind, though, is that no one really knows how to make these tradeoffs with any level of precision. You might think you can dump $X bazillions of dollars of engineering time into making your thing Y% more reliable and then end up with less reliable software because you replaced the database with a crappier database and didn&amp;rsquo;t realize it was going to be crappier until 6 months after you finished your project.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:tradeoffs&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>POSA in Czech: Výkonnost open source aplikací</title>
      <link>http://tavisharmstrong.com/2016/12/20/posa-in-czech-v%C3%BDkonnost-open-source-aplikac%C3%AD</link>
      <pubDate>Tue, 20 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>http://tavisharmstrong.com/2016/12/20/posa-in-czech-v%C3%BDkonnost-open-source-aplikac%C3%AD</guid>
      <description>&lt;p&gt;Ladislav Lhotka at cz.nic (which, from what I understand, is the administrator of the .cz TLD) have published a translation of The Performance of Open Source Applications: &amp;ldquo;Výkonnost Open Source Aplikací&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;On their site you can read an &lt;a href=&#34;https://www.nic.cz/page/3318/&#34;&gt;overview&lt;/a&gt; of the book, &lt;a href=&#34;https://knihy.nic.cz/&#34;&gt;download links&lt;/a&gt; for the book and many others, or go straight for the &lt;a href=&#34;https://knihy.nic.cz/files/edice/vykonnost_open_source_aplikaci.pdf&#34;&gt;pdf version&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I wish I could explain to you how cool it is that this book got translated by people I don&amp;rsquo;t know on the internet without any contact from them. Creative Commons has always seemed like a great way to license your works, especially community efforts like POSA, but I don&amp;rsquo;t often see it in action. Thank you Ladislav and friends!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>neveragain.tech</title>
      <link>http://tavisharmstrong.com/2016/12/13/neveragaintech</link>
      <pubDate>Tue, 13 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>http://tavisharmstrong.com/2016/12/13/neveragaintech</guid>
      <description>&lt;p&gt;I&amp;rsquo;m co-signing this &lt;a href=&#34;http://neveragain.tech&#34;&gt;pledge not to help build the muslim registry&lt;/a&gt;. If you work in tech in the US, I hope you will sign it too.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;
We, the undersigned,
are employees of tech organizations and companies based in the United States.
We are engineers, designers, business executives, and others
whose jobs include managing or processing data about people.
We are choosing to stand in solidarity with Muslim Americans,
immigrants, and all people whose lives and livelihoods
are threatened by the incoming administration&amp;rsquo;s
proposed data collection policies.
We refuse to build a database of people
based on their Constitutionally-protected religious beliefs.
We refuse to facilitate mass deportations
of people the government believes to be undesirable.

&lt;p&gt;
We have educated ourselves on the history of threats like these,
and on the roles that technology and technologists played
in carrying them out.
We see how &lt;a href=&#34;http://www.ibmandtheholocaust.com/&#34;&gt;IBM collaborated to digitize and streamline the Holocaust&lt;/a&gt;,
contributing to the deaths of six million Jews and millions of others.
We recall the &lt;a href=&#34;https://en.wikipedia.org/wiki/Internment_of_Japanese_Americans&#34;&gt;internment of Japanese Americans&lt;/a&gt;
during the Second World War.
We recognize that &lt;a href=&#34;https://en.wikipedia.org/wiki/Armenian_Genocide#Deportations&#34;&gt;mass deportations&lt;/a&gt;
precipitated the very atrocity the word genocide
was &lt;a href=&#34;https://en.wiktionary.org/wiki/genocide#Etymology&#34;&gt;created&lt;/a&gt; to describe:
the murder of 1.5 million Armenians in Turkey.
We acknowledge that
genocides are not merely a relic of the distant &lt;nobr&gt;past&amp;mdash;&lt;/nobr&gt;&lt;wbr&gt;among others,
&lt;a href=&#34;http://www.rwandanstories.org/genocide/hate_radio.html&#34;&gt;Tutsi Rwandans&lt;/a&gt; and
&lt;a href=&#34;https://en.wikipedia.org/wiki/Bosnian_genocide&#34;&gt;Bosnian Muslims&lt;/a&gt;
have been victims in our lifetimes.

&lt;p&gt;
Today we stand together to say: not on our watch, and never again.

&lt;p&gt;
We commit to the following actions:

&lt;ul&gt;
  &lt;li&gt;We refuse to participate in the creation of
  databases of identifying information
  for the United States government
  to target individuals based on race, religion, or national origin.

  &lt;li&gt;We will advocate within our organizations:
    &lt;ul&gt;
      &lt;li&gt;to minimize the collection and retention of data
      that would facilitate ethnic or religious targeting.
      &lt;li&gt;to scale back existing datasets
      with unnecessary racial, ethnic, and national origin data.
      &lt;li&gt;to responsibly destroy high-risk datasets and backups.
      &lt;li&gt;to implement security and privacy best practices,
      in particular,
      for end-to-end encryption to be the default wherever possible.
      &lt;li&gt;to demand appropriate legal process
      should the government request that we turn over
      user data collected by our organization, even in small amounts.
    &lt;/ul&gt;

  &lt;li&gt;If we discover misuse of data that we consider illegal or unethical
  in our organizations:
    &lt;ul&gt;
      &lt;li&gt;We will work with our colleagues and leaders to correct it.
      &lt;li&gt;If we cannot stop these practices,
      we will exercise our &lt;a href=&#34;https://www.shrm.org/resourcesandtools/legal-and-compliance/state-and-local-updates/pages/california-whistleblowers.aspx&#34;&gt;rights&lt;/a&gt; and responsibilities to speak out publicly
      and engage in &lt;a href=&#34;https://www.theengineroom.org/responsible-data-leaks-and-whistleblowing/&#34;&gt;responsible whistleblowing&lt;/a&gt;
      without endangering users.
      &lt;li&gt;If we have the authority to do so,
      we will use all available legal defenses to stop these practices.
      &lt;li&gt;If we do not have such authority,
      and our organizations force us to engage in such misuse,
      we will resign from our positions rather than comply.
    &lt;/ul&gt;

  &lt;li&gt;We will raise awareness and ask critical questions
  about the responsible and fair use of data and algorithms
  beyond our organization and our industry.
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;If you don&amp;rsquo;t want to sign your name on it, I&amp;rsquo;d be curious to know why.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How would we regulate software engineers?</title>
      <link>http://tavisharmstrong.com/2016/12/10/regulated-software-engineering</link>
      <pubDate>Sat, 10 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>http://tavisharmstrong.com/2016/12/10/regulated-software-engineering</guid>
      <description>&lt;p&gt;What obligations do software engineers have toward the public? Other disciplines like civil engineering have an obvious impact on public safety: if you are sloppy with your design and a bridge falls down, you&amp;rsquo;ll have blood on your hands. With software, these are real concerns too. I don&amp;rsquo;t know if any internet-of-things bridges exist, but I can point to at least one &lt;a href=&#34;http://tavisharmstrong.com/2012/01/31/the-maeslant-kering-bos-development/&#34;&gt;software-controlled dam&lt;/a&gt;. Any software engineering course worth its salt will mention the &lt;a href=&#34;https://en.wikipedia.org/wiki/Therac-25&#34;&gt;Therac-25 radiation therapy machine&lt;/a&gt; which overdosed its patients. However, the software engineering discipline is fraught with moral challenges that go far beyond not killing people &amp;ndash; surveillance and sexual harassment are just a few that come to mind. So what would a regulated software engineering profession look like?&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ll give some background on my own experience first. I graduated with an engineering degree (a B.Eng.) in Quebec. This has two implications professionally: one, I am eligible to enroll in the Order of Engineers of Quebec; two, I was given a weird misshapen ring to wear on my pinky finger in a vaguely cultish graduation ceremony. I&amp;rsquo;ll take these in order.&lt;/p&gt;

&lt;p&gt;First, enrolling in the Order of Engineers of Quebec would entitle me to call myself an engineer, use &amp;ldquo;eng.&amp;rdquo; or &amp;ldquo;ing.&amp;rdquo; after my name when signing letters, stamp certain technical documentation, and do specific kinds of work in some protected industries (I believe railroad control systems are an example). If you are like me and work in the software industry, this all sounds absurd. If software engineers acted like doctors they would be laughed at, and rightly so. For all practical purposes, enrolling in the Order of Engineers of Quebec would not be super useful to me. Google Montreal employees get by just fine with calling themselves software developers.&lt;/p&gt;

&lt;p&gt;That said, there are aspects to the structure that are appealing. Many professional orders like this (supposedly) support their members by revoking licenses of the corrupt or dangerously incompetent. They &lt;a href=&#34;http://www.peo.on.ca/index.php/ci_id/16158/la_id/1.htm&#34;&gt;support members who wish to blow the whistle on projects that endanger public safety&lt;/a&gt; and require members to do so.&lt;/p&gt;

&lt;p&gt;The second thing that my engineering degree gave me was a weird ring that I wear on my pinky finger called the &lt;a href=&#34;https://en.wikipedia.org/wiki/Iron_Ring&#34;&gt;Iron Ring&lt;/a&gt;. In San Francisco, this immediately marks me as a Canadian-educated engineer &lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:waterloo&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:waterloo&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;. When you graduate with an engineering degree, you are invited to atend the Ritual of the Calling of the Engineer, a private (but not secret) ceremony designed by none other than Rudyard Kipling where the presenters address each other as, e.g., &amp;ldquo;Engineer Tavish Armstrong&amp;rdquo;. A feeble attempt at making it secular has been made. While the ceremony itself is weird or offensive to many, the main thing to take away from it is the Obligation, which you can read in lovely jpeg form &lt;a href=&#34;https://en.wikipedia.org/wiki/File:Ritual_of_the_Calling_of_an_Engineer_Oath.jpg&#34;&gt;here&lt;/a&gt;. The general idea is that you should not allow your work to harm public safety and you should not be corrupt. The ring itself is meant to remind you of these two aims: it scratches on the paper when you write your plans &lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:autocad&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:autocad&#34;&gt;2&lt;/a&gt;&lt;/sup&gt; and will scratch gaudy gold jewellery that you have on the adjacent finger.&lt;/p&gt;

&lt;p&gt;Does the Ritual of the Calling of the Engineer provoke good work and behaviour from engineers? &lt;a href=&#34;http://montrealgazette.com/news/local-news/1031-city-engineers&#34;&gt;Unclear&lt;/a&gt;. But at least it&amp;rsquo;s a nice story.&lt;/p&gt;

&lt;p&gt;So, with all that out of the way, what would it look like to regulate software engineers like me?&lt;/p&gt;

&lt;p&gt;For starters, I like Mike Hoye&amp;rsquo;s &lt;a href=&#34;http://exple.tive.org/blarg/2016/10/12/minimum-viable-basic-human-decency/&#34;&gt;blog post&lt;/a&gt; on the bare minimum developers of social software should do to protect and support their users and his much longer post on &lt;a href=&#34;http://exple.tive.org/blarg/2016/08/29/free-as-in-health-care/&#34;&gt;how software affects your everyday freedoms&lt;/a&gt; and why this is such a different issue than the notion of software freedom that the Free Software Foundation pushes.&lt;/p&gt;

&lt;p&gt;The ACM has published a &lt;a href=&#34;https://www.acm.org/about-acm/acm-code-of-ethics-and-professional-conduct&#34;&gt;code of ethics&lt;/a&gt; that contains passages like:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Inequities between different groups of people may result from the use or
misuse of information and technology. In a fair society, all individuals would
have equal opportunity to participate in, or benefit from, the use of
computer resources regardless of race, sex, religion, age, disability,
national origin or other such similar factors. However, these ideals do not
justify unauthorized use of computer resources nor do they provide an
adequate basis for violation of any other ethical imperatives of this code.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;While jumping straight from &amp;ldquo;well, computers systems can be biased&amp;rdquo; to &amp;ldquo;but be sure not to hack racist computer systems&amp;rdquo; is a strange way to phrase this, we could charitably assume the author(s) intended to discourage &lt;a href=&#34;http://www.theverge.com/2015/7/1/8880363/google-apologizes-photos-app-tags-two-black-people-gorillas&#34;&gt;racist facial recognition systems&lt;/a&gt; or &lt;a href=&#34;https://www.propublica.org/article/facebook-lets-advertisers-exclude-users-by-race&#34;&gt;advertising tools that enable violations of the Fair Housing act of 1968&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m interested in learning more about the history of professional organizations of engineers or any attempts that have been made to regulate the software engineering profession. If you have suggestions, please let me know (my email is tavisharmstrong at gmail).&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:waterloo&#34;&gt;Many also mistakenly assume I studied at Waterloo.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:waterloo&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:autocad&#34;&gt;it also clicks against the mouse when you use autocad, I guess?
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:autocad&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Time.utc in ruby</title>
      <link>http://tavisharmstrong.com/2016/07/20/timeutc-in-ruby</link>
      <pubDate>Wed, 20 Jul 2016 20:09:00 +0000</pubDate>
      
      <guid>http://tavisharmstrong.com/2016/07/20/timeutc-in-ruby</guid>
      <description>&lt;p&gt;A coworker pointed out this strange behaviour in Ruby today:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;irb(main):003:0&amp;gt; Time.utc(2016, 2, 29)
=&amp;gt; 2016-02-29 00:00:00 UTC
irb(main):004:0&amp;gt; Time.utc(2015, 2, 29)
=&amp;gt; 2015-03-01 00:00:00 UTC
irb(main):005:0&amp;gt; Time.utc(2015, 1, 32)
ArgumentError: argument out of range
	from (irb):5:in `utc&#39;
	from (irb):5
	from /usr/bin/irb:11:in `&amp;lt;main&amp;gt;&#39;
irb(main):006:0&amp;gt; Time.utc(2015, 4, 31)
=&amp;gt; 2015-05-01 00:00:00 UTC
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Clearly the authors made the effort to stop you from passing in obviously bad values. But I still find it so odd that it rolls over values that are just a little incorrect without telling you.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>What they didn&#39;t teach me in school</title>
      <link>http://tavisharmstrong.com/2015/07/26/what-they-didnt-teach-me-in-school</link>
      <pubDate>Sun, 26 Jul 2015 04:28:00 +0000</pubDate>
      
      <guid>http://tavisharmstrong.com/2015/07/26/what-they-didnt-teach-me-in-school</guid>
      <description>&lt;p&gt;Mike Hoye has some &lt;a href=&#34;http://exple.tive.org/blarg/2015/06/15/september-never-changes/&#34;&gt;good advice&lt;/a&gt; for university professors hoping to
incorporate open source development into their courses:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;[W]e’re grateful any effort put in, large or small, to making Firefox better
and supporting a free and open Web. Only this: there are a couple of things
that make working with Firefox in an academic context challenging and you
should be aware of them.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The main problem he talks about is the disconnect between the cadence of the
university project and of an open source release. Sometimes a small bug can
turn into a large one, and open source developers won&amp;rsquo;t merge patches
willy-nilly just to appease an impatient professor. It&amp;rsquo;s hard for developers to
find bugs that will be easily fixed within that short time frame, and it&amp;rsquo;s made
much harder by the lack of warning they&amp;rsquo;re given by professors. His advice is
good, and if you&amp;rsquo;re hoping to unleash a bunch of hapless undergrads onto
an open source project you should follow it.&lt;/p&gt;

&lt;p&gt;The post reminded me of a few things that I&amp;rsquo;ve been thinking about lately,
especially things that are way harder than I understood when I was in school.&lt;/p&gt;

&lt;p&gt;In the case of open source development, I never truly understood what was so
damn hard about it when you&amp;rsquo;re starting out. When I was in first year, I read
a bunch of ideologically-charged essays by Stallman, Doctorow, and friends.
Easy &amp;ndash; just download the source code to an open source project you use. Muck
around with the source code and you&amp;rsquo;ll learn how to code. Before you know it,
you&amp;rsquo;ll be submitting patches. Great. This all sounded reasonable to me back then.
On the internet, no one knows you&amp;rsquo;re a dog, and so I pulled myself onto my hind
legs and compiled &lt;code&gt;nano&lt;/code&gt; and tried to figure out how the source code worked &lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;.
But it never seemed to stick; I didn&amp;rsquo;t actually learn how the internals worked,
I never actually got around to fixing any bugs, and I thought it was all because
I was too dumb to be a developer.&lt;/p&gt;

&lt;p&gt;Over the next few years I would occasionally convince myself that I could make
it happen. And it never really did.&lt;/p&gt;

&lt;p&gt;Part of the problem was that I didn&amp;rsquo;t really know how to program all that well,
and you need to know how to program pretty well to be able to contribute
anything meaningful to, say, Firefox. Or maybe you don&amp;rsquo;t, but you sure as hell need
to be able to figure out the build system.&lt;/p&gt;

&lt;p&gt;But I think you can overcome that, especially if you&amp;rsquo;re brave enough to ask for help
on the internet. The hardest part is that people who run open source projects are
working engineers, and they expect you to also be a working engineer. They expect
you to understand the social norms around software development and to have familiarity
with the tools necessary to keep up with them.&lt;/p&gt;

&lt;p&gt;I first started making open source patches when I was an intern at a Drupal
consulting company. Here&amp;rsquo;s &lt;a href=&#34;https://www.drupal.org/node/1260528&#34;&gt;one&lt;/a&gt;. And that took a lot of hand-holding
from some very good mentors who I am very grateful for. It wasn&amp;rsquo;t just the code
that was hard to figure out. I needed to figure out how to create an actual &lt;code&gt;.patch&lt;/code&gt;
file. I needed to understand how to interpret test output. And I needed to do all
of the above enough times to appease the reviewers. It takes many different skills
to work with other developers, and it&amp;rsquo;s difficult to learn these skills independently
of the others.&lt;/p&gt;

&lt;p&gt;The point about mentors is, I guess, what this whole post is really about. The
thing that has been most useful to me when learning to write software has
been sitting down with someone who is better than me and watching them work.
This is still true today: whenever I can, I try to watch how my peers do their
work and it&amp;rsquo;s staggering how much I can learn in a few minutes. I imagine
some people don&amp;rsquo;t need to watch over other people&amp;rsquo;s shoulders to learn the
trade, but it really works for me.&lt;/p&gt;

&lt;p&gt;If I was going to give advice to a more junior developer, I guess it&amp;rsquo;d be this:
find someone more experienced and try to convince them to let you watch them
work.  Ask questions when you don&amp;rsquo;t understand something. And try to mimic them
when you write software yourself. If you&amp;rsquo;re a more experienced engineer, offer
this to people more junior to you. I know it&amp;rsquo;s hard to work when someone&amp;rsquo;s
looking over your shoulder, but do it anyways.&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;&lt;p&gt;To this day I receive the nano-devel mailing list to my inbox; it baffles
  me that I ever thought this would help launch my open source career.&lt;/p&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>The Last Line</title>
      <link>http://tavisharmstrong.com/2015/05/24/the-last-line</link>
      <pubDate>Sun, 24 May 2015 21:42:00 +0000</pubDate>
      
      <guid>http://tavisharmstrong.com/2015/05/24/the-last-line</guid>
      <description>&lt;p&gt;Greg Wilson posted a &lt;a href=&#34;http://software-carpentry.org/blog/2015/05/icse2015.html&#34;&gt;list of papers worth reading&lt;/a&gt; from
the 2015 &lt;em&gt;International Conference on Software Engineering&lt;/em&gt;.  One of the
abstracts that caught my eye was from &lt;a href=&#34;http://www.st.ewi.tudelft.nl/~mbeller/publications/2015_beller_zaidman_karpov_the_last_line_effect_preprint.pdf&#34;&gt;&lt;em&gt;The Last Line Effect&lt;/em&gt;&lt;/a&gt; &lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:cite&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:cite&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Abstract: Micro-clones are tiny duplicated pieces of code; they
typically comprise only a few statements or lines. In this paper,
we expose the “last line effect,” the phenomenon that the last
line or statement in a micro-clone is much more likely to contain
an error than the previous lines or statements. We do this by
analyzing 208 open source projects and reporting on 202 faulty
micro-clones.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It might be easier to just look at an example of what they&amp;rsquo;re talking about:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;x += other.x;
y += other.y;
z += other.y;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here, the last line reads &lt;code&gt;other.y&lt;/code&gt; instead of &lt;code&gt;other.z&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;I think this is a great example of the kind of software engineering research
paper I really enjoy. The paper isn&amp;rsquo;t claiming that much: in the software they
studied using their tool, they found a bunch of copy pasta. Among that copy
pasta, they found that the last, er, noodle is more likely to be buggy.
Many engineers could guess at this result, but having evidence to back up your
anecdote is useful.&lt;/p&gt;

&lt;p&gt;The other part that I like is that it&amp;rsquo;s &lt;em&gt;useful&lt;/em&gt;. Next time
I&amp;rsquo;m reviewing code, I&amp;rsquo;m probably going to look more suspiciously at &amp;ldquo;micro-clones&amp;rdquo;,
and when I do, I&amp;rsquo;ll know where to focus my efforts &amp;ndash; on the last line.&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:cite&#34;&gt;Beller, Zaidman, and Karpov, 2015.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:cite&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Programming as argument</title>
      <link>http://tavisharmstrong.com/2015/05/09/programming-as-argument</link>
      <pubDate>Sat, 09 May 2015 14:26:00 +0000</pubDate>
      
      <guid>http://tavisharmstrong.com/2015/05/09/programming-as-argument</guid>
      <description>&lt;p&gt;Many people before me have argued that computer programs are secondarily about
making a machine perform a task and primarily about telling other humans what
you want the computer to do. Pseudocode takes this to the extreme &amp;ndash;
humans can discuss what a pseudocode program &lt;em&gt;would&lt;/em&gt; do and whether or not it
would be a good idea, without ever running the code on a computer.  The
pseudocode program is an argument &amp;ndash; it argues that a program could be
constructed to accomplish the task at hand. The problem with pseudocode
is &lt;em&gt;not&lt;/em&gt; that it doesn&amp;rsquo;t run on a computer. The problem with pseudocode is that it has no
way of convincing you that it would work if it &lt;em&gt;did&lt;/em&gt; run on a computer.&lt;/p&gt;

&lt;p&gt;The reason why a pseudocode program of any respectable size is not a convincing
argument is probably obvious to anyone who writes software for a living: it&amp;rsquo;s
easy to write code that looks plausible to other humans, but unless you run
the program, it&amp;rsquo;s hard to believe that it will actually work. Software that is easy to
run is more convincing because you can watch it work. You provide inputs, it
provides outputs. You can do this to prove or disprove hypotheses. In this case, though,
the code stops being an argument that a program &lt;em&gt;could&lt;/em&gt; be constructed to perform
a task (as is the case with pseudocode). Instead, it becomes an argument that
the compiled program will perform the task correctly. Testing the program manually
is one way of convincing yourself that it will do that. But it is only one way.&lt;/p&gt;

&lt;p&gt;An automated testing framework can be useful for making your code more convincing.
You can show that given &lt;em&gt;this&lt;/em&gt; input and &lt;em&gt;that&lt;/em&gt; input, the program will produce
the correct output. Other programmers can run the tests and feel more confident
that the program will behave that way.&lt;/p&gt;

&lt;p&gt;A few arguments are implicit in every test: these fake inputs are
representative of real inputs. This is an accurate simulation of global state.
These expected outputs are the &lt;em&gt;correct&lt;/em&gt; outputs.  When you use mocks or stubs
in your tests, you argue that the dependencies you are simulating
actually behave that way; a common mistake is over-mocking dependencies so much
that you have to just &lt;em&gt;trust&lt;/em&gt; that the code will work when connected to real dependencies.
For example, if your tests don&amp;rsquo;t open a socket
to a functioning server, can you really be sure that the code will do so correctly in
production?  If you can&amp;rsquo;t, you have to &lt;em&gt;trust&lt;/em&gt; that the networking code works. The
argument becomes &amp;ldquo;&lt;em&gt;if&lt;/em&gt; we assume the networking code exists, the following code
will write this message over the socket.&amp;rdquo; That &lt;em&gt;if&lt;/em&gt; might be a very big &lt;em&gt;if&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Code review makes this argumentation-model-of-programming more obvious. If you
write useless tests, a reviewer will often tell you that they are terrible
tests.  The point they are making is &lt;em&gt;not&lt;/em&gt; that your code doesn&amp;rsquo;t work.  The
point is that they have little reason to believe it will. They have not been
convinced by your argument.&lt;/p&gt;

&lt;p&gt;If code is an argument, what does that mean for working programmers?  Well, it
means that the rules of rhetoric apply when writing software. If you want your
code to be merged, or you want your project to be adopted, you need it to be
&lt;a href=&#34;http://en.wikipedia.org/wiki/Robert_Cialdini&#34;&gt;persuasive&lt;/a&gt;.  This raises an important question: is &lt;em&gt;persuasive&lt;/em&gt;
code the same thing as &lt;em&gt;good&lt;/em&gt; code?&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>NBDiff: A diffing and merging tool for the IPython Notebook</title>
      <link>http://tavisharmstrong.com/2014/04/06/nbdiff-a-diffing-and-merging-tool-for-the-ipython-notebook</link>
      <pubDate>Sun, 06 Apr 2014 15:18:00 +0000</pubDate>
      
      <guid>http://tavisharmstrong.com/2014/04/06/nbdiff-a-diffing-and-merging-tool-for-the-ipython-notebook</guid>
      <description>&lt;p&gt;Final-year engineering students at many universities have to complete a &amp;ldquo;Capstone&amp;rdquo; project that gives them a chance to apply everything they learned throughout school to a practical, hands-on group project. My team just finished ours &amp;ndash; a project called &lt;a href=&#34;http://nbdiff.org&#34;&gt;NBDiff&lt;/a&gt; &amp;ndash; and I&amp;rsquo;m happy to report that it was a success.&lt;/p&gt;

&lt;p&gt;If you&amp;rsquo;ve spoken to me in the last couple years, you&amp;rsquo;ve probably heard me ramble about the IPython Notebook, a rich web-based environment for scientific computing. Well, that project is wonderful, but there&amp;rsquo;s a catch with working on notebook files: the file format is a giant JSON blob and makes version control tricky. If you use &lt;code&gt;git diff&lt;/code&gt;, it can be hard to understand what you&amp;rsquo;ve actually changed, and if you need to resolve a merge conflict? Fasten your seatbelt.&lt;/p&gt;

&lt;p&gt;NBDiff takes a stab at making these tasks easier. It presents diffs in a two-pane format and shows you deleted/added cells how you originally saw them in the notebook: if an image was changed, you see the image instead of a 10000-line diff of a base64 encoded PNG file. When resolving merge conflicts, you don&amp;rsquo;t have to worry about mangling the JSON by hand &amp;ndash; you just drag and drop changes into the final version and click &amp;lsquo;save&amp;rsquo;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://tavisharmstrong.com/nbdiff-screenshots/main-screenshot.png&#34; alt=&#34;A screenshot of nbdiff&#34; /&gt;&lt;/p&gt;

&lt;p&gt;As far as school projects go, this one was very satisfying. We have 50 GitHub stars and several hundred downloads already; I can actually use it to solve problems &lt;em&gt;right now&lt;/em&gt;; and the IPython folks are interested in seeing it maintained beyond Capstone. Considering many school projects &amp;ndash; even Capstone projects &amp;ndash; never see the light of day, let alone continued maintenance, I&amp;rsquo;m really happy about this.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Homepage: &lt;a href=&#34;http://nbdiff.org&#34;&gt;nbdiff.org&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;GitHub repo: &lt;a href=&#34;https://github.com/tarmstrong/nbdiff&#34;&gt;tarmstrong/nbdiff&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;PyPI package: &lt;a href=&#34;https://pypi.python.org/pypi/nbdiff&#34;&gt;nbdiff&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;http://tavisharmstrong.com/nbdiff-screenshots/stars.png&#34; alt=&#34;50 github stars and counting&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How long does it take to review a pull request on IPython?</title>
      <link>http://tavisharmstrong.com/2013/12/06/how-long-does-it-take-to-review-a-pull-request-on-ipython</link>
      <pubDate>Fri, 06 Dec 2013 00:32:00 +0000</pubDate>
      
      <guid>http://tavisharmstrong.com/2013/12/06/how-long-does-it-take-to-review-a-pull-request-on-ipython</guid>
      <description>&lt;p&gt;I wrote this a while ago, but I never linked to it from my blog. It&amp;rsquo;s an
IPython Notebook that looks at how long it takes to review a pull request on
the &lt;a href=&#34;http://ipython.org&#34;&gt;IPython&lt;/a&gt; project.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://nbviewer.ipython.org/github/tarmstrong/code-analysis/blob/master/IPythonReviewTime.ipynb&#34;&gt;How long does it take to review a pull request on IPython?&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I had fun writing it, and I&amp;rsquo;d like to see more of this from non-academics.
Hackers should be able to answer questions they have about a code base without
too much of a fuss. If I can find the time, I hope to make this a bit easier
with tools like &lt;a href=&#34;https://github.com/tarmstrong/git2json&#34;&gt;git2json&lt;/a&gt; &amp;mdash; if
you&amp;rsquo;d like to help, I&amp;rsquo;d be grateful.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The Git Harness</title>
      <link>http://tavisharmstrong.com/2013/11/24/the-git-harness</link>
      <pubDate>Sun, 24 Nov 2013 16:30:00 +0000</pubDate>
      
      <guid>http://tavisharmstrong.com/2013/11/24/the-git-harness</guid>
      <description>

&lt;p&gt;Git&amp;rsquo;s usefulness far surpasses the frustration caused by its clunky interface, so I don&amp;rsquo;t like to bash it. It was the first version control system I learned, and I learned it before I could program much more than CS101 assignments. Throughout the years, I&amp;rsquo;ve used various languages and various version control systems, but Git is the only one I&amp;rsquo;ve used seriously for any amount of time. So not only do I not like to bash it — I lack the perspective necessary for critique.&lt;/p&gt;

&lt;p&gt;That said, most people can agree on one thing: the interface sucks. Git is a powerful tool, but it&amp;rsquo;s almost impossible to learn how all the commands and their options work. The arguments have inconsistent orders, and the flags mean different things in different contexts. Some of the commands share duties with others. I&amp;rsquo;ve learned to deal with it — it involves reading the man pages every time you want to use &lt;code&gt;git branch&lt;/code&gt; — but it is a struggle.&lt;/p&gt;

&lt;p&gt;Complaining is fun, but it isn&amp;rsquo;t going to get us anywhere —  how do we go about fixing this problem instead? Is the answer a slick GUI like the GitHub desktop client? For some people, sure. But too many GUIs solve the wrong problem: &lt;em&gt;affordance&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Affordance is the idea that you should be able to figure out how to use parts of an interface intuitively. Buttons should look like they can be pressed, editable text should look like it can be edited, etc. Command line tools generally solve this problem with man pages and usage messages — and that&amp;rsquo;s a powerful mechanism.&lt;/p&gt;

&lt;p&gt;However, it doesn&amp;rsquo;t let you predict the outcome of your actions. Git forces you to have a solid mental model of how a Git history works. You have to understand what the various commands do to that mental model, and be able to simulate a proposed action in your head. Most of us developed this mental model through using Git and making a lot of mistakes.&lt;/p&gt;

&lt;p&gt;Practice makes perfect, but there is no virtue in unnecessary struggle. We &lt;em&gt;could&lt;/em&gt; build a Git interface that helps novices develop their mental models faster, with less pain. We could do it without hiding the complexities of Git, too. And I think we should.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;This&lt;/em&gt; is the Git interface that I would actually want to use:&lt;/p&gt;

&lt;h2 id=&#34;the-napkin-sketch&#34;&gt;The Napkin Sketch&lt;/h2&gt;

&lt;p&gt;Most people who know how to use Git have a conceptual model of a Git log that looks something like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://tavisharmstrong.com/git-diagrams/basic-vis.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;First, you&amp;rsquo;ve got the initial state of the repository &amp;ndash; the files that were there when you started. Then you have a set of commits (or &amp;ldquo;changes&amp;rdquo;) that transform those initial files into what they are today in the &lt;code&gt;HEAD&lt;/code&gt; version. The state of the working directory is indicated by the &lt;code&gt;HEAD&lt;/code&gt; ref. In the above diagram, our &lt;code&gt;HEAD&lt;/code&gt; is pointed at &lt;code&gt;master&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If you use Git, you probably understand this. You might visualize it differently — maybe your arrows go the other way, or maybe you like a vertical graph. In any case, this visualization helps you make decisions about what to do next, depending on your goals.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s say you have some unstaged changes in your working directory. You start typing &lt;code&gt;git commit -a&lt;/code&gt;&amp;hellip;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://tavisharmstrong.com/git-diagrams/adding-a-commit-start-typing.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&amp;hellip; and when the interface realizes what command you&amp;rsquo;re typing in, it shows you a preview of what will happen if you hit enter. First, it creates a new commit.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://tavisharmstrong.com/git-diagrams/adding-a-commit-pre-refmove.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;And then it updates &lt;code&gt;master&lt;/code&gt; and &lt;code&gt;HEAD&lt;/code&gt; to point to it.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://tavisharmstrong.com/git-diagrams/adding-a-commit.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;But you haven&amp;rsquo;t hit enter yet. This lets you understand the change you&amp;rsquo;re about to make. If it&amp;rsquo;s not what you wanted, you have a chance to avoid running that command and having to correct your mistake — which is especially difficult for novices.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s another situation. You have a &lt;code&gt;dev&lt;/code&gt; branch and you want to take a look at the files in it.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://tavisharmstrong.com/git-diagrams/basic-branch-vis.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;You try &lt;code&gt;git checkout dev&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://tavisharmstrong.com/git-diagrams/checking-out-a-branch-typing.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;It fades the current &lt;code&gt;HEAD&lt;/code&gt; and shows you where your new &lt;code&gt;HEAD&lt;/code&gt; will be after hitting enter. If that&amp;rsquo;s what you want, you can run that command and feel confident you&amp;rsquo;re doing the right thing.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s say that you don&amp;rsquo;t want to check it out, though. Instead, you want to merge &lt;code&gt;dev&lt;/code&gt; into &lt;code&gt;master&lt;/code&gt;. This is what the preview shows you:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://tavisharmstrong.com/git-diagrams/git-merge.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Interpreting this is a challenge, and probably gives little solace to a bewildered novice. Once you get over the conceptual hurdles behind Git, though, you can start to experiment a bit, without fear of breaking your repository. It means you can try out a command and figure out for yourself whether it&amp;rsquo;s going to do what you want without having to ask your friend the Git wizard if it&amp;rsquo;s going to break stuff.&lt;/p&gt;

&lt;p&gt;This idea reminds me of &lt;a href=&#34;http://www.jumpharness.com/skate%20harness%20system.jpg&#34;&gt;figure skating harnesses&lt;/a&gt;. When you&amp;rsquo;re learning to do a double salchow, your coach will often strap you into one of those. You are then free to throw yourself into the jump without fear of falling on your ass. You get to try things out without suffering the consequences, so that you can develop good habits before it hurts.&lt;/p&gt;

&lt;p&gt;With Git, the idea is the same, but instead of falling on your ass,
you&amp;rsquo;re avoiding an hour of sifting through your reflogs.&lt;/p&gt;

&lt;p&gt;So: who wants to build the Git harness?&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The Performance of Open Source Applications is out!</title>
      <link>http://tavisharmstrong.com/2013/10/07/the-performance-of-open-source-applications-is-out</link>
      <pubDate>Mon, 07 Oct 2013 08:00:00 +0000</pubDate>
      
      <guid>http://tavisharmstrong.com/2013/10/07/the-performance-of-open-source-applications-is-out</guid>
      <description>&lt;p&gt;I&amp;rsquo;m happy to announce that &lt;em&gt;The Performance of Open Source Applications&lt;/em&gt; is
finally out. You can head over to &lt;a href=&#34;http://aosabook.org&#34;&gt;the AOSA website&lt;/a&gt; to
read it for free online and find links to places where you can purchase paper
or, soon, electronic copies.&lt;/p&gt;

&lt;p&gt;If you do purchase it, the royalties go to Amnesty International.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://tavisharmstrong.com/photos/posa-front.jpg&#34; alt=&#34;The Performance of Open Source Applications Cover&#34; /&gt;&lt;/p&gt;

&lt;p&gt;If you want to know more about what the book is about, the
&lt;a href=&#34;http://aosabook.org/en/posa/introduction.html&#34;&gt;introduction&lt;/a&gt; is a good place
to start. The authors worked hard to share what they know and I learned a lot
from them; I hope you do too.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>What I cannot create, I cannot understand</title>
      <link>http://tavisharmstrong.com/2013/07/06/what-i-cannot-create-i-cannot-understand</link>
      <pubDate>Sat, 06 Jul 2013 16:54:00 +0000</pubDate>
      
      <guid>http://tavisharmstrong.com/2013/07/06/what-i-cannot-create-i-cannot-understand</guid>
      <description>&lt;p&gt;My friend Corey, author of the excellent &lt;a href=&#34;http://bayesianbiologist.com&#34;&gt;Bayesian Biologist&lt;/a&gt; blog, recently &lt;a href=&#34;https://twitter.com/CjBayesian/status/350630554804305922&#34;&gt;said&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;What I cannot create, I cannot understand&amp;rdquo; -Richard Feynman. This is why I always build a simulation of any problem I&amp;rsquo;m working on.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&#34;http://bayesianbiologist.com/2012/08/10/simulation-the-modellers-laboratory/&#34;&gt;This post&lt;/a&gt; gives a good, elaborate example involving &amp;ldquo;trip taking behaviour of recreational boaters in Ontario.&amp;rdquo; I&amp;rsquo;ve recently been dabbling in statistical analysis but I&amp;rsquo;m not as much of a smartypants as Corey, so I&amp;rsquo;ve been using the same technique to &lt;em&gt;learn&lt;/em&gt; basic statistical analysis.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s an example. When modeling time series (e.g., fish population and water temperature over time), it&amp;rsquo;s useful to detect if one variable has a dependence on the other at a certain log. Does a spike in water temperature at a given time cause an increase in fish a week later? The &lt;a href=&#34;https://en.wikipedia.org/wiki/Cross-correlation&#34;&gt;cross-correlation&lt;/a&gt; of water temperature and fish population would let us detect this relationship.&lt;/p&gt;

&lt;p&gt;In R, there&amp;rsquo;s a handy &lt;code&gt;ccf()&lt;/code&gt; function that will do this for me. But I&amp;rsquo;m not totally sure how it works, or what it looks like when it works. I&amp;rsquo;ll run it on some fake data to see what happens.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-R&#34;&gt;require(graphics)
# This is contrived, but let&#39;s pretend that water temperature is
# around 300 kelvin, +/- 5 kelvins. The error is normally distributed.
watertemp &amp;lt;- 300 + rnorm(500, 0, 5)
# This is even more contrived. Let&#39;s pretend that the fish population is
# around 270 in our pond, and that you can predict the population ten
# periods from now by multiplying the current water temperature by 0.9.
fishpop &amp;lt;- c(rep(270, 10), watertemp[11:500]*0.9)
x &amp;lt;- 1:500
df &amp;lt;- data.frame(fishpop, watertemp)
df.ts &amp;lt;- ts(df)
plot(df.ts, plot.type=&#39;single&#39;, col = 1:ncol(df.ts))
legend(&amp;quot;bottomleft&amp;quot;, colnames(df.ts), col=1:ncol(df), lty=1)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;http://tavisharmstrong.com/what-i-cannot-create_files/what-i-cannot-create_fig_00.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;This is silly. But this lets me make a hypothesis about what the result of the &lt;code&gt;ccf()&lt;/code&gt; function will be. I &lt;em&gt;think&lt;/em&gt; it&amp;rsquo;ll show a correlation around 1 for a lag of 10. Let&amp;rsquo;s try it out.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-R&#34;&gt;ccf(fishpop, watertemp)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;http://tavisharmstrong.com/what-i-cannot-create_files/what-i-cannot-create_fig_01.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;That wasn&amp;rsquo;t what I expected. This plot suggests that the two series are correlated &lt;em&gt;without&lt;/em&gt; a lag. After a moment, I realize that there&amp;rsquo;s a bug in my code. The line&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;fishpop &amp;lt;- c(rep(270, 10), watertemp[11:500]*0.9)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;does not produce a shifted time series; it just creates one identical to &lt;code&gt;watertemp&lt;/code&gt; but with the first 10 values changed to 270. If I change this line to properly shift the series, I should see a correlation at &lt;code&gt;lag = -10&lt;/code&gt;. Right?&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-R&#34;&gt;fishpop &amp;lt;- c(rep(270, 10), watertemp[1:489]*0.9)
ccf(fishpop, watertemp)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;http://tavisharmstrong.com/what-i-cannot-create_files/what-i-cannot-create_fig_02.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;I was close. The correlation is at &lt;code&gt;lag = 10&lt;/code&gt;. The correct way to read the plot is &lt;em&gt;&lt;code&gt;watertemp&lt;/code&gt; predicts &lt;code&gt;fishpop&lt;/code&gt; ten periods later&lt;/em&gt;. Or, more simply, &lt;code&gt;fishpop&lt;/code&gt; leads watertemp by 10 periods. Either way, I now have a better mental model of how the &lt;code&gt;ccf()&lt;/code&gt; function works. If I applied it to real data, I&amp;rsquo;d be better equipped to interpret the results.&lt;/p&gt;

&lt;p&gt;Most programmers do this instinctually in other domains. I certainly do. But with data analysis, my instinct is to run analyses on real data first &amp;mdash; sometimes without really understanding what I&amp;rsquo;m doing.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Teensy/Arduino timer simulator</title>
      <link>http://tavisharmstrong.com/2012/10/03/teensy/arduino-timer-simulator</link>
      <pubDate>Wed, 03 Oct 2012 17:52:00 +0000</pubDate>
      
      <guid>http://tavisharmstrong.com/2012/10/03/teensy/arduino-timer-simulator</guid>
      <description>&lt;p&gt;I built a simulator for the 16-bit timer in the Teensy++/Arduino
microcontroller in the hopes that people (e.g. fellow students of SOEN
422) might find it useful. Keep in mind that it&amp;rsquo;s a work in progress and
has some bugs. &lt;a href=&#34;http://tavisharmstrong.com/timer1/&#34;&gt;A Simple and Interactive Explanation of the Teensy&amp;rsquo;s
16-bit timer (Timer1)&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The Architecture of Open Source Applications, Volume 2</title>
      <link>http://tavisharmstrong.com/2012/05/08/the-architecture-of-open-source-applications-volume-2</link>
      <pubDate>Tue, 08 May 2012 22:11:00 +0000</pubDate>
      
      <guid>http://tavisharmstrong.com/2012/05/08/the-architecture-of-open-source-applications-volume-2</guid>
      <description>&lt;p&gt;The second volume of &lt;a href=&#34;http://aosabook.org/&#34;&gt;The Architecture of Open Source
Applications&lt;/a&gt; was just released thanks to the hard
work of &lt;a href=&#34;http://www.amyrbrown.ca/index.html&#34;&gt;Amy Brown&lt;/a&gt; and &lt;a href=&#34;http://third-bit.com/&#34;&gt;Greg
Wilson&lt;/a&gt;. I had the privilege of helping copyedit
a few chapters of the book. Here&amp;rsquo;s the blurb:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Architects look at thousands of buildings during their training, and
study critiques of those buildings written by masters. In contrast,
most software developers only ever get to know a handful of large
programs well — usually programs they wrote themselves — and never
study the great programs of history. As a result, they repeat one
another’s mistakes rather than building on one another’s successes.&lt;/p&gt;

&lt;p&gt;This second volume of The Architecture of Open Source Applications
aims to change that. In it, the authors of twenty-four open source
applications explain how their software is structured, and why. What
are each program&amp;rsquo;s major components? How do they interact? And what
did their builders learn during their development? In answering these
questions, the contributors to this book provide unique insights into
how they think.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Go buy it &lt;a href=&#34;http://www.lulu.com/shop/amy-brown-and-greg-wilson/the-architecture-of-open-source-applications-volume-ii/paperback/product-20111008.html&#34;&gt;at
Lulu&lt;/a&gt;
(ebook versions will also be available). It&amp;rsquo;ll be available on Amazon at
some point, but Lulu is preferred, because a greater percentage of the
price goes towards royalties — which are going to Amnesty International.&lt;/p&gt;

&lt;p&gt;&lt;strike&gt;A free online version will be up at some point next week.&lt;/strike&gt; The online
version is available
&lt;a href=&#34;http://aosabook.org&#34; title=&#34;The Architecture of Open Source Applications&#34;&gt;here&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>