<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Tavish Armstrong</title><link href="http://tavisharmstrong.com/" rel="alternate"></link><link href="http://tavisharmstrong.com/feeds/all.atom.xml" rel="self"></link><id>http://tavisharmstrong.com/</id><updated>2016-12-09T23:12:00-04:00</updated>
	<entry><title>RSS feed moved</title>
		<link href="http://tavisharmstrong.com" rel="alternate"></link>
		<updated>2016-12-09T23:12:00-07:00</updated>
		<author><name>Tavish Armstrong</name>
		</author>
		<id></id>
		<summary type="html">The RSS feed for my site has moved to http://tavisharmstrong.com/index.xml . This one is going to stop updating. Sorry!</summary></entry>
	<entry><title>Making sounds with overtone</title><link href="http://tavisharmstrong.com/2016/07/23/making-sounds-with-overtone/" rel="alternate"></link><updated>2016-07-23T23:12:00-04:00</updated><author><name>Tavish Armstrong</name></author><id>tag:tavisharmstrong.com,2016-07-23:2016/07/23/making-sounds-with-overtone/</id><summary type="html">&lt;p&gt;I&amp;#8217;ve been messing about with &lt;a href="https://github.com/overtone/overtone"&gt;Overtone&lt;/a&gt;, a Clojure interface to &lt;a href="http://supercollider.github.io/"&gt;SuperCollider&lt;/a&gt; to make interesting sounds as a way to combine my interests in programming and music. Overtone has been particularly enjoyable to use because it is (unlike SuperCollider) a programming language that has uses beyond sound synthesis, it is surprisingly easy to set up, and is not under active development (which, for the time being, means that it is stable. I&amp;#8217;m looking on the bright side&amp;nbsp;here.)&lt;/p&gt;
&lt;p&gt;At some point I&amp;#8217;ll probably write down what I&amp;#8217;ve learned about working with Overtone, but in the mean time, enjoy these&amp;nbsp;sounds:&lt;/p&gt;
&lt;iframe width="100%" height="450" scrolling="no" frameborder="no" src="https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/273272287&amp;amp;auto_play=false&amp;amp;hide_related=false&amp;amp;show_comments=true&amp;amp;show_user=true&amp;amp;show_reposts=false&amp;amp;visual=true"&gt;&lt;/iframe&gt;</summary><category term="code"></category></entry><entry><title>Time.utc in ruby</title><link href="http://tavisharmstrong.com/2016/07/20/timeutc-in-ruby/" rel="alternate"></link><updated>2016-07-20T20:09:00-04:00</updated><author><name>Tavish Armstrong</name></author><id>tag:tavisharmstrong.com,2016-07-20:2016/07/20/timeutc-in-ruby/</id><summary type="html">&lt;p&gt;A coworker pointed out this strange behaviour in Ruby&amp;nbsp;today:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;irb(main):003:0&amp;gt; Time.utc(2016, 2, 29)
=&amp;gt; 2016-02-29 00:00:00 UTC
irb(main):004:0&amp;gt; Time.utc(2015, 2, 29)
=&amp;gt; 2015-03-01 00:00:00 UTC
irb(main):005:0&amp;gt; Time.utc(2015, 1, 32)
ArgumentError: argument out of range
    from (irb):5:in `utc&amp;#39;
    from (irb):5
    from /usr/bin/irb:11:in `&amp;lt;main&amp;gt;&amp;#39;
irb(main):006:0&amp;gt; Time.utc(2015, 4, 31)
=&amp;gt; 2015-05-01 00:00:00 UTC
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Clearly the authors made the effort to stop you from passing in obviously bad values. But I still find it so odd that it rolls over values that are just a little incorrect without telling&amp;nbsp;you.&lt;/p&gt;</summary><category term="code"></category></entry><entry><title>April links 2016</title><link href="http://tavisharmstrong.com/2016/04/04/april-links-2016/" rel="alternate"></link><updated>2016-04-04T20:09:00-04:00</updated><author><name>Tavish Armstrong</name></author><id>tag:tavisharmstrong.com,2016-04-04:2016/04/04/april-links-2016/</id><summary type="html">&lt;p&gt;Here are a few pages on the internets that I&amp;#8217;ve enjoyed&amp;nbsp;recently:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://dancres.github.io/Pages/"&gt;A Distributed Systems Reading List&lt;/a&gt;. I found the &amp;#8220;Harvest and Yield&amp;#8221; paper particularly&amp;nbsp;helpful.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://12factor.net/"&gt;The Twelve-Factor App&lt;/a&gt;: opinionated guidelines for how to architect web&amp;nbsp;services.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.wipp.energy.gov/picsprog/articles/wipp%20exhibit%20message%20to%2012,000%20a_d.htm"&gt;This is not a place of honour&lt;/a&gt;: how to identify nuclear waste to future generations. (via&amp;nbsp;mhoye)&lt;/li&gt;
&lt;li&gt;&lt;a href="http://danluu.com/programmer-moneyball/"&gt;We only hire the trendiest&lt;/a&gt; by Dan Luu, who is&amp;nbsp;great.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://danluu.com/postmortem-lessons/"&gt;Lessons learned from reading postmortems&lt;/a&gt;, also Dan&amp;nbsp;Luu&lt;/li&gt;
&lt;li&gt;&lt;a href="http://web.mit.edu/2.75/resources/random/How%20Complex%20Systems%20Fail.pdf"&gt;How Complex Systems Fail&lt;/a&gt;, which is referenced in the above Dan Luu&amp;nbsp;post&lt;/li&gt;
&lt;/ul&gt;</summary><category term="Uncategorized"></category></entry><entry><title>What they didn’t teach me in school</title><link href="http://tavisharmstrong.com/2015/07/26/what-they-didnt-teach-me-in-school/" rel="alternate"></link><updated>2015-07-26T04:28:00-04:00</updated><author><name>Tavish Armstrong</name></author><id>tag:tavisharmstrong.com,2015-07-26:2015/07/26/what-they-didnt-teach-me-in-school/</id><summary type="html">&lt;p&gt;Mike Hoye has some &lt;a href="http://exple.tive.org/blarg/2015/06/15/september-never-changes/"&gt;good advice&lt;/a&gt; for university professors hoping to
incorporate open source development into their&amp;nbsp;courses:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;[W]e’re grateful any effort put in, large or small, to making Firefox better
and supporting a free and open Web. Only this: there are a couple of things
that make working with Firefox in an academic context challenging and you
should be aware of&amp;nbsp;them.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The main problem he talks about is the disconnect between the cadence of the
university project and of an open source release. Sometimes a small bug can
turn into a large one, and open source developers won&amp;#8217;t merge patches
willy-nilly just to appease an impatient professor. It&amp;#8217;s hard for developers to
find bugs that will be easily fixed within that short time frame, and it&amp;#8217;s made
much harder by the lack of warning they&amp;#8217;re given by professors. His advice is
good, and if you&amp;#8217;re hoping to unleash a bunch of hapless undergrads onto
an open source project you should follow&amp;nbsp;it.&lt;/p&gt;
&lt;p&gt;The post reminded me of a few things that I&amp;#8217;ve been thinking about lately,
especially things that are way harder than I understood when I was in&amp;nbsp;school.&lt;/p&gt;
&lt;p&gt;In the case of open source development, I never truly understood what was so
damn hard about it when you&amp;#8217;re starting out. When I was in first year, I read
a bunch of ideologically-charged essays by Stallman, Doctorow, and friends.
Easy &amp;#8212; just download the source code to an open source project you use. Muck
around with the source code and you&amp;#8217;ll learn how to code. Before you know it,
you&amp;#8217;ll be submitting patches. Great. This all sounded reasonable to me back then.
On the internet, no one knows you&amp;#8217;re a dog, and so I pulled myself onto my hind
legs and compiled &lt;code&gt;nano&lt;/code&gt; and tried to figure out how the source code worked &lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1" rel="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt;.
But it never seemed to stick; I didn&amp;#8217;t actually learn how the internals worked,
I never actually got around to fixing any bugs, and I thought it was all because
I was too dumb to be a&amp;nbsp;developer.&lt;/p&gt;
&lt;p&gt;Over the next few years I would occasionally convince myself that I could make
it happen. And it never really&amp;nbsp;did.&lt;/p&gt;
&lt;p&gt;Part of the problem was that I didn&amp;#8217;t really know how to program all that well,
and you need to know how to program pretty well to be able to contribute
anything meaningful to, say, Firefox. Or maybe you don&amp;#8217;t, but you sure as hell need
to be able to figure out the build&amp;nbsp;system.&lt;/p&gt;
&lt;p&gt;But I think you can overcome that, especially if you&amp;#8217;re brave enough to ask for help
on the internet. The hardest part is that people who run open source projects are
working engineers, and they expect you to also be a working engineer. They expect
you to understand the social norms around software development and to have familiarity
with the tools necessary to keep up with&amp;nbsp;them.&lt;/p&gt;
&lt;p&gt;I first started making open source patches when I was an intern at a Drupal
consulting company. Here&amp;#8217;s &lt;a href="https://www.drupal.org/node/1260528"&gt;one&lt;/a&gt;. And that took a lot of hand-holding
from some very good mentors who I am very grateful for. It wasn&amp;#8217;t just the code
that was hard to figure out. I needed to figure out how to create an actual &lt;code&gt;.patch&lt;/code&gt;
file. I needed to understand how to interpret test output. And I needed to do all
of the above enough times to appease the reviewers. It takes many different skills
to work with other developers, and it&amp;#8217;s difficult to learn these skills independently
of the&amp;nbsp;others.&lt;/p&gt;
&lt;p&gt;The point about mentors is, I guess, what this whole post is really about. The
thing that has been most useful to me when learning to write software has
been sitting down with someone who is better than me and watching them work.
This is still true today: whenever I can, I try to watch how my peers do their
work and it&amp;#8217;s staggering how much I can learn in a few minutes. I imagine
some people don&amp;#8217;t need to watch over other people&amp;#8217;s shoulders to learn the
trade, but it really works for&amp;nbsp;me.&lt;/p&gt;
&lt;p&gt;If I was going to give advice to a more junior developer, I guess it&amp;#8217;d be this:
find someone more experienced and try to convince them to let you watch them
work.  Ask questions when you don&amp;#8217;t understand something. And try to mimic them
when you write software yourself. If you&amp;#8217;re a more experienced engineer, offer
this to people more junior to you. I know it&amp;#8217;s hard to work when someone&amp;#8217;s
looking over your shoulder, but do it&amp;nbsp;anyways.&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;To this day I receive the nano-devel mailing list to my inbox; it baffles
  me that I ever thought this would help launch my open source career.&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" rev="footnote" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</summary><category term="engineering"></category><category term="school"></category><category term="open source"></category></entry><entry><title>Shows I’ve been watching</title><link href="http://tavisharmstrong.com/2015/07/12/shows-ive-been-watching/" rel="alternate"></link><updated>2015-07-12T22:32:00-04:00</updated><author><name>Tavish Armstrong</name></author><id>tag:tavisharmstrong.com,2015-07-12:2015/07/12/shows-ive-been-watching/</id><summary type="html">&lt;p&gt;Earlier this year I learned to knit. Part of the appeal for me is that it&amp;#8217;s very easy to sit down, knit some stitches, and make progress. It&amp;#8217;s possible to screw up so badly you have to start over, but for the most part it&amp;#8217;s difficult to take large steps backward. Unlike with programming, it&amp;#8217;s hard to knit a scarf so badly it causes active harm to you and the people around you. If you&amp;#8217;re patient, you&amp;#8217;ll eventually have a scarf or a sweater, and no matter how many stiches you accidentally added in the wrong places, you still have something that represents a tonne of work to be proud of. Also you are now warmer than you were before, which is kind of&amp;nbsp;cool.&lt;/p&gt;
&lt;p&gt;One nice thing about knitting is that you can do it while you watch television. Some shows I&amp;#8217;ve been watching&amp;nbsp;lately:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;The West&amp;nbsp;Wing&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Adventure Time&lt;/em&gt;, which is hilarious and cuter than a show has any right to&amp;nbsp;be.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Bomb Girls&lt;/em&gt;, which follows the stories of the workers of a Toronto munitions factory during &lt;span class="caps"&gt;WWII&lt;/span&gt;. Like &lt;em&gt;The Bletchley Circle&lt;/em&gt;, it focuses on parts of the war effort that are not usually explored in war movies, viz., the home front. It also spends some time on the &lt;a href="https://en.wikipedia.org/wiki/Italian-Canadian_internment"&gt;darker parts of Canadian history&lt;/a&gt;, which I&amp;nbsp;appreciate.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Sense8&lt;/em&gt;, the new Netflix show from The Wachowskis and J. Michael Straczynski. &lt;a href="https://twitter.com/aphyr/status/617943823243546625"&gt;This show is great&lt;/a&gt;. And hey, some of it takes place in &lt;span class="caps"&gt;SF&lt;/span&gt; which is kind of&amp;nbsp;neat.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(This fluff post is brought to you by a few weeks of travel and strep throat. Pro-tip: don&amp;#8217;t get strep&amp;nbsp;throat.)&lt;/p&gt;</summary><category term="tv"></category></entry><entry><title>The Last Line</title><link href="http://tavisharmstrong.com/2015/05/24/the-last-line/" rel="alternate"></link><updated>2015-05-24T21:42:00-04:00</updated><author><name>Tavish Armstrong</name></author><id>tag:tavisharmstrong.com,2015-05-24:2015/05/24/the-last-line/</id><summary type="html">&lt;p&gt;Greg Wilson posted a &lt;a href="http://software-carpentry.org/blog/2015/05/icse2015.html"&gt;list of papers worth reading&lt;/a&gt; from
the 2015 &lt;em&gt;International Conference on Software Engineering&lt;/em&gt;.  One of the
abstracts that caught my eye was from &lt;a href="http://www.st.ewi.tudelft.nl/~mbeller/publications/2015_beller_zaidman_karpov_the_last_line_effect_preprint.pdf"&gt;&lt;em&gt;The Last Line Effect&lt;/em&gt;&lt;/a&gt; &lt;sup id="fnref:cite"&gt;&lt;a class="footnote-ref" href="#fn:cite" rel="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Abstract: Micro-clones are tiny duplicated pieces of code; they
typically comprise only a few statements or lines. In this paper,
we expose the “last line effect,” the phenomenon that the last
line or statement in a micro-clone is much more likely to contain
an error than the previous lines or statements. We do this by
analyzing 208 open source projects and reporting on 202 faulty&amp;nbsp;micro-clones.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;It might be easier to just look at an example of what they&amp;#8217;re talking&amp;nbsp;about:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;x += other.x;
y += other.y;
z += other.y;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here, the last line reads &lt;code&gt;other.y&lt;/code&gt; instead of &lt;code&gt;other.z&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;I think this is a great example of the kind of software engineering research
paper I really enjoy. The paper isn&amp;#8217;t claiming that much: in the software they
studied using their tool, they found a bunch of copy pasta. Among that copy
pasta, they found that the last, er, noodle is more likely to be buggy. 
Many engineers could guess at this result, but having evidence to back up your
anecdote is&amp;nbsp;useful.&lt;/p&gt;
&lt;p&gt;The other part that I like is that it&amp;#8217;s &lt;em&gt;useful&lt;/em&gt;. Next time
I&amp;#8217;m reviewing code, I&amp;#8217;m probably going to look more suspiciously at &amp;#8220;micro-clones&amp;#8221;,
and when I do, I&amp;#8217;ll know where to focus my efforts &amp;#8212; on the last&amp;nbsp;line.&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:cite"&gt;
&lt;p&gt;Beller, Zaidman, and Karpov, 2015.&amp;#160;&lt;a class="footnote-backref" href="#fnref:cite" rev="footnote" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</summary><category term="engineering"></category></entry><entry><title>Programming as argument</title><link href="http://tavisharmstrong.com/2015/05/09/programming-as-argument/" rel="alternate"></link><updated>2015-05-09T14:26:00-04:00</updated><author><name>Tavish Armstrong</name></author><id>tag:tavisharmstrong.com,2015-05-09:2015/05/09/programming-as-argument/</id><summary type="html">&lt;p&gt;Many people before me have argued that computer programs are secondarily about
making a machine perform a task and primarily about telling other humans what
you want the computer to do. Pseudocode takes this to the extreme &amp;#8212;
humans can discuss what a pseudocode program &lt;em&gt;would&lt;/em&gt; do and whether or not it
would be a good idea, without ever running the code on a computer.  The
pseudocode program is an argument &amp;#8212; it argues that a program could be
constructed to accomplish the task at hand. The problem with pseudocode
is &lt;em&gt;not&lt;/em&gt; that it doesn&amp;#8217;t run on a computer. The problem with pseudocode is that it has no
way of convincing you that it would work if it &lt;em&gt;did&lt;/em&gt; run on a&amp;nbsp;computer.&lt;/p&gt;
&lt;p&gt;The reason why a pseudocode program of any respectable size is not a convincing
argument is probably obvious to anyone who writes software for a living: it&amp;#8217;s
easy to write code that looks plausible to other humans, but unless you run
the program, it&amp;#8217;s hard to believe that it will actually work. Software that is easy to
run is more convincing because you can watch it work. You provide inputs, it
provides outputs. You can do this to prove or disprove hypotheses. In this case, though,
the code stops being an argument that a program &lt;em&gt;could&lt;/em&gt; be constructed to perform
a task (as is the case with pseudocode). Instead, it becomes an argument that
the compiled program will perform the task correctly. Testing the program manually
is one way of convincing yourself that it will do that. But it is only one&amp;nbsp;way.&lt;/p&gt;
&lt;p&gt;An automated testing framework can be useful for making your code more convincing.
You can show that given &lt;em&gt;this&lt;/em&gt; input and &lt;em&gt;that&lt;/em&gt; input, the program will produce
the correct output. Other programmers can run the tests and feel more confident
that the program will behave that&amp;nbsp;way.&lt;/p&gt;
&lt;p&gt;A few arguments are implicit in every test: these fake inputs are
representative of real inputs. This is an accurate simulation of global state.
These expected outputs are the &lt;em&gt;correct&lt;/em&gt; outputs.  When you use mocks or stubs
in your tests, you argue that the dependencies you are simulating
actually behave that way; a common mistake is over-mocking dependencies so much
that you have to just &lt;em&gt;trust&lt;/em&gt; that the code will work when connected to real dependencies.
For example, if your tests don&amp;#8217;t open a socket
to a functioning server, can you really be sure that the code will do so correctly in
production?  If you can&amp;#8217;t, you have to &lt;em&gt;trust&lt;/em&gt; that the networking code works. The
argument becomes &amp;#8220;&lt;em&gt;if&lt;/em&gt; we assume the networking code exists, the following code
will write this message over the socket.&amp;#8221; That &lt;em&gt;if&lt;/em&gt; might be a very big &lt;em&gt;if&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Code review makes this argumentation-model-of-programming more obvious. If you
write useless tests, a reviewer will often tell you that they are terrible
tests.  The point they are making is &lt;em&gt;not&lt;/em&gt; that your code doesn&amp;#8217;t work.  The
point is that they have little reason to believe it will. They have not been
convinced by your&amp;nbsp;argument.&lt;/p&gt;
&lt;p&gt;If code is an argument, what does that mean for working programmers?  Well, it
means that the rules of rhetoric apply when writing software. If you want your
code to be merged, or you want your project to be adopted, you need it to be
&lt;a href="http://en.wikipedia.org/wiki/Robert_Cialdini"&gt;persuasive&lt;/a&gt;.  This raises an important question: is &lt;em&gt;persuasive&lt;/em&gt;
code the same thing as &lt;em&gt;good&lt;/em&gt;&amp;nbsp;code?&lt;/p&gt;</summary><category term="code"></category><category term="engineering"></category><category term="writing"></category></entry><entry><title>Books I read in 2014</title><link href="http://tavisharmstrong.com/2015/04/04/books-i-read-in-2014/" rel="alternate"></link><updated>2015-04-04T14:35:00-04:00</updated><author><name>Tavish Armstrong</name></author><id>tag:tavisharmstrong.com,2015-04-04:2015/04/04/books-i-read-in-2014/</id><summary type="html">&lt;p&gt;I&amp;#8217;d like to start writing on this blog again, but blogging takes a lot of work so I&amp;#8217;m just going to list some of the fiction I read in 2014. I&amp;#8217;m pretty sure I read more books than this, but these are the ones that I remember. They are in order from most to least&amp;nbsp;favourite.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Use of Weapons&lt;/em&gt; by Iain M.&amp;nbsp;Banks&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Ancillary Justice&lt;/em&gt; by Ann&amp;nbsp;Leckie&lt;/li&gt;
&lt;li&gt;&lt;em&gt;The Dispossessed&lt;/em&gt; by Ursula K. Le&amp;nbsp;Guin&lt;/li&gt;
&lt;li&gt;&lt;em&gt;A Deepness in the Sky&lt;/em&gt; by Vernor&amp;nbsp;Vinge&lt;/li&gt;
&lt;li&gt;&lt;em&gt;The Diamond Age&lt;/em&gt; by Neal&amp;nbsp;Stephenson&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Player of Games&lt;/em&gt; by Iain M.&amp;nbsp;Banks&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Excession&lt;/em&gt; by Iain M.&amp;nbsp;Banks&lt;/li&gt;
&lt;li&gt;&lt;em&gt;The Name of the Wind&lt;/em&gt; by Patrick&amp;nbsp;Rothfuss&lt;/li&gt;
&lt;li&gt;&lt;em&gt;The Windup Girl&lt;/em&gt; by Paolo&amp;nbsp;Bacigalupi&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I also read some short fiction, but mostly can&amp;#8217;t remember it. This is what I do&amp;nbsp;remember:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://subterraneanpress.com/magazine/fall_2010/fiction_the_lifecycle_of_software_objects_by_ted_chiang"&gt;&lt;em&gt;The Lifecycle of Software Objects&lt;/em&gt;&lt;/a&gt; by Ted&amp;nbsp;Chiang&lt;/li&gt;
&lt;li&gt;&lt;a href="http://clarkesworldmagazine.com/mcdonald_07_13_reprint/"&gt;&lt;em&gt;The Dust Assassin&lt;/em&gt;&lt;/a&gt; by Ian&amp;nbsp;McDonald&lt;/li&gt;
&lt;li&gt;&lt;a href="http://clarkesworldmagazine.com/macfarlane_08_13/"&gt;&lt;em&gt;Found&lt;/em&gt;&lt;/a&gt; by Alex Dally&amp;nbsp;MacFarlane&lt;/li&gt;
&lt;/ul&gt;</summary><category term="books"></category></entry><entry><title>Graduation</title><link href="http://tavisharmstrong.com/2014/06/10/graduation/" rel="alternate"></link><updated>2014-06-10T22:34:00-04:00</updated><author><name>Tavish Armstrong</name></author><id>tag:tavisharmstrong.com,2014-06-10:2014/06/10/graduation/</id><summary type="html">&lt;p&gt;Six years ago I moved to Montreal for university. An undergraduate degree should not be treated as a race, but it starts to feel that way after six years. Today, I finally&amp;nbsp;graduated.&lt;/p&gt;
&lt;p&gt;It feels good. I can complain all day about the things I didn&amp;#8217;t like about university &amp;#8212; there are all too many of them, and I like to complain &amp;#8212; but I&amp;#8217;m happy enough with where I am professionally, personally, intellectually right now that I can overlook that and just be&amp;nbsp;happy.&lt;/p&gt;
&lt;p&gt;Onward!&lt;/p&gt;</summary><category term="school"></category></entry><entry><title>The Two Solitudes (for Hackers)</title><link href="http://tavisharmstrong.com/2014/04/19/the-two-solitudes-for-hackers/" rel="alternate"></link><updated>2014-04-19T13:49:00-04:00</updated><author><name>Tavish Armstrong</name></author><id>tag:tavisharmstrong.com,2014-04-19:2014/04/19/the-two-solitudes-for-hackers/</id><summary type="html">&lt;p&gt;Last weekend was PyCon 2014, the annual conference on the Python programming language.
This year we were lucky to have it in Montreal (only a short walk from my apartment)
and I was even more fortunate to be allowed to give a&amp;nbsp;talk.&lt;/p&gt;
&lt;p&gt;As I &lt;a href="https://twitter.com/tavarm/status/379409322943320064"&gt;wrote&lt;/a&gt; when I submitted the proposal, I proposed a talk on a topic
that I wished someone smarter would speak about. I was pretty nervous about giving the talk
&amp;mdash; the usual nerves, but also a sense that the topic was much larger than I could give
credit to in 30 minutes with the limited experience I have as someone a few weeks shy
of an undergraduate engineering&amp;nbsp;degree.&lt;/p&gt;
&lt;p&gt;The gist of the talk is&amp;nbsp;this:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;We have a lot to learn about how we work as software&amp;nbsp;engineers.&lt;/li&gt;
&lt;li&gt;We can learn a lot about how we in the open source community work through
   examining version control history, code review data, etc., and we have the
   tools and skills necessary to analyze the data. (This is a bit of an
   understatement &amp;#8212; many people in the Python community &lt;em&gt;wrote the data analysis tools&lt;/em&gt;.)&lt;/li&gt;
&lt;li&gt;We understand our own projects better than any researcher could so we are in a good
   position to study&amp;nbsp;them.&lt;/li&gt;
&lt;li&gt;We have the most to gain from studying the way we work; we don&amp;#8217;t care about citation
   counts, we just want to write better software and be happier while we do&amp;nbsp;it.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I finished the talk by challenging the audience to go out, learn cool things about the
projects they work on, and present their findings next year at PyCon&amp;nbsp;2015.&lt;/p&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/vvEY6bhLXsU" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;I went into the talk with the goal of finding &lt;em&gt;one&lt;/em&gt; person who thought the topic was cool. Just one.
I seem to have struck a chord though, and had lots of really interesting conversations with people
after my&amp;nbsp;talk.&lt;/p&gt;
&lt;p&gt;Joel Landsteiner &lt;a href="https://twitter.com/LucidOndine/status/455417980227420160"&gt;was perhaps the most generous&lt;/a&gt;&amp;nbsp;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;#8212; really cool talk. Most directly applicable talk I&amp;#8217;ve attended this
conference. Really quite&amp;nbsp;inspirational.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;And I&amp;#8217;m looking forward to seeing what &lt;a href="https://twitter.com/zmagg/status/455783156256624642"&gt;Maggie Zhou&lt;/a&gt; (an engineer at
Etsy) comes up&amp;nbsp;with:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;hey! i really liked your talk @pycon &lt;span class="amp"&gt;&amp;amp;&lt;/span&gt; am inspired to go data collecting &lt;span class="amp"&gt;&amp;amp;&lt;/span&gt;
visualizing for our codebase. thx. will share what i&amp;nbsp;find&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;So all in all, I&amp;#8217;d call it a success. If you saw the talk and this sort of thing gets you excited, please send me an email (tavisharmstrong at gmail dot com). My hope is that if a bunch of us get together and do some cool work like this, we can make some real progress on closing the gap between the &lt;a href="http://www.slideshare.net/gvwilson/two-solitudes"&gt;two solitudes&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Thanks to Dana Bauer for encouraging me to give the talk, Greg Wilson for helping me revise it (and inspiring it), Julia Evans and Kamal Marhubi for calming my nerves beforehand, Jonathan Villemaire-Krajden for helping me tighten up the delivery a little, Titus Brown for not &lt;em&gt;actually&lt;/em&gt; heckling me, and Jessica McKellar for giving me thumbs-ups every time I faltered in the&amp;nbsp;spotlight.&lt;/p&gt;
&lt;p&gt;My notes are available &lt;a href="//tavi.sh/solitude"&gt;here&lt;/a&gt;.&lt;/p&gt;</summary><category term="code"></category><category term="conferences"></category><category term="tech"></category><category term="engineering"></category><category term="data"></category></entry><entry><title>NBDiff: A diffing and merging tool for the IPython Notebook</title><link href="http://tavisharmstrong.com/2014/04/06/nbdiff-a-diffing-and-merging-tool-for-the-ipython-notebook/" rel="alternate"></link><updated>2014-04-06T15:18:00-04:00</updated><author><name>Tavish Armstrong</name></author><id>tag:tavisharmstrong.com,2014-04-06:2014/04/06/nbdiff-a-diffing-and-merging-tool-for-the-ipython-notebook/</id><summary type="html">&lt;p&gt;Final-year engineering students at many universities have to complete a &amp;#8220;Capstone&amp;#8221; project that gives them a chance to apply everything they learned throughout school to a practical, hands-on group project. My team just finished ours &amp;#8212; a project called &lt;a href="http://nbdiff.org"&gt;NBDiff&lt;/a&gt; &amp;#8212; and I&amp;#8217;m happy to report that it was a&amp;nbsp;success.&lt;/p&gt;
&lt;p&gt;If you&amp;#8217;ve spoken to me in the last couple years, you&amp;#8217;ve probably heard me ramble about the IPython Notebook, a rich web-based environment for scientific computing. Well, that project is wonderful, but there&amp;#8217;s a catch with working on notebook files: the file format is a giant &lt;span class="caps"&gt;JSON&lt;/span&gt; blob and makes version control tricky. If you use &lt;code&gt;git diff&lt;/code&gt;, it can be hard to understand what you&amp;#8217;ve actually changed, and if you need to resolve a merge conflict? Fasten your&amp;nbsp;seatbelt.&lt;/p&gt;
&lt;p&gt;NBDiff takes a stab at making these tasks easier. It presents diffs in a two-pane format and shows you deleted/added cells how you originally saw them in the notebook: if an image was changed, you see the image instead of a 10000-line diff of a base64 encoded &lt;span class="caps"&gt;PNG&lt;/span&gt; file. When resolving merge conflicts, you don&amp;#8217;t have to worry about mangling the &lt;span class="caps"&gt;JSON&lt;/span&gt; by hand &amp;#8212; you just drag and drop changes into the final version and click&amp;nbsp;&amp;#8216;save&amp;#8217;.&lt;/p&gt;
&lt;p&gt;&lt;img alt="A screenshot of nbdiff" src="/nbdiff-screenshots/main-screenshot.png" /&gt;&lt;/p&gt;
&lt;p&gt;As far as school projects go, this one was very satisfying. We have 50 GitHub stars and several hundred downloads already; I can actually use it to solve problems &lt;em&gt;right now&lt;/em&gt;; and the IPython folks are interested in seeing it maintained beyond Capstone. Considering many school projects &amp;#8212; even Capstone projects &amp;#8212; never see the light of day, let alone continued maintenance, I&amp;#8217;m really happy about&amp;nbsp;this.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Homepage: &lt;a href="http://nbdiff.org"&gt;nbdiff.org&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;GitHub repo: &lt;a href="https://github.com/tarmstrong/nbdiff"&gt;tarmstrong/nbdiff&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;PyPI package: &lt;a href="https://pypi.python.org/pypi/nbdiff"&gt;nbdiff&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="50 github stars and counting" src="/nbdiff-screenshots/stars.png" /&gt;&lt;/p&gt;</summary><category term="school"></category><category term="coding"></category></entry><entry><title>CUSEC 2014</title><link href="http://tavisharmstrong.com/2014/01/22/cusec-2014/" rel="alternate"></link><updated>2014-01-22T13:16:00-05:00</updated><author><name>Tavish Armstrong</name></author><id>tag:tavisharmstrong.com,2014-01-22:2014/01/22/cusec-2014/</id><summary type="html">&lt;p&gt;The 2014 edition of &lt;a href="http://2014.cusec.net"&gt;the Canadian University Software Engineering Conference&lt;/a&gt; was this past weekend and I thought I&amp;#8217;d write a short post about&amp;nbsp;it.&lt;/p&gt;
&lt;p&gt;Since I wasn&amp;#8217;t on the organizing board this year, I got to enjoy the conference in a much more relaxing fashion.
It was also my fifth &lt;span class="caps"&gt;CUSEC&lt;/span&gt;, so I&amp;#8217;ve figured out how this conference works and how to talk to people.
Having a lot of friends in the companies at the career fair helps; being friends with &lt;a href="http://jvns.ca"&gt;one&lt;/a&gt; of the speakers helps too.
But more importantly, I&amp;#8217;m just way older and more confident than my 19-year-old self.
I feel comfortable around nerds, and I&amp;#8217;m not totally lost in a technical conversation.
I&amp;#8217;ve grown just as much as &lt;span class="caps"&gt;CUSEC&lt;/span&gt; has&amp;nbsp;grown.&lt;/p&gt;
&lt;h2&gt;Talks!&lt;/h2&gt;
&lt;p&gt;I&amp;#8217;ll talk about a few of the talks that really stood out to&amp;nbsp;me.&lt;/p&gt;
&lt;p&gt;Famous blogger &lt;a href="http://jvns.ca"&gt;Julia Evans&lt;/a&gt; &lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1" rel="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt; gave a fun talk on hacking
on the kernel. Operating system kernels are a really neat part of computers
that I don&amp;#8217;t know much about, and Julia makes it seem easy and not scary at
all. She had a neat trick of hiding all the parts of a C program that aren&amp;#8217;t
relevant to understanding it on a high level. It&amp;#8217;s quite rare for someone to
take a very technically intimidating subject and make it seem within your&amp;nbsp;grasp.&lt;/p&gt;
&lt;p&gt;Josh Matthews gave a &lt;a href="http://www.joshmatthews.net/cusec14/"&gt;talk&lt;/a&gt; on developing
for Firefox: the kinds of projects Mozilla has that you can work on, how to
find a bug to work on, and what the patch process is like. I spent the last
summer looking at how open source projects do code review, so a lot of this
was obvious to me, but this is exactly the kind of talk that would have
completely blown my mind a couple years&amp;nbsp;ago.&lt;/p&gt;
&lt;p&gt;He went a few steps further and bravely walked the audience through a complete
Firefox patch, explaining the important parts of the code, and giving a brief
overview of the architecture along the way. Similarly to Julia&amp;#8217;s talk, it was a
very non-threatening introduction to an extremely intimidating&amp;nbsp;topic.&lt;/p&gt;
&lt;p&gt;Nadim Kobeissi spoke about &lt;a href="http://crypto.cat"&gt;CryptoCat&lt;/a&gt;, a controvertial
encrypted chat service that&amp;#8217;s been under a lot of fire since it started for
horrible &lt;a href="http://tobtu.com/decryptocat.php"&gt;bugs&lt;/a&gt; and being developed by a 23
year old (ad-hominem attacks abound). I admit I have a soft spot for Nadim
because he is a recent Concordia graduate &lt;sup id="fnref:2"&gt;&lt;a class="footnote-ref" href="#fn:2" rel="footnote"&gt;2&lt;/a&gt;&lt;/sup&gt;, but also because I think he&amp;#8217;s
solving a tough problem that needs solving if encryption is ever to become
popular &amp;mdash;&amp;nbsp;usability.&lt;/p&gt;
&lt;p&gt;Nadim&amp;#8217;s talk wasn&amp;#8217;t technical in nature &amp;mdash; it was more about the political
side of things. He shared insightful observations on the nature of the struggle
between hackers and the surveillance state. In essence, he argued that they
both feed off making the other look like an adversary to be defeated, but the
real solution lies in common understanding. That&amp;#8217;s no easy feat when your
adversaries are organizations like &lt;span class="caps"&gt;CSEC&lt;/span&gt; and the &lt;span class="caps"&gt;NSA&lt;/span&gt; who have had no serious&amp;nbsp;oversight.&lt;/p&gt;
&lt;p&gt;I was honestly surprised to find Nadim very approachable, humble, and easy to
talk to. He gave me some good advice on learning more about computer security
and finding&amp;nbsp;mentors.&lt;/p&gt;
&lt;p&gt;I don&amp;#8217;t want to spoil &lt;a href="https://www.destroyallsoftware.com/screencasts"&gt;Gary
Bernhardt&lt;/a&gt;&amp;#8216;s talk &amp;mdash;
you&amp;#8217;ll have to watch it when it comes out &amp;mdash; but it was stylistically very
interesting to me. I love science fiction and informative, thought-provoking
technical talks. The marriage of both is something else entirely, and I liked&amp;nbsp;it.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://nerd.kelseyinnis.com/"&gt;Kelsey Gilmore-Innis&lt;/a&gt; gave a fun, bombastic
introduction to functional programming.  &lt;a href="https://twitter.com/avibryant"&gt;Avi
Bryant&lt;/a&gt; spoke about detecting fraud, but I
missed the first half of his talk because I was talking to someone in the
hallway and didn&amp;#8217;t realize it had started. Oops. I had a nice chat with him
later, though, which sort of made up for&amp;nbsp;it.&lt;/p&gt;
&lt;h2&gt;Question&amp;nbsp;time&lt;/h2&gt;
&lt;p&gt;This year I gave myself a challenge: to ask a question after every talk I saw.
With two exceptions, I managed to do this, and it went pretty well. I got a
little better at handling my nerves throughout the weekend and managed not to
say anything too stupid. Julia&amp;#8217;s encouragement &amp;mdash; something along the
lines of &amp;#8220;everyone thinks you&amp;#8217;re dumb anyways&amp;#8221; &amp;mdash; was very&amp;nbsp;helpful.&lt;/p&gt;
&lt;p&gt;I &lt;em&gt;think&lt;/em&gt; I have good taste in questions. I might write a blog post on what I
think makes a good post-talk question at some&amp;nbsp;point.&lt;/p&gt;
&lt;h2&gt;Conference&amp;nbsp;pro-tips&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Volunteering is a good way to make&amp;nbsp;friends.&lt;/li&gt;
&lt;li&gt;Talk to younger students and say nice encouraging things to them. Don&amp;#8217;t act like a smartypants, even if you are. Lower the ladder instead of pulling it up behind&amp;nbsp;you.&lt;/li&gt;
&lt;li&gt;Have a &lt;a href="http://aosabook.org"&gt;physical object&lt;/a&gt; that you built that you can
  show off to company recruiters. Hack together a bunch of LEDs and a
  microcontroller and sew it into your backpack.&amp;nbsp;Whatever.&lt;/li&gt;
&lt;li&gt;Don&amp;#8217;t complain about talks you didn&amp;#8217;t like, unless the presenter said
  something harmful. Life is too short for inadvertently making people feel bad
  about things they like, and it makes you look like a jerk. &lt;sup id="fnref:3"&gt;&lt;a class="footnote-ref" href="#fn:3" rel="footnote"&gt;3&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
&lt;li&gt;Get as much sleep as you can without being a hermit. &lt;sup id="fnref:4"&gt;&lt;a class="footnote-ref" href="#fn:4" rel="footnote"&gt;4&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;span class="caps"&gt;TL&lt;/span&gt;;&lt;span class="caps"&gt;DR&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span class="caps"&gt;CUSEC&lt;/span&gt; was fun and I recommend&amp;nbsp;going.&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;She really likes it when you call her internet-famous.&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" rev="footnote" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:2"&gt;
&lt;p&gt;I&amp;#8217;m pretty sure we were at least registered for a class together at one point, though he was in a much different degree program.&amp;#160;&lt;a class="footnote-backref" href="#fnref:2" rev="footnote" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:3"&gt;
&lt;p&gt;Ahem.&amp;#160;&lt;a class="footnote-backref" href="#fnref:3" rev="footnote" title="Jump back to footnote 3 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:4"&gt;
&lt;p&gt;This is probably the most controversial part of this post.&amp;#160;&lt;a class="footnote-backref" href="#fnref:4" rev="footnote" title="Jump back to footnote 4 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</summary><category term="code"></category><category term="conferences"></category><category term="tech"></category><category term="engineering"></category><category term="school"></category></entry><entry><title>How long does it take to review a pull request on IPython?</title><link href="http://tavisharmstrong.com/2013/12/06/how-long-does-it-take-to-review-a-pull-request-on-ipython/" rel="alternate"></link><updated>2013-12-06T00:32:00-05:00</updated><author><name>Tavish Armstrong</name></author><id>tag:tavisharmstrong.com,2013-12-06:2013/12/06/how-long-does-it-take-to-review-a-pull-request-on-ipython/</id><summary type="html">&lt;p&gt;I wrote this a while ago, but I never linked to it from my blog. It&amp;#8217;s an
IPython Notebook that looks at how long it takes to review a pull request on
the &lt;a href="http://ipython.org"&gt;IPython&lt;/a&gt;&amp;nbsp;project.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://nbviewer.ipython.org/github/tarmstrong/code-analysis/blob/master/IPythonReviewTime.ipynb"&gt;How long does it take to review a pull request on&amp;nbsp;IPython?&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I had fun writing it, and I&amp;#8217;d like to see more of this from non-academics.
Hackers should be able to answer questions they have about a code base without
too much of a fuss. If I can find the time, I hope to make this a bit easier
with tools like &lt;a href="https://github.com/tarmstrong/git2json"&gt;git2json&lt;/a&gt; &amp;mdash; if
you&amp;#8217;d like to help, I&amp;#8217;d be&amp;nbsp;grateful.&lt;/p&gt;</summary><category term="code"></category><category term="msr"></category><category term="python"></category><category term="ipython"></category></entry><entry><title>The Git Harness</title><link href="http://tavisharmstrong.com/2013/11/24/the-git-harness/" rel="alternate"></link><updated>2013-11-24T16:30:00-05:00</updated><author><name>Tavish Armstrong</name></author><id>tag:tavisharmstrong.com,2013-11-24:2013/11/24/the-git-harness/</id><summary type="html">&lt;p&gt;Git&amp;#8217;s usefulness far surpasses the frustration caused by its clunky interface, so I don&amp;#8217;t like to bash it. It was the first version control system I learned, and I learned it before I could program much more than &lt;span class="caps"&gt;CS101&lt;/span&gt; assignments. Throughout the years, I&amp;#8217;ve used various languages and various version control systems, but Git is the only one I&amp;#8217;ve used seriously for any amount of time. So not only do I not like to bash it — I lack the perspective necessary for&amp;nbsp;critique.&lt;/p&gt;
&lt;p&gt;That said, most people can agree on one thing: the interface sucks. Git is a powerful tool, but it&amp;#8217;s almost impossible to learn how all the commands and their options work. The arguments have inconsistent orders, and the flags mean different things in different contexts. Some of the commands share duties with others. I&amp;#8217;ve learned to deal with it — it involves reading the man pages every time you want to use &lt;code&gt;git branch&lt;/code&gt; — but it is a&amp;nbsp;struggle.&lt;/p&gt;
&lt;p&gt;Complaining is fun, but it isn&amp;#8217;t going to get us anywhere —  how do we go about fixing this problem instead? Is the answer a slick &lt;span class="caps"&gt;GUI&lt;/span&gt; like the GitHub desktop client? For some people, sure. But too many GUIs solve the wrong problem: &lt;em&gt;affordance&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Affordance is the idea that you should be able to figure out how to use parts of an interface intuitively. Buttons should look like they can be pressed, editable text should look like it can be edited, etc. Command line tools generally solve this problem with man pages and usage messages — and that&amp;#8217;s a powerful&amp;nbsp;mechanism.&lt;/p&gt;
&lt;p&gt;However, it doesn&amp;#8217;t let you predict the outcome of your actions. Git forces you to have a solid mental model of how a Git history works. You have to understand what the various commands do to that mental model, and be able to simulate a proposed action in your head. Most of us developed this mental model through using Git and making a lot of&amp;nbsp;mistakes.&lt;/p&gt;
&lt;p&gt;Practice makes perfect, but there is no virtue in unnecessary struggle. We &lt;em&gt;could&lt;/em&gt; build a Git interface that helps novices develop their mental models faster, with less pain. We could do it without hiding the complexities of Git, too. And I think we&amp;nbsp;should.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This&lt;/em&gt; is the Git interface that I would actually want to&amp;nbsp;use:&lt;/p&gt;
&lt;h2&gt;The Napkin&amp;nbsp;Sketch&lt;/h2&gt;
&lt;p&gt;Most people who know how to use Git have a conceptual model of a Git log that looks something like&amp;nbsp;this:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="/git-diagrams/basic-vis.png" /&gt;&lt;/p&gt;
&lt;p&gt;First, you&amp;#8217;ve got the initial state of the repository &amp;#8212; the files that were there when you started. Then you have a set of commits (or &amp;#8220;changes&amp;#8221;) that transform those initial files into what they are today in the &lt;code&gt;HEAD&lt;/code&gt; version. The state of the working directory is indicated by the &lt;code&gt;HEAD&lt;/code&gt; ref. In the above diagram, our &lt;code&gt;HEAD&lt;/code&gt; is pointed at &lt;code&gt;master&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If you use Git, you probably understand this. You might visualize it differently — maybe your arrows go the other way, or maybe you like a vertical graph. In any case, this visualization helps you make decisions about what to do next, depending on your&amp;nbsp;goals.&lt;/p&gt;
&lt;p&gt;Let&amp;#8217;s say you have some unstaged changes in your working directory. You start typing &lt;code&gt;git commit -a&lt;/code&gt;&amp;#8230;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="/git-diagrams/adding-a-commit-start-typing.png" /&gt;&lt;/p&gt;
&lt;p&gt;&amp;#8230; and when the interface realizes what command you&amp;#8217;re typing in, it shows you a preview of what will happen if you hit enter. First, it creates a new&amp;nbsp;commit.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="/git-diagrams/adding-a-commit-pre-refmove.png" /&gt;&lt;/p&gt;
&lt;p&gt;And then it updates &lt;code&gt;master&lt;/code&gt; and &lt;code&gt;HEAD&lt;/code&gt; to point to&amp;nbsp;it.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="/git-diagrams/adding-a-commit.png" /&gt;&lt;/p&gt;
&lt;p&gt;But you haven&amp;#8217;t hit enter yet. This lets you understand the change you&amp;#8217;re about to make. If it&amp;#8217;s not what you wanted, you have a chance to avoid running that command and having to correct your mistake — which is especially difficult for&amp;nbsp;novices.&lt;/p&gt;
&lt;p&gt;Here&amp;#8217;s another situation. You have a &lt;code&gt;dev&lt;/code&gt; branch and you want to take a look at the files in&amp;nbsp;it.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="/git-diagrams/basic-branch-vis.png" /&gt;&lt;/p&gt;
&lt;p&gt;You try &lt;code&gt;git checkout dev&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="/git-diagrams/checking-out-a-branch-typing.png" /&gt;&lt;/p&gt;
&lt;p&gt;It fades the current &lt;code&gt;HEAD&lt;/code&gt; and shows you where your new &lt;code&gt;HEAD&lt;/code&gt; will be after hitting enter. If that&amp;#8217;s what you want, you can run that command and feel confident you&amp;#8217;re doing the right&amp;nbsp;thing.&lt;/p&gt;
&lt;p&gt;Let&amp;#8217;s say that you don&amp;#8217;t want to check it out, though. Instead, you want to merge &lt;code&gt;dev&lt;/code&gt; into &lt;code&gt;master&lt;/code&gt;. This is what the preview shows&amp;nbsp;you:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="/git-diagrams/git-merge.png" /&gt;&lt;/p&gt;
&lt;p&gt;Interpreting this is a challenge, and probably gives little solace to a bewildered novice. Once you get over the conceptual hurdles behind Git, though, you can start to experiment a bit, without fear of breaking your repository. It means you can try out a command and figure out for yourself whether it&amp;#8217;s going to do what you want without having to ask your friend the Git wizard if it&amp;#8217;s going to break&amp;nbsp;stuff.&lt;/p&gt;
&lt;p&gt;This idea reminds me of &lt;a href="http://www.jumpharness.com/skate%20harness%20system.jpg"&gt;figure skating harnesses&lt;/a&gt;. When you&amp;#8217;re learning to do a double salchow, your coach will often strap you into one of those. You are then free to throw yourself into the jump without fear of falling on your ass. You get to try things out without suffering the consequences, so that you can develop good habits before it&amp;nbsp;hurts.&lt;/p&gt;
&lt;p&gt;With Git, the idea is the same, but instead of falling on your ass,
you&amp;#8217;re avoiding an hour of sifting through your&amp;nbsp;reflogs.&lt;/p&gt;
&lt;p&gt;So: who wants to build the Git&amp;nbsp;harness?&lt;/p&gt;</summary><category term="coding"></category><category term="git"></category></entry><entry><title>Blog your mistakes, please</title><link href="http://tavisharmstrong.com/2013/11/13/blog-your-mistakes-please/" rel="alternate"></link><updated>2013-11-13T00:23:00-05:00</updated><author><name>Tavish Armstrong</name></author><id>tag:tavisharmstrong.com,2013-11-13:2013/11/13/blog-your-mistakes-please/</id><summary type="html">&lt;p&gt;Earlier this week I read a neat post by Sarah Mei called &lt;a href="http://www.sarahmei.com/blog/2013/11/11/why-you-should-never-use-mongodb/"&gt;Why You Should Never
Use MongoDB&lt;/a&gt;. Usually I would skip a blog post with that title, but
for some reason I stuck with it, and I&amp;#8217;m glad I&amp;nbsp;did.&lt;/p&gt;
&lt;p&gt;I usually don&amp;#8217;t like titles like &amp;#8220;why you should never use MongoDB&amp;#8221; because the
author usually means &amp;#8220;why you shouldn&amp;#8217;t use MongoDB if you are me and you are
using it in the specific way I am using it and you are in the specific business
that I work for.&amp;#8221; The author writes the snappy title because it looks good on
the Hacker News front&amp;nbsp;page.&lt;/p&gt;
&lt;p&gt;This isn&amp;#8217;t that kind of blog post, though, and she makes a compelling argument
that almost earns the&amp;nbsp;title.&lt;/p&gt;
&lt;p&gt;The title &lt;em&gt;should&lt;/em&gt; be &amp;#8220;Why &lt;em&gt;You&lt;/em&gt; Should Never Use MongoDB&amp;#8221;. I&amp;#8217;m being pedantic,
but I think the emphasis makes the point clearer. The post is making an
assumption about you, and that assumption is this: you are not as smart as she
is and if you are not as smart as she is, how can you hope to avoid the problem
she is describing? I am not as smart as she is, so I&amp;#8217;m going to learn from her&amp;nbsp;mistake.&lt;/p&gt;
&lt;p&gt;I&amp;#8217;m an inexperienced software developer; a n00b. I haven&amp;#8217;t watched a large
software system go from infancy to smouldering ruins, nor have I watched design
decisions explode in my face nine months after making them. And how could I
have? I&amp;#8217;m an undergraduate student and there aren&amp;#8217;t enough months of summer
jobs to string together to create those&amp;nbsp;experiences.&lt;/p&gt;
&lt;p&gt;Since I don&amp;#8217;t have many of these experiences of my own, I&amp;#8217;m forced to use the
experiences of others. Let&amp;#8217;s call these &lt;a href="http://aosabook.org/en/index.html"&gt;&lt;em&gt;prosthetic experiences&lt;/em&gt;&lt;/a&gt;.
Brave, humble, smart folks like Sarah Mei, who can talk about the projects
they&amp;#8217;ve seen crash and burn, are a boon; prosthetic experiences can help me
think about design tradeoffs in ways I wouldn&amp;#8217;t otherwise be able to without
dealing with those problems myself.  They help me develop paranoia in the right
places. Hopefully, it&amp;#8217;ll help me avoid boring mistakes and make more
interesting messes&amp;nbsp;instead.&lt;/p&gt;
&lt;p&gt;It&amp;#8217;s not fun to write about your mistakes. But I like it when you&amp;nbsp;do.&lt;/p&gt;</summary><category term="coding"></category><category term="writing"></category><category term="architecture"></category></entry><entry><title>The Performance of Open Source Applications is out!</title><link href="http://tavisharmstrong.com/2013/10/07/the-performance-of-open-source-applications-is-out/" rel="alternate"></link><updated>2013-10-07T08:00:00-04:00</updated><author><name>Tavish Armstrong</name></author><id>tag:tavisharmstrong.com,2013-10-07:2013/10/07/the-performance-of-open-source-applications-is-out/</id><summary type="html">&lt;p&gt;I&amp;#8217;m happy to announce that &lt;em&gt;The Performance of Open Source Applications&lt;/em&gt; is
finally out. You can head over to &lt;a href="http://aosabook.org"&gt;the &lt;span class="caps"&gt;AOSA&lt;/span&gt; website&lt;/a&gt; to
read it for free online and find links to places where you can purchase paper
or, soon, electronic&amp;nbsp;copies.&lt;/p&gt;
&lt;p&gt;If you do purchase it, the royalties go to Amnesty&amp;nbsp;International.&lt;/p&gt;
&lt;p&gt;&lt;img alt="The Performance of Open Source Applications Cover" src="/photos/posa-front.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;If you want to know more about what the book is about, the
&lt;a href="http://aosabook.org/en/posa/introduction.html"&gt;introduction&lt;/a&gt; is a good place
to start. The authors worked hard to share what they know and I learned a lot
from them; I hope you do&amp;nbsp;too.&lt;/p&gt;</summary><category term="The Performance of Open Source Applications"></category></entry><entry><title>“What I cannot create, I cannot understand”</title><link href="http://tavisharmstrong.com/2013/07/06/what-i-cannot-create-i-cannot-understand/" rel="alternate"></link><updated>2013-07-06T16:54:00-04:00</updated><author><name>Tavish Armstrong</name></author><id>tag:tavisharmstrong.com,2013-07-06:2013/07/06/what-i-cannot-create-i-cannot-understand/</id><summary type="html">&lt;p&gt;My friend Corey, author of the excellent &lt;a href="http://bayesianbiologist.com"&gt;Bayesian Biologist&lt;/a&gt; blog, recently &lt;a href="https://twitter.com/CjBayesian/status/350630554804305922"&gt;said&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;span class="dquo"&gt;&amp;#8220;&lt;/span&gt;What I cannot create, I cannot understand&amp;#8221; -Richard Feynman. This is why I always build a simulation of any problem I&amp;#8217;m working&amp;nbsp;on.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href="http://bayesianbiologist.com/2012/08/10/simulation-the-modellers-laboratory/"&gt;This post&lt;/a&gt; gives a good, elaborate example involving &amp;#8220;trip taking behaviour of recreational boaters in Ontario.&amp;#8221; I&amp;#8217;ve recently been dabbling in statistical analysis but I&amp;#8217;m not as much of a smartypants as Corey, so I&amp;#8217;ve been using the same technique to &lt;em&gt;learn&lt;/em&gt; basic statistical&amp;nbsp;analysis.&lt;/p&gt;
&lt;p&gt;Here&amp;#8217;s an example. When modeling time series (e.g., fish population and water temperature over time), it&amp;#8217;s useful to detect if one variable has a dependence on the other at a certain log. Does a spike in water temperature at a given time cause an increase in fish a week later? The &lt;a href="https://en.wikipedia.org/wiki/Cross-correlation"&gt;cross-correlation&lt;/a&gt; of water temperature and fish population would let us detect this&amp;nbsp;relationship.&lt;/p&gt;
&lt;p&gt;In R, there&amp;#8217;s a handy &lt;code&gt;ccf()&lt;/code&gt; function that will do this for me. But I&amp;#8217;m not totally sure how it works, or what it looks like when it works. I&amp;#8217;ll run it on some fake data to see what&amp;nbsp;happens.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;graphics&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# This is contrived, but let&amp;#39;s pretend that water temperature is&lt;/span&gt;
&lt;span class="c1"&gt;# around 300 kelvin, +/- 5 kelvins. The error is normally distributed.&lt;/span&gt;
watertemp &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="m"&gt;300&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; rnorm&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;500&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# This is even more contrived. Let&amp;#39;s pretend that the fish population is&lt;/span&gt;
&lt;span class="c1"&gt;# around 270 in our pond, and that you can predict the population ten&lt;/span&gt;
&lt;span class="c1"&gt;# periods from now by multiplying the current water temperature by 0.9.&lt;/span&gt;
fishpop &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="kt"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kp"&gt;rep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;270&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;10&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; watertemp&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;11&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="m"&gt;500&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="m"&gt;0.9&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
x &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="m"&gt;500&lt;/span&gt;
df &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="kt"&gt;data.frame&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;fishpop&lt;span class="p"&gt;,&lt;/span&gt; watertemp&lt;span class="p"&gt;)&lt;/span&gt;
df.ts &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; ts&lt;span class="p"&gt;(&lt;/span&gt;df&lt;span class="p"&gt;)&lt;/span&gt;
plot&lt;span class="p"&gt;(&lt;/span&gt;df.ts&lt;span class="p"&gt;,&lt;/span&gt; plot.type&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;single&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; col &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="kp"&gt;ncol&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;df.ts&lt;span class="p"&gt;))&lt;/span&gt;
legend&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;bottomleft&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kp"&gt;colnames&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;df.ts&lt;span class="p"&gt;),&lt;/span&gt; col&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="kp"&gt;ncol&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;df&lt;span class="p"&gt;),&lt;/span&gt; lty&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="" src="/what-i-cannot-create_files/what-i-cannot-create_fig_00.png" /&gt;&lt;/p&gt;
&lt;p&gt;This is silly. But this lets me make a hypothesis about what the result of the &lt;code&gt;ccf()&lt;/code&gt; function will be. I &lt;em&gt;think&lt;/em&gt; it&amp;#8217;ll show a correlation around 1 for a lag of 10. Let&amp;#8217;s try it&amp;nbsp;out.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ccf&lt;span class="p"&gt;(&lt;/span&gt;fishpop&lt;span class="p"&gt;,&lt;/span&gt; watertemp&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="" src="/what-i-cannot-create_files/what-i-cannot-create_fig_01.png" /&gt;&lt;/p&gt;
&lt;p&gt;That wasn&amp;#8217;t what I expected. This plot suggests that the two series are correlated &lt;em&gt;without&lt;/em&gt; a lag. After a moment, I realize that there&amp;#8217;s a bug in my code. The&amp;nbsp;line&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;fishpop &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="kt"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kp"&gt;rep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;270&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;10&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; watertemp&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;11&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="m"&gt;500&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="m"&gt;0.9&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;does not produce a shifted time series; it just creates one identical to &lt;code&gt;watertemp&lt;/code&gt; but with the first 10 values changed to 270. If I change this line to properly shift the series, I should see a correlation at &lt;code&gt;lag = -10&lt;/code&gt;.&amp;nbsp;Right?&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;fishpop &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="kt"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kp"&gt;rep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;270&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;10&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; watertemp&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="m"&gt;489&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="m"&gt;0.9&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
ccf&lt;span class="p"&gt;(&lt;/span&gt;fishpop&lt;span class="p"&gt;,&lt;/span&gt; watertemp&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="" src="/what-i-cannot-create_files/what-i-cannot-create_fig_02.png" /&gt;&lt;/p&gt;
&lt;p&gt;I was close. The correlation is at &lt;code&gt;lag = 10&lt;/code&gt;. The correct way to read the plot is &lt;em&gt;&lt;code&gt;watertemp&lt;/code&gt; predicts &lt;code&gt;fishpop&lt;/code&gt; ten periods later&lt;/em&gt;. Or, more simply, &lt;code&gt;fishpop&lt;/code&gt; leads watertemp by 10 periods. Either way, I now have a better mental model of how the &lt;code&gt;ccf()&lt;/code&gt; function works. If I applied it to real data, I&amp;#8217;d be better equipped to interpret the&amp;nbsp;results.&lt;/p&gt;
&lt;p&gt;Most programmers do this instinctually in other domains. I certainly do. But with data analysis, my instinct is to run analyses on real data first &amp;mdash; sometimes without really understanding what I&amp;#8217;m&amp;nbsp;doing.&lt;/p&gt;</summary><category term="Uncategorized"></category></entry><entry><title>Phergie refactoring idea</title><link href="http://tavisharmstrong.com/2012/11/29/phergie-refactoring-idea/" rel="alternate"></link><updated>2012-11-29T14:14:00-05:00</updated><author><name>Tavish Armstrong</name></author><id>tag:tavisharmstrong.com,2012-11-29:2012/11/29/phergie-refactoring-idea/</id><summary type="html">&lt;p&gt;I&amp;#8217;m taking a course this semester on software architecture — the high
level design principles that go into building high-quality, maintainable
software. The class is generally pretty decent, but the best part of it
is the project. Over the course of the semester, teams have to learn and
describe the architecture of an open source project; analyze how design
patterns and design principles are applied; critique parts of the
project that could benefit from refactoring; and then actually refactor
the code &amp;#8212; and if you&amp;#8217;re feeling brave &amp;#8212; submit the change back to the&amp;nbsp;project.&lt;/p&gt;
&lt;p&gt;My group is studying &lt;a href="http://phergie.org/"&gt;Phergie&lt;/a&gt;, an
&lt;a href="http://en.wikipedia.org/wiki/Internet_Relay_Chat"&gt;&lt;span class="caps"&gt;IRC&lt;/span&gt;&lt;/a&gt; bot that can
moderate and perform administrative tasks on &lt;span class="caps"&gt;IRC&lt;/span&gt; channels. It can also
do a few other fun things like pretend to &amp;#8220;serve beer&amp;#8221; to channel users,
look up documentation for &lt;span class="caps"&gt;PHP&lt;/span&gt; code,&amp;nbsp;etc.&lt;/p&gt;
&lt;p&gt;We&amp;#8217;re encouraged to get on project mailing lists and bug trackers and
introduce ourselves to the developers. I did so and &lt;a href="https://groups.google.com/forum/?fromgroups=#!topic/phergie/pb9IuHdAOhE/discussion"&gt;Matthew
Turland&lt;/a&gt;
was kind enough to give us suggestions on how to contribute back to the
project — and even give me feedback on my&amp;nbsp;homework!&lt;/p&gt;
&lt;p&gt;I&amp;#8217;ll post that homework here with some context. The goal is to find a
&lt;a href="http://en.wikipedia.org/wiki/Code_smell"&gt;&amp;#8220;code smell&amp;#8221;&lt;/a&gt; or some other
kind of architectural defect; describe it; and then suggest a fix (a
&amp;#8220;refactoring&amp;#8221;). We&amp;#8217;re given points for ambition and we don&amp;#8217;t actually
have to &lt;em&gt;implement&lt;/em&gt; the change — so we&amp;#8217;re not limited by our ability to
actually refactor the&amp;nbsp;code.&lt;/p&gt;
&lt;h3&gt;Refactoring a large class in&amp;nbsp;Phergie&lt;/h3&gt;
&lt;p&gt;&lt;img alt="Most often changed files. The blue line is the mean and the red line
is one standard deviation above the
mean." src="http://tavisharmstrong.com/static/phergie/commits.png" /&gt;&lt;/p&gt;
&lt;p&gt;Figure 1. Most often changed files. The blue line is the mean and the
red line is one standard deviation above the&amp;nbsp;mean.&lt;/p&gt;
&lt;p&gt;I began my search for code smells by ranking the files by the number of
commits in the git log that touched each file (see Figure 1.) &lt;strong&gt;(Edit:
This idea comes from Michael Feathers&amp;#8217;s talk
&lt;a href="http://www.youtube.com/watch?v=0eAhzJ_KM-Q"&gt;here&lt;/a&gt; and if you think this
sort of thing is cool, you should read his blog
&lt;a href="http://michaelfeathers.typepad.com/"&gt;here&lt;/a&gt;.)&lt;/strong&gt; The most committed-to
file is also one of the largest at 740 lines of code &amp;#8212;-
&lt;code&gt;Phergie/Driver/Streams.php&lt;/code&gt;, which contains the
&lt;code&gt;Phergie_Driver_Streams&lt;/code&gt; class. Ostensibly, this class is for handling
the &lt;span class="caps"&gt;TCP&lt;/span&gt; connection to the &lt;span class="caps"&gt;IRC&lt;/span&gt; server. I noticed two things&amp;nbsp;immediately:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;Phergie_Driver_Streams&lt;/code&gt; is the sole child class of
    &lt;code&gt;Phergie_Driver_Abstract&lt;/code&gt;. In my opinion, this is an
    over-generalization: there appears to be no reason (nor a plan) to
    have a non-streams-based&amp;nbsp;implementation.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Phergie_Driver_Streams&lt;/code&gt; is not only responsible for handling the
    connection to the server; it is also responsible for parsing and
    formatting &lt;span class="caps"&gt;IRC&lt;/span&gt; commands. The class is so large because it contains
    methods pertaining to both responsibilities, and methods that are
    (arguably) too large because they perform both duties as&amp;nbsp;well.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;For 1), the obvious solution is to flatten the hierarchy and use only
the &lt;code&gt;Streams&lt;/code&gt; class. For 2), my proposed solution is (see the provided
&lt;span class="caps"&gt;UML&lt;/span&gt;&amp;nbsp;diagrams):&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Move the parsing logic from &lt;code&gt;getEvent()&lt;/code&gt; to its own method called
    &lt;code&gt;parseEvent()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Move the &lt;code&gt;parseEvent()&lt;/code&gt; method to a new class called
    &lt;code&gt;Phergie_IRC_Command_Handler&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Move the formatting logic from &lt;code&gt;send()&lt;/code&gt; to its own method called
    &lt;code&gt;formatCommand()&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Move the &lt;code&gt;formatCommand()&lt;/code&gt; method and all methods starting with &lt;code&gt;do&lt;/code&gt;
    to &lt;code&gt;Phergie_IRC_Command_Handler&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;My best estimate is that this would split the class into two files with
lengths of approximately 400 lines of code. This is closer to the mean
(227 &lt;span class="caps"&gt;LOC&lt;/span&gt;) and in my opinion much more manageable and understandable &amp;#8212;-
each class has more clearly defined&amp;nbsp;responsibility.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Current architecture of the IRC/TCP subsystem in
Phergie" src="http://tavisharmstrong.com/static/phergie/refactor-1.png" /&gt;&lt;/p&gt;
&lt;p&gt;Figure 2. Current architecture of the &lt;span class="caps"&gt;IRC&lt;/span&gt;/&lt;span class="caps"&gt;TCP&lt;/span&gt; subsystem in&amp;nbsp;Phergie&lt;/p&gt;
&lt;p&gt;&lt;img alt="Proposed refactoring of the IRC/TCP subsystem in
Phergie" src="http://tavisharmstrong.com/static/phergie/refactor-2.png" /&gt;&lt;/p&gt;
&lt;p&gt;Figure 3. Proposed refactoring of the &lt;span class="caps"&gt;IRC&lt;/span&gt;/&lt;span class="caps"&gt;TCP&lt;/span&gt; subsystem in&amp;nbsp;Phergie&lt;/p&gt;
&lt;h3&gt;What did the lead Phergie developer think of&amp;nbsp;it?&lt;/h3&gt;
&lt;p&gt;I
&lt;a href="https://groups.google.com/forum/?fromgroups=#!topic/phergie/pb9IuHdAOhE"&gt;posted&lt;/a&gt;
an earlier draft of this to the mailing list and Matthew Turland, the
lead developer&amp;nbsp;responded:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I agree that Phergie_Driver_Streams handling parsing and generation
of &lt;span class="caps"&gt;IRC&lt;/span&gt; commands is part of why it&amp;#8217;s so large, which is why I&amp;#8217;m moving
those into separate classes (and even libraries) in Phergie 3. See
https://github.com/phergie/phergie-irc-parser and
https://github.com/phergie/phergie-irc-generator. (These also use a
Phergie\Irc subnamespace, in anticipation of one or more Jabber
drivers also being developed.) See also
https://github.com/phergie/phergie-irc-client-react, which is still
very much in development but is an example of a driver implementation
that still makes use of streams, but in a somewhat different way
(because it uses the React&amp;nbsp;library).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;So, that&amp;#8217;s cool: I accidentally anticipated a change that he had already
made for Phergie 3 (which I didn&amp;#8217;t realize existed). He decided to split
the new class into a parser and a generator — something I chose not to
do in my report for the sake of&amp;nbsp;simplicity.&lt;/p&gt;
&lt;p&gt;I&amp;#8217;m also really pleased at how welcoming Matt&amp;#8217;s been so far; he&amp;#8217;s
getting practically nothing in return except a bug fix or two (maybe)
and he&amp;#8217;s still more than willing to take the time to coddle newcomers
like us. What a nice&amp;nbsp;guy!&lt;/p&gt;
&lt;h3&gt;What a cool&amp;nbsp;project!&lt;/h3&gt;
&lt;p&gt;This is a really great idea for a project; although not everyone is
going to feel like sticking their neck out and embarrassing themselves
on the internet like I did, it&amp;#8217;s still a great opportunity to learn from
more experienced developers and think about theory in the context of
actual software. I certainly learned a lot and had a blast doing&amp;nbsp;it.&lt;/p&gt;
&lt;p&gt;Now if only the course also spent some time looking at &lt;a href="http://aosabook.org"&gt;more systems, as
described by their&amp;nbsp;developers&amp;#8230;&lt;/a&gt;&lt;/p&gt;</summary><category term="code"></category><category term="engineering"></category><category term="The Performance of Open Source Applications"></category></entry><entry><title>A Semi-Coherent Review of PyCon Canada 2012</title><link href="http://tavisharmstrong.com/2012/11/27/a-semi-coherent-review-of-pycon-canada-2012/" rel="alternate"></link><updated>2012-11-27T17:20:00-05:00</updated><author><name>Tavish Armstrong</name></author><id>tag:tavisharmstrong.com,2012-11-27:2012/11/27/a-semi-coherent-review-of-pycon-canada-2012/</id><summary type="html">&lt;p&gt;Two weeks ago I was foolish enough to take a few days to escape from
university life long enough to go to &lt;a href="http://pycon.ca"&gt;PyCon Canada&lt;/a&gt;, a
nice little conference in Toronto that can only be described with words
that end with exclamation marks: &lt;em&gt;fantastic!&lt;/em&gt;, &lt;em&gt;awesome!&lt;/em&gt;, etc. I’m no
veteran of tech conferences — this was, I think, the ninth I’ve ever
attended^&lt;a href="#fn1"&gt;1&lt;/a&gt;^ — so I have a narrow view of what conferences can
look&amp;nbsp;like.&lt;/p&gt;
&lt;p&gt;This was, however, the first non-student conference I’ve been to without
it being related to work. That was &lt;em&gt;nice&lt;/em&gt; — I could just relax and watch
the talks and hang out with fellow Python enthusiasts like my friend
(and former co-worker) &lt;a href="http://j-vk.com"&gt;Jon “&lt;span class="caps"&gt;VK&lt;/span&gt;” Villemaire-Krajden&lt;/a&gt;.
That also drew attention to something I noticed about the conference: it
was delightfully non-commercial, as far as conferences go. Sure, there
were sponsors, and the sponsors said things at the microphone, and there
was an area where you could schmooze with the sponsors — but on the
whole, it felt like a conference of enthusiasts and open source people,
not people trying to sell&amp;nbsp;things.&lt;/p&gt;
&lt;h3&gt;People who spoke&amp;nbsp;words&lt;/h3&gt;
&lt;p&gt;&lt;a href="http://pyvideo.org/video/1560/saturday-morning-keynote"&gt;Jessica
McKellar&lt;/a&gt;
started things off with a talk on fostering a welcoming open source
community. Near the beginning of her talk, she told a story about her
time as an instructor at Hacker School: they took a few whiteboards and
wrote questions on them like “What are your fears as a programmer?” She
showed a slide with a bunch of students’ answers and it &lt;em&gt;really&lt;/em&gt;
resonated with&amp;nbsp;me.&lt;/p&gt;
&lt;p&gt;Sometimes programming is hard because it is hard, and sometimes
programming is hard because of seemingly silly, trivial emotions.
Sometimes programming is hard because you’re afraid of breaking
something. Or because you’re afraid of looking stupid on the internet.
Or because you’re afraid of looking stupid &lt;em&gt;off&lt;/em&gt; the internet.
Recognizing these things and talking about these things is more
important than it sounds. To me, seeing this really smart open source
hacker on a stage talk about these things and admit that they, too, are
afraid of not being smart enough is so much more encouraging than just
knowing that I &lt;em&gt;can&lt;/em&gt; contribute to open&amp;nbsp;source.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=8gkrE6q9Tzw"&gt;Michael Feathers&lt;/a&gt; spoke
about functional programming. I’ve been drinking the &lt;span class="caps"&gt;FP&lt;/span&gt; Kool-Aid for a
while now, so it wasn’t a mind-blowing talk for me; but he had a way
with words and said what other people have been saying, but &lt;em&gt;better&lt;/em&gt;.
I’m not sure what his exact words are, but he said something along the
lines of “these functional things are cool because you need to learn
them only once,” that is, a lot of those functional programming tools
that people talk about are pre-packaged general, common algorithms.
Sure, you can get the job done in two nested for-loops, but maybe using
someone &lt;em&gt;else&lt;/em&gt;’s for-loops will work out&amp;nbsp;better?&lt;/p&gt;
&lt;p&gt;&lt;a href="http://pyvideo.org/video/1605/science-and-python-retrospective-of-a-mostly-s"&gt;Fernando
Perez&lt;/a&gt;
ended the conference on a high note with his talk on the IPython
Notebook, a browser-based tool for Python programming. The IPython
Notebook is a bit like a &lt;span class="caps"&gt;REPL&lt;/span&gt;, a bit like an &lt;span class="caps"&gt;IDE&lt;/span&gt;, but the main idea is
that it’s &lt;em&gt;in the browser&lt;/em&gt;. That means if you write code that generates
an image, it can show the image alongside your code. It means that if
you have code that outputs a protein, the result can be an interactive
3D model. This project is so cool that I’ve wasted spent more time than
I care to admit playing with it since the&amp;nbsp;conference.&lt;/p&gt;
&lt;h3&gt;Code&amp;nbsp;Sprints!&lt;/h3&gt;
&lt;p&gt;I wasn’t in town for long — and I wanted to spend some time with friends
— but I did manage to drop by the code sprints for a while. The sprints
were at the &lt;a href="http://ladieslearningcode.com/"&gt;Ladies Learning Code&lt;/a&gt; space
near Honest Ed’s, a lovely little building with a pretty decent cafe in
the&amp;nbsp;basement.&lt;/p&gt;
&lt;p&gt;Sleep deprivation might have done strange things to me, but I’m &lt;em&gt;pretty
sure&lt;/em&gt; these things&amp;nbsp;happened:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Pizza with beet slices instead of pepperoni&amp;nbsp;(awesome)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I had a really nice chat with Fernando Perez about IPython. And then
    he got me a cortado, which was incredibly sweet of&amp;nbsp;him.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;After I thanked Diana Clark for putting on the conference and
    generally being awesome, &lt;em&gt;she gave me a hug&lt;/em&gt;. I swear to Guido, she
    almost made me&amp;nbsp;cry.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Although I wasn’t around to see much, it does sound like a lot got done
at the sprint. I’ll be sure to stick around longer next&amp;nbsp;time.&lt;/p&gt;
&lt;h3&gt;Things that were not good about this&amp;nbsp;conference&lt;/h3&gt;
&lt;p&gt;I really don’t have anything bad to say about how the conference was
run. Really. Sure, the venue was cold the first day. The wireless was a
bit patchy here and there. But whatever. Did I mention my ticket cost&amp;nbsp;$25?&lt;/p&gt;
&lt;p&gt;Personally, I think all “code sprints” should be called “Happy Fun Best
Friends Coding Club But Also Testing and Documentation and Learning
Extravaganza,” but sports and athletics metaphors are, unfortunately,
thoroughly entrenched in the software world and I suppose I’m not going
to win this one. &lt;em&gt;Sigh&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Oh, and it may not surprise you to hear that I detected a substantial
dose of Python elitism. I like Python too, but can we all try not to
alienate &lt;span class="caps"&gt;PHP&lt;/span&gt; and Java developers? Couldn&amp;#8217;t hurt,&amp;nbsp;anyways.&lt;/p&gt;
&lt;h3&gt;Would I go again? Would I bring a&amp;nbsp;friend?&lt;/h3&gt;
&lt;p&gt;Yes and&amp;nbsp;yes.&lt;/p&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li&gt;Woah. When did that happen?&lt;a href="#fnref1"&gt;↩&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</summary><category term="code"></category><category term="tech"></category></entry><entry><title>Teensy/Arduino timer simulator</title><link href="http://tavisharmstrong.com/2012/10/03/teensyarduino-timer-simulator/" rel="alternate"></link><updated>2012-10-03T17:52:00-04:00</updated><author><name>Tavish Armstrong</name></author><id>tag:tavisharmstrong.com,2012-10-03:2012/10/03/teensyarduino-timer-simulator/</id><summary type="html">&lt;p&gt;I built a simulator for the 16-bit timer in the Teensy++/Arduino
microcontroller in the hopes that people (e.g. fellow students of &lt;span class="caps"&gt;SOEN&lt;/span&gt;
422) might find it useful. Keep in mind that it&amp;#8217;s a work in progress and
has some bugs. &lt;a href="http://tavisharmstrong.com/timer1/"&gt;A Simple and Interactive Explanation of the Teensy&amp;#8217;s
16-bit timer (Timer1)&lt;/a&gt;.&lt;/p&gt;</summary><category term="school"></category><category term="Uncategorized"></category></entry><entry><title>The Architecture of Open Source Applications, Volume 2</title><link href="http://tavisharmstrong.com/2012/05/08/the-architecture-of-open-source-applications-volume-2/" rel="alternate"></link><updated>2012-05-08T22:11:00-04:00</updated><author><name>Tavish Armstrong</name></author><id>tag:tavisharmstrong.com,2012-05-08:2012/05/08/the-architecture-of-open-source-applications-volume-2/</id><summary type="html">&lt;p&gt;The second volume of &lt;a href="http://aosabook.org/"&gt;The Architecture of Open Source
Applications&lt;/a&gt; was just released thanks to the hard
work of &lt;a href="http://www.amyrbrown.ca/index.html"&gt;Amy Brown&lt;/a&gt; and &lt;a href="http://third-bit.com/"&gt;Greg
Wilson&lt;/a&gt;. I had the privilege of helping copyedit
a few chapters of the book. Here&amp;#8217;s the&amp;nbsp;blurb:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Architects look at thousands of buildings during their training, and
study critiques of those buildings written by masters. In contrast,
most software developers only ever get to know a handful of large
programs well — usually programs they wrote themselves — and never
study the great programs of history. As a result, they repeat one
another’s mistakes rather than building on one another’s&amp;nbsp;successes.&lt;/p&gt;
&lt;p&gt;This second volume of The Architecture of Open Source Applications
aims to change that. In it, the authors of twenty-four open source
applications explain how their software is structured, and why. What
are each program&amp;#8217;s major components? How do they interact? And what
did their builders learn during their development? In answering these
questions, the contributors to this book provide unique insights into
how they&amp;nbsp;think.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Go buy it &lt;a href="http://www.lulu.com/shop/amy-brown-and-greg-wilson/the-architecture-of-open-source-applications-volume-ii/paperback/product-20111008.html"&gt;at
Lulu&lt;/a&gt;
(ebook versions will also be available). It&amp;#8217;ll be available on Amazon at
some point, but Lulu is preferred, because a greater percentage of the
price goes towards royalties — which are going to Amnesty&amp;nbsp;International.&lt;/p&gt;
&lt;p&gt;&lt;strike&gt;A free online version will be up at some point next week.&lt;/strike&gt; The online
version is available
&lt;a href="http://aosabook.org" title="The Architecture of Open Source Applications"&gt;here&lt;/a&gt;&lt;/p&gt;</summary><category term="books"></category><category term="code"></category><category term="engineering"></category><category term="hack"></category><category term="tech"></category><category term="writing"></category></entry><entry><title>Diversity in practice: How the Boston Python User Group grew to 1700 people and over 15% women</title><link href="http://tavisharmstrong.com/2012/03/18/diversity-in-practice-how-the-boston-python-user-group-grew-to-1700-people-and-over-15-women/" rel="alternate"></link><updated>2012-03-18T19:37:00-04:00</updated><author><name>Tavish Armstrong</name></author><id>tag:tavisharmstrong.com,2012-03-18:2012/03/18/diversity-in-practice-how-the-boston-python-user-group-grew-to-1700-people-and-over-15-women/</id><summary type="html">&lt;p&gt;The sheer humility, honesty, and deliberate action these two people took
to fight a problem they saw in the world is inspiring. They listened to
people, &lt;em&gt;really&lt;/em&gt; listened to people, and didn&amp;#8217;t shy away from the faults
in their approach. This is the most practical guide for how to get fresh
blood into programming that I&amp;#8217;ve seen&amp;nbsp;yet.&lt;/p&gt;
&lt;p&gt;I haven&amp;#8217;t been programming for that long. Three years ago, when I was in
my first year of school, I really wanted to learn how to program. At
that point, I had considered going to Montreal Python meetups, but I was
too shy and didn&amp;#8217;t think I&amp;#8217;d know what was going on, or that I wouldn&amp;#8217;t
fit in. So when people make an effort to reach shy outsiders, especially
people who are minorities in the development community who may feel even
more shy than I did for that reason, it makes me really&amp;nbsp;happy.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;[On advertising workshops:] Make the tone very clear. We&amp;#8217;re about
being inclusive and growing communities, and not about being
exclusive. So if you&amp;#8217;re just a little bit careful about your language
there, I think you&amp;#8217;ll find that everyone is thrilled to support you in
this. Men, women, everyone. — Jessica&amp;nbsp;McKellar&lt;/p&gt;
&lt;/blockquote&gt;</summary><category term="code"></category><category term="tech"></category></entry><entry><title>E-Prime</title><link href="http://tavisharmstrong.com/2012/02/03/e-prime/" rel="alternate"></link><updated>2012-02-03T00:53:00-05:00</updated><author><name>Tavish Armstrong</name></author><id>tag:tavisharmstrong.com,2012-02-03:2012/02/03/e-prime/</id><summary type="html">&lt;p&gt;From Wikipedia
(&lt;a href="https://secure.wikimedia.org/wikipedia/en/wiki/E-Prime"&gt;link&lt;/a&gt;):&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;E-Prime (short for English-Prime, sometimes denoted E′) is a version
of the English language that excludes all forms of the verb to be.
E-Prime does not allow conjugations of to be (am, are, is, was, were,
be, been, being), archaic forms (e.g. art, wast, wert), or
contractions (&amp;#8216;s, &amp;#8216;m,&amp;nbsp;&amp;#8216;re).&lt;/p&gt;
&lt;p&gt;Some scholars advocate using E-Prime as a device to clarify thinking
and strengthen writing. For example, the sentence &amp;#8220;the film was good&amp;#8221;
could translate into E-Prime as &amp;#8220;I liked the film&amp;#8221; or as &amp;#8220;the film
made me laugh&amp;#8221;. The E-Prime versions communicate the speaker&amp;#8217;s
experience rather than judgment, making it harder for the writer or
reader to confuse opinion with&amp;nbsp;fact.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This exercise helped me strengthen this sentence, I&amp;nbsp;think.&lt;/p&gt;</summary><category term="writing"></category></entry><entry><title>The Maeslant Kering: BOS development</title><link href="http://tavisharmstrong.com/2012/01/31/the-maeslant-kering-bos-development/" rel="alternate"></link><updated>2012-01-31T14:25:00-05:00</updated><author><name>Tavish Armstrong</name></author><id>tag:tavisharmstrong.com,2012-01-31:2012/01/31/the-maeslant-kering-bos-development/</id><summary type="html">&lt;p&gt;I came across &lt;a href="http://citeseer.ist.psu.edu/viewdoc/summary?doi=10.1.1.24.5280"&gt;this
paper&lt;/a&gt;
(found via Lambda the Ultimate) on the development of &lt;span class="caps"&gt;BOS&lt;/span&gt;, the control
system for The Maeslant Kering, which is &amp;#8220;the movable dam which has to
protect Rotterdam from floodings while, at (almost) the same time, not
restricting ship traffic to the port of Rotterdam&amp;#8221;. The development team
used formal methods (such as formal models and proofs) to ensure the
quality of the finished product. It&amp;#8217;s an interesting look at a much
different style of development than the one I&amp;#8217;m used to. Whereas most of
my experience is in projects where the requirements remained unknown for
the length of the project and where getting the right design was more
crucial than a controlled development cycle, in the case of &lt;span class="caps"&gt;BOS&lt;/span&gt; figuring
out the requirements (and testing their logical consistency) ahead of
time was worth the&amp;nbsp;cost.&lt;/p&gt;
&lt;p&gt;Software Engineering with Formal Methods: The Development of a Storm
Surge Barrier Control System - Seven Myths of Formal Methods Revisited
(2001), by Jan Tretmans, Klaas Wijbrans, Michel&amp;nbsp;Chaudron:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The control system, called &lt;span class="caps"&gt;BOS&lt;/span&gt;, completely autonomously decides about
closing and opening of the barrier and, when necessary, also performs
these tasks without human intervention. &lt;span class="caps"&gt;BOS&lt;/span&gt; is a safety-critical
software system of the highest Safety Integrity Level according to &lt;span class="caps"&gt;IEC&lt;/span&gt;
61508. One of the reliability increasing techniques used during its
development is formal methods. This paper reports experiences obtained
from using formal methods in the development of &lt;span class="caps"&gt;BOS&lt;/span&gt;. These experiences
are presented in the context of Hall’s famous “Seven Myths of Formal&amp;nbsp;Methods”.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;As far as I can tell, it would be quite difficult to measure the
effectiveness of the formal methods used in this case. The finished
product was remarkably bug-free &amp;#8212; no faults have been found in the
mission-critical subsystems since deployment. But it does seem like an
attractive development model to me. Writing buggy software sucks. It&amp;#8217;s
annoying, and it&amp;#8217;s costly. We can&amp;#8217;t write perfect software, even with
formal methods, but we should work towards writing better&amp;nbsp;software.&lt;/p&gt;
&lt;p&gt;Also, it&amp;#8217;s awesome to see such a badass application of control systems.
If my prof had opened the class with this as an example I would have
been much more&amp;nbsp;interested.&lt;/p&gt;</summary><category term="code"></category><category term="engineering"></category><category term="school"></category></entry><entry><title>Thoughts on the Quorum paper</title><link href="http://tavisharmstrong.com/2011/12/04/thoughts-on-the-quorum-paper/" rel="alternate"></link><updated>2011-12-04T15:00:00-05:00</updated><author><name>Tavish Armstrong</name></author><id>tag:tavisharmstrong.com,2011-12-04:2011/12/04/thoughts-on-the-quorum-paper/</id><summary type="html">&lt;p&gt;Recently on the &lt;a href="http://www.neverworkintheory.org/?p=197"&gt;&amp;#8220;It Will Never Work In Theory&amp;#8221;
blog&lt;/a&gt; Greg Wilson blogged about
a paper by Andreas Stefik, Susanna Siebert, Melissa Stefik, and Kim
Slattery on &amp;#8220;An Empirical Comparison of the Accuracy Rates of Novices
using the Quorum, Perl, and Randomo Programming Languages&amp;#8221;
(&lt;a href="http://www.cs.siue.edu/~astefik/papers/StefikPlateau2011.pdf"&gt;pdf&lt;/a&gt;).
The paper compares Perl, a popular programming language, to two others
created by the researchers. One of the created languages is Quorum, a
language they constructed specifically to be easy to use; and the other
is Randomo, a language they constructed randomly as a &amp;#8220;placebo&amp;#8221;
language. An empirical study showed that Quorum was significantly easier
to learn than Perl and Randomo. Perl did not perform significantly
better than Randomo, which should surprise anyone who read the paper.
Randomo looks like complete garbage to anyone who knows how to program.
I can make all kinds of jokes about Perl, but to me it looks much better
than Randomo. However, the study showed that a programmer&amp;#8217;s intuition on
which language is easier to learn is not necessarily&amp;nbsp;correct.&lt;/p&gt;
&lt;p&gt;Here&amp;#8217;s the sample of Perl from the&amp;nbsp;study:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$x = &amp;amp;z(1, 100, 3);
sub z{
  $a = $[0];
  $b = $[1];
  $c = $[2];
  $d = 0.0;
  $e = 0.0;
  for ($i = $a; $i &amp;lt;= $b; $i++){
    if ($i % $c == 0) {
      $d = $d + 1;
    }
    else {
      $e = $e + 1;
    }
  }
  if ($d &amp;gt; $e) {
    $d;
  }
  else {
    $e;
  }
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And here&amp;#8217;s the&amp;nbsp;Randomo:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;^ Main {
  ~ x \ z(1, 100, 3)
}
^ z(@ a % @ b % @ c) |  ~ {
  ~ d \ 0.0
    ~ e \ 0.0
    @ i \ a
# (b - a) {
  : i ; c ! 0 {
    d \ d + 1
  }
  , {
    e \ e + 1
  }
  i \ i + 1
}
: d ` e {
  d
}
, {
  e
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you are new to programming, and I asked you to pick one of the above
languages based on which one you thought would afford you more accuracy,
which one would you choose? I would choose the former, but the results
of the study couldn&amp;#8217;t determine with stastical significance that it
affords novices any more&amp;nbsp;accuracy.&lt;/p&gt;
&lt;p&gt;The resulting discussion on &lt;a href="http://news.ycombinator.com/item?id=3152147"&gt;Hacker
News&lt;/a&gt; was pretty sad. I
don&amp;#8217;t think I saw any outright name-calling, but there were a tonne of
emotionally charged responses that largely ignored the limited scope of
the study. The study was not saying that Perl is a bad language. It was
not saying that you are stupid if you use Perl. It is not even saying
that Perl is a bad language for teaching; other factors like &amp;#8216;how easy
is it to run language X on my computer?&amp;#8217; need to be considered before
making such a claim. The point is simple; now we know something more
about the learnability of programming languages. This isn&amp;#8217;t an anecdote,
and can&amp;#8217;t be dismissed by a pithy&amp;nbsp;counter-anecdote.&lt;/p&gt;
&lt;p&gt;We need more studies like this done, so we can start to talk about
programming languages as if they are tools, not&amp;nbsp;religions.&lt;/p&gt;</summary><category term="code"></category><category term="engineering"></category><category term="school"></category><category term="tech"></category><category term="Thoughts"></category></entry><entry><title>Mathematics in movies</title><link href="http://tavisharmstrong.com/2011/11/26/mathematics-in-movies/" rel="alternate"></link><updated>2011-11-26T12:01:00-05:00</updated><author><name>Tavish Armstrong</name></author><id>tag:tavisharmstrong.com,2011-11-26:2011/11/26/mathematics-in-movies/</id><summary type="html">&lt;p&gt;Harvard University professor Oliver Knill has a wonderful page
documenting all math in movies ever
&lt;a href="http://www.math.harvard.edu/~knill/mathmovies/index.html"&gt;here&lt;/a&gt;.&lt;/p&gt;</summary><category term="math"></category></entry><entry><title>Spam Filter in Haskell</title><link href="http://tavisharmstrong.com/2011/11/02/spam-filter-in-haskell/" rel="alternate"></link><updated>2011-11-02T07:00:00-04:00</updated><author><name>Tavish Armstrong</name></author><id>tag:tavisharmstrong.com,2011-11-02:2011/11/02/spam-filter-in-haskell/</id><summary type="html">&lt;p&gt;Check out this spam filter I wrote in Haskell while watching the
&lt;a href="http://ai-class.com"&gt;Stanford &lt;span class="caps"&gt;AI&lt;/span&gt; lectures&lt;/a&gt;! The same technique (Naive
Bayes Classification) is used in most effective spam filters, albeit
with more parameters. This version simply calculates the probability of
a word being either spam or ham (the technical term for non-spam), based
on how frequently it occurs in each corpus. At some point I&amp;#8217;ll probably
test it using comments that I receive on this blog and see how well it&amp;nbsp;works!&lt;/p&gt;
&lt;p&gt;Paul Graham has a very readable explanation of how this works
&lt;a href="http://www.paulgraham.com/spam.html"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;For those of you who think programming is hard, I&amp;#8217;m probably going to
convince you further by posting this snippet of incredibly confusing,
poorly written code. Sorry! Read &lt;a href="http://tavisharmstrong.com/2010/12/15/exams-are-almost-over/"&gt;this blog post
instead&lt;/a&gt;.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="k"&gt;qualified&lt;/span&gt; &lt;span class="nn"&gt;Data.Map&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;DM&lt;/span&gt;
&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;Text.Printf&lt;/span&gt;

&lt;span class="c1"&gt;-- Some sample text.&lt;/span&gt;
&lt;span class="nf"&gt;spam&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;i want to convey my passion for your generosity supporting folks that require assistance with the topic your very own&amp;quot;&lt;/span&gt;
&lt;span class="nf"&gt;ham&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;based on your artwork from elementary school i would guess you drew panels 1 and 4 and the camera on wayne coyne microphone you look like a pirate&amp;quot;&lt;/span&gt;

&lt;span class="nf"&gt;fullcorp&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;spam&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="s"&gt;&amp;quot; &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="n"&gt;ham&lt;/span&gt;

&lt;span class="c1"&gt;-- Return a Map representing the &amp;quot;Bag of Words&amp;quot; count of all the words in the&lt;/span&gt;
&lt;span class="c1"&gt;-- corpus.&lt;/span&gt;
&lt;span class="nf"&gt;wordFreq&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;DM&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Map&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt; &lt;span class="kt"&gt;Float&lt;/span&gt;
&lt;span class="nf"&gt;wordFreq&lt;/span&gt; &lt;span class="n"&gt;corpus&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;DM&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fromListWith&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;1.0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt; &lt;span class="ow"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;words&lt;/span&gt; &lt;span class="n"&gt;corpus&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;

&lt;span class="c1"&gt;-- Count the occurrences of a word in a string.&lt;/span&gt;
&lt;span class="nf"&gt;countWord&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Float&lt;/span&gt;
&lt;span class="nf"&gt;countWord&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fromIntegral&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;length&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;filter&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;words&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;

&lt;span class="c1"&gt;-- How many unique words are there in a string?&lt;/span&gt;
&lt;span class="nf"&gt;uniqueWords&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Float&lt;/span&gt;
&lt;span class="nf"&gt;uniqueWords&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fromIntegral&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="kt"&gt;DM&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;wordFreq&lt;/span&gt;

&lt;span class="c1"&gt;-- Parameter for Laplace smoothing.&lt;/span&gt;
&lt;span class="nf"&gt;smoother&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;Float&lt;/span&gt;
&lt;span class="nf"&gt;smoother&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;5.0&lt;/span&gt;

&lt;span class="c1"&gt;-- What is the likelihood that  is in a , given a superset&lt;/span&gt;
&lt;span class="c1"&gt;-- of that corpus called , which is all the possible words.&lt;/span&gt;
&lt;span class="nf"&gt;pword&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Float&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Float&lt;/span&gt;
&lt;span class="nf"&gt;pword&lt;/span&gt; &lt;span class="n"&gt;corpus&lt;/span&gt; &lt;span class="n"&gt;fullCorpus&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt; &lt;span class="n"&gt;word&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;top&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;bottom&lt;/span&gt;
  &lt;span class="kr"&gt;where&lt;/span&gt; &lt;span class="n"&gt;top&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;countWord&lt;/span&gt; &lt;span class="n"&gt;word&lt;/span&gt; &lt;span class="n"&gt;corpus&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;bottom&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fromIntegral&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;length&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;words&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;corpus&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;uniqueWords&lt;/span&gt; &lt;span class="n"&gt;fullCorpus&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;-- Use this for calculating the p(spam) and p(ham) likelihoods;&lt;/span&gt;
&lt;span class="c1"&gt;-- i.e. a measure of how likely something is to be spam without taking&lt;/span&gt;
&lt;span class="c1"&gt;-- into consideration the contents.&lt;/span&gt;
&lt;span class="nf"&gt;pthing&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;Float&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Float&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Float&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Float&lt;/span&gt;
&lt;span class="nf"&gt;pthing&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="n"&gt;total&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;total&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;-- 2 = number of classes (spam, ham)&lt;/span&gt;

&lt;span class="c1"&gt;-- What is the probability that a word is spam?&lt;/span&gt;
&lt;span class="nf"&gt;pspam&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;Float&lt;/span&gt;
&lt;span class="nf"&gt;pspam&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pthing&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fromIntegral&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;length&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;words&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;spam&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fromIntegral&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;length&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;words&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;fullcorp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;smoother&lt;/span&gt;

&lt;span class="c1"&gt;-- What is the probability that a word is ham?&lt;/span&gt;
&lt;span class="nf"&gt;pham&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;Float&lt;/span&gt;
&lt;span class="nf"&gt;pham&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pthing&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fromIntegral&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;length&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;words&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;ham&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fromIntegral&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;length&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;words&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;fullcorp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;smoother&lt;/span&gt;

&lt;span class="c1"&gt;-- What is the probability that a message is spam?&lt;/span&gt;
&lt;span class="nf"&gt;pmessagespam&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Float&lt;/span&gt;
&lt;span class="nf"&gt;pmessagespam&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;top&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;bottom&lt;/span&gt;
  &lt;span class="kr"&gt;where&lt;/span&gt; &lt;span class="n"&gt;top&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pspam&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;product&lt;/span&gt; &lt;span class="n"&gt;pspamwords&lt;/span&gt;
        &lt;span class="n"&gt;pspamwords&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;map&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pword&lt;/span&gt; &lt;span class="n"&gt;spam&lt;/span&gt; &lt;span class="n"&gt;fullcorp&lt;/span&gt; &lt;span class="n"&gt;smoother&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;words&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;
        &lt;span class="n"&gt;bottom&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;top&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;pham&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;product&lt;/span&gt; &lt;span class="n"&gt;phamwords&lt;/span&gt;
        &lt;span class="n"&gt;phamwords&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;map&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pword&lt;/span&gt; &lt;span class="n"&gt;ham&lt;/span&gt; &lt;span class="n"&gt;fullcorp&lt;/span&gt; &lt;span class="n"&gt;smoother&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;words&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;

&lt;span class="nf"&gt;main&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;do&lt;/span&gt;
  &lt;span class="c1"&gt;-- Print out some probabilities to test.&lt;/span&gt;
  &lt;span class="n"&gt;putStrLn&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;printf&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;p(spam) = %.9f&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;pspam&lt;/span&gt;
  &lt;span class="n"&gt;putStrLn&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;printf&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;p(ham) = %.9f&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;pham&lt;/span&gt;
  &lt;span class="n"&gt;putStrLn&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;printf&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;p(&lt;/span&gt;&lt;span class="se"&gt;\&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;my&lt;/span&gt;&lt;span class="se"&gt;\&amp;quot;&lt;/span&gt;&lt;span class="s"&gt; | spam) = %.9f&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;pword&lt;/span&gt; &lt;span class="n"&gt;spam&lt;/span&gt; &lt;span class="n"&gt;fullcorp&lt;/span&gt; &lt;span class="n"&gt;smoother&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;my&amp;quot;&lt;/span&gt;
  &lt;span class="n"&gt;putStrLn&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;printf&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;p(&lt;/span&gt;&lt;span class="se"&gt;\&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;my&lt;/span&gt;&lt;span class="se"&gt;\&amp;quot;&lt;/span&gt;&lt;span class="s"&gt; | ham) = %.9f&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;pword&lt;/span&gt; &lt;span class="n"&gt;ham&lt;/span&gt; &lt;span class="n"&gt;fullcorp&lt;/span&gt; &lt;span class="n"&gt;smoother&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;my&amp;quot;&lt;/span&gt;

  &lt;span class="n"&gt;putStrLn&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;printf&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;p(&lt;/span&gt;&lt;span class="se"&gt;\&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;you&lt;/span&gt;&lt;span class="se"&gt;\&amp;quot;&lt;/span&gt;&lt;span class="s"&gt; | spam) = %.9f&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;pword&lt;/span&gt; &lt;span class="n"&gt;spam&lt;/span&gt; &lt;span class="n"&gt;fullcorp&lt;/span&gt; &lt;span class="n"&gt;smoother&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;you&amp;quot;&lt;/span&gt;
  &lt;span class="n"&gt;putStrLn&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;printf&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;p(&lt;/span&gt;&lt;span class="se"&gt;\&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;you&lt;/span&gt;&lt;span class="se"&gt;\&amp;quot;&lt;/span&gt;&lt;span class="s"&gt; | ham) = %.9f&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;pword&lt;/span&gt; &lt;span class="n"&gt;ham&lt;/span&gt; &lt;span class="n"&gt;fullcorp&lt;/span&gt; &lt;span class="n"&gt;smoother&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;you&amp;quot;&lt;/span&gt;
  &lt;span class="n"&gt;putStrLn&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;printf&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;vocab %.2f&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;uniqueWords&lt;/span&gt; &lt;span class="n"&gt;fullcorp&lt;/span&gt;

  &lt;span class="c1"&gt;-- Test a message that is super spammy. Yeah, I get lots of spam that looks like this.&lt;/span&gt;
  &lt;span class="kr"&gt;let&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;your generosity many thanks i want to convey your artwork&amp;quot;&lt;/span&gt;

  &lt;span class="n"&gt;putStrLn&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;printf&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Message: &lt;/span&gt;&lt;span class="se"&gt;\&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;putStrLn&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;printf&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Spam probability: %.9f&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;pmessagespam&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;

  &lt;span class="c1"&gt;-- Test something that&amp;#39;s kind of nonsensical but is probably not spam.&lt;/span&gt;
  &lt;span class="kr"&gt;let&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;i would guess wayne coyne look like a pirate&amp;quot;&lt;/span&gt;
  &lt;span class="n"&gt;putStrLn&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;printf&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Message: &lt;/span&gt;&lt;span class="se"&gt;\&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;putStrLn&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;printf&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Spam probability: %.9f&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;pmessagespam&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;

&lt;span class="c1"&gt;-- $ runhaskell spamfilter.hs&lt;/span&gt;
&lt;span class="c1"&gt;-- p(spam) = 0.431034480&lt;/span&gt;
&lt;span class="c1"&gt;-- p(ham) = 0.568965500&lt;/span&gt;
&lt;span class="c1"&gt;-- p(&amp;quot;my&amp;quot; | spam) = 0.026666667&lt;/span&gt;
&lt;span class="c1"&gt;-- p(&amp;quot;my&amp;quot; | ham) = 0.021459227&lt;/span&gt;
&lt;span class="c1"&gt;-- p(&amp;quot;you&amp;quot; | spam) = 0.022222223&lt;/span&gt;
&lt;span class="c1"&gt;-- p(&amp;quot;you&amp;quot; | ham) = 0.030042918&lt;/span&gt;
&lt;span class="c1"&gt;-- vocab 41.00&lt;/span&gt;
&lt;span class="c1"&gt;-- Message: &amp;quot;your generosity many thanks i want to convey your artwork&amp;quot;&lt;/span&gt;
&lt;span class="c1"&gt;-- Spam probability: 0.716469300&lt;/span&gt;
&lt;span class="c1"&gt;-- Message: &amp;quot;i would guess wayne coyne look like a pirate&amp;quot;&lt;/span&gt;
&lt;span class="c1"&gt;-- Spam probability: 0.194385620&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary><category term="code"></category><category term="tech"></category></entry><entry><title>Check out my talk at D4D Boston 2011!</title><link href="http://tavisharmstrong.com/2011/08/03/check-out-my-talk-at-d4d-boston-2011/" rel="alternate"></link><updated>2011-08-03T03:14:00-04:00</updated><author><name>Tavish Armstrong</name></author><id>tag:tavisharmstrong.com,2011-08-03:2011/08/03/check-out-my-talk-at-d4d-boston-2011/</id><summary type="html">&lt;p&gt;In July I went to &lt;a href="http://boston2011.design4drupal.org/"&gt;&lt;span class="caps"&gt;D4D&lt;/span&gt; Boston
2011&lt;/a&gt;, a Drupal conference with a
focus on design. Even so, I was given the chance to do my talk on Drupal
7&amp;#8217;s Field &lt;span class="caps"&gt;API&lt;/span&gt;. To my surprise, I had an audience of around fifty to talk
to (or it at least felt like&amp;nbsp;fifty).&lt;/p&gt;
&lt;p&gt;The talk was based on blog post I wrote for Evolving Web about &lt;a href="http://evolvingweb.ca/story/poutine-maker-introduction-field-api-drupal-7-part-1"&gt;Poutine
Maker&lt;/a&gt;,
my custom Drupal field that lets users design crazy poutines. (You can
see the formatter in action
&lt;a href="http://poutinemaker.evolvingweb.ca/node/1"&gt;here&lt;/a&gt;.)&lt;/p&gt;
&lt;p&gt;&lt;object name="ttvplayer" id="ttvplayer" type="application/x-shockwave-flash" allowscriptaccess="always" allownetworking="all" allowfullscreen="true" height="165" width="240" data="http://www.kaltura.com/index.php/kwidget/wid/_203822/uiconf_id/1898102/entry_id/1_zf3z37dl/"&gt;&lt;param name="allowScriptAccess" value="always"&gt;&lt;param name="allowNetworking" value="all"&gt;&lt;param name="allowFullScreen" value="true"&gt;&lt;param name="bgcolor" value="#000000"&gt;&lt;param name="movie" value="http://www.kaltura.com/index.php/kwidget/wid/_203822/uiconf_id/1898102/entry_id/1_zf3z37dl/"&gt;&lt;param name="flashVars" value="autoPlay=false&amp;amp;streamerType=rtmp"&gt;&lt;a href="http://ttv.mit.edu"&gt;&lt;span class="caps"&gt;MIT&lt;/span&gt; Tech &lt;span class="caps"&gt;TV&lt;/span&gt;&lt;/a&gt;&lt;/object&gt;&lt;/p&gt;
&lt;p&gt;Overall, it was a fantastic experience. I&amp;#8217;m a little shy at conferences,
so it was nice to meet people after who had seen my talk (even the guy
who kept calling me&amp;nbsp;Tarvis).&lt;/p&gt;
&lt;p&gt;Also, I&amp;#8217;m totally going to &lt;a href="http://london2011.drupal.org/"&gt;DrupalCon
London&lt;/a&gt; at the end of the month, which
I&amp;#8217;m super jazzed about. Co-op jobs aren&amp;#8217;t supposed to be like this, but
I am &lt;em&gt;definitely not complaining&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;(By the way, if you want to work with me and the cool people I work
with, &lt;a href="http://evolvingweb.ca/web-developer"&gt;Evolving Web is hiring&lt;/a&gt;.)&lt;/p&gt;</summary><category term="code"></category><category term="engineering"></category><category term="school"></category><category term="tech"></category><category term="work"></category></entry><entry><title>Write Pretty Story, a writing program</title><link href="http://tavisharmstrong.com/2011/07/01/write-pretty-story-a-writing-program/" rel="alternate"></link><updated>2011-07-01T15:33:00-04:00</updated><author><name>Tavish Armstrong</name></author><id>tag:tavisharmstrong.com,2011-07-01:2011/07/01/write-pretty-story-a-writing-program/</id><summary type="html">&lt;p&gt;I just made a browser-based writing program that lets you write without
editing. Every time you hit return, it formats the paragraph you just
wrote. You can&amp;#8217;t go back and edit that paragraph. Editing is for people
who have completed&amp;nbsp;stories.&lt;/p&gt;
&lt;p&gt;Download it here:
&lt;a href="https://github.com/tarmstrong/write_pretty_story/zipball/master"&gt;.zip&lt;/a&gt;
or
&lt;a href="https://github.com/tarmstrong/write_pretty_story/tarball/master"&gt;.tar.gz&lt;/a&gt;
or &lt;a href="https://github.com/tarmstrong/write_pretty_story"&gt;github.com&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To run it, open the &amp;#8220;pretty.html&amp;#8221; file with your&amp;nbsp;browser.&lt;/p&gt;
&lt;p&gt;You can also try it
&lt;a href="http://tavisharmstrong.com/pretty/pretty.html"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Update:&lt;/strong&gt; Now it saves your story locally, so when you refresh the
page it&amp;#8217;s still&amp;nbsp;there.&lt;/p&gt;</summary><category term="code"></category><category term="writing"></category></entry><entry><title>April links</title><link href="http://tavisharmstrong.com/2011/04/14/april-links/" rel="alternate"></link><updated>2011-04-14T22:49:00-04:00</updated><author><name>Tavish Armstrong</name></author><id>tag:tavisharmstrong.com,2011-04-14:2011/04/14/april-links/</id><summary type="html">&lt;p&gt;&lt;a href="http://www.pnas.org/content/early/2011/03/29/1018033108"&gt;Hungry judges are
ruthless&lt;/a&gt;. This
study finds that judges will not grant parole right before breaks or
meals, or when they are tired. Assuming some pre-lunch cases deserved a
favourable ruling (i.e. the judges were indeed being too heavy-handed
with their pre-lunch cases), this suggests that you should &lt;a href="http://lesswrong.com/lw/58y/the_bias_you_didnt_expect/"&gt;avoid making
difficult decisions when you are
hungry&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Charlie Stross
&lt;a href="http://www.antipope.org/charlie/blog-static/2011/04/you-probably-already-saw-this-.html"&gt;predicts&lt;/a&gt;
that SpaceX could put a man on the moon by 2016 for \$1 Billion &lt;span class="caps"&gt;USD&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://fakescience.tumblr.com/"&gt;Fake Science&lt;/a&gt; is so amusing that I
think some dopamines leaked out of my ear. (Thanks&amp;nbsp;Helen!)&lt;/p&gt;
&lt;p&gt;&lt;a href="http://maycontaindragons.blogspot.com/2011/03/few-d-things-and-happy-birthday-to.html"&gt;Simon paints awesome
stuff&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://cultureisnotyourfriend.bandcamp.com/"&gt;Lachlan is saving Japan with his drone
friends&lt;/a&gt;. His bass is like
an earthquake that helps Japan instead of destroying&amp;nbsp;it.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://cjlo.com/news/concordia/your-concordia-and-action-disqualified-csu-elections"&gt;Concordia&amp;#8217;s undergraduate student union is
ridiculous&lt;/a&gt;.
After a decent party finally got voted in, the guy in charge of
elections, Oliver Cohen, decides both parties broke the rules, and thus
we need to have a another election. &lt;a href="http://oncampus.macleans.ca/education/2011/04/14/concordia-student-elecitons-chief-throws-out-vote-results/"&gt;The party that got voted in is not
allowed to run again for two&amp;nbsp;years.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Edit:&lt;/strong&gt; I forgot: if you&amp;#8217;re a software engineering student at
Concordia, you can now plan your class schedule with the
&lt;a href="http://wolfdragon.org"&gt;WolfDragonScheduler&lt;/a&gt;.&lt;/p&gt;</summary><category term="Uncategorized"></category></entry><entry><title>“The speed with which the wave of revolutions swept across Europe was due to the wonders of modern technology”</title><link href="http://tavisharmstrong.com/2011/02/22/the-speed-with-which-the-wave-of-revolutions-swept-across-europe-was-due-to-the-wonders-of-modern-technology/" rel="alternate"></link><updated>2011-02-22T23:30:00-05:00</updated><author><name>Tavish Armstrong</name></author><id>tag:tavisharmstrong.com,2011-02-22:2011/02/22/the-speed-with-which-the-wave-of-revolutions-swept-across-europe-was-due-to-the-wonders-of-modern-technology/</id><summary type="html">&lt;p&gt;From &lt;em&gt;1848: Year of Revolution&lt;/em&gt; by Mike&amp;nbsp;Rapport:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The speed with which the wave of revolutions swept across Europe was
due to the wonders of modern technology. In 1789 it took weeks for
news – carried, at its fastest, on horseback or under sail – for the
fall of the Bastille to be relayed across Central and Eastern Europe.
In 1848, thanks to steamships and a nascent telegraph system, reports
were being heard within days or even&amp;nbsp;minutes.&lt;/p&gt;
&lt;/blockquote&gt;</summary><category term="history"></category><category term="tech"></category></entry><entry><title>Practical Cryptography and the Birthday Attack</title><link href="http://tavisharmstrong.com/2011/02/06/practical-cryptography-and-the-birthday-attack/" rel="alternate"></link><updated>2011-02-06T14:31:00-05:00</updated><author><name>Tavish Armstrong</name></author><id>tag:tavisharmstrong.com,2011-02-06:2011/02/06/practical-cryptography-and-the-birthday-attack/</id><summary type="html">&lt;p&gt;The other day I took &lt;em&gt;Practical Cryptography&lt;/em&gt; out of the library. In
this slim book, Bruce Schneier and Niels Ferguson cover what you need to
know about cryptography so you don&amp;#8217;t shoot yourself in the foot. So far
I&amp;#8217;ve only read the part on basic cryptographic theory, where they
discuss basic functions (authentication, encryption, signing), and basic
attacks (chosen plaintext, meet-in-the-middle and&amp;nbsp;birthday).&lt;/p&gt;
&lt;p&gt;The second attack I mentioned &amp;#8212; the Birthday Attack &amp;#8212; is really neat,
because it&amp;#8217;s based on the equally neat Birthday Paradox, which I will
explain: Consider a room of 23 people. What is the likelihood that two
people in that room will have the same birthday? Turns out it&amp;#8217;s 50%.
There are 253 pairs you can make with 23 people [1], and the likelihood
that a single pair share the same birthday is 1/356. Multiply 253 by
1/356 and you get the probability of two people in a room of 23 people
having the same&amp;nbsp;birthday.&lt;/p&gt;
&lt;p&gt;How can we apply this to cryptography? Well, if there are 256 different
values a cryptographic key can take on [2], that means you only need to
try around 17 of them to find two that are the same. That means if
you&amp;#8217;re listening to two computers send cryptographically signed messages
to each other, and every time they send a message they use a different
key, you only need to wait for around 17 messages to be sent before you
find one that has been signed with a key that was used to sign an
earlier message. Basically, you can repeat old messages and the
receiving computer will think they are legitimate. If you saved a &amp;#8220;pay
$10 to user X&amp;#8221; message, you can make the receiving computer pay user X
$10. This is bad&amp;nbsp;news.&lt;/p&gt;
&lt;p&gt;This is why it&amp;#8217;s important to use long cryptographic keys &amp;#8212; they can
take on more values, and decrease the collision rate. Keys need to be
long enough to evade not only current attacks, but the attacks of 50
years from now. However, size doesn&amp;#8217;t matter as much as correct use of
cryptography. A long key that doesn&amp;#8217;t need to be attacked is about as
useless as a wall that blocks half of a castle from attack. And that is
what this book is about. I&amp;#8217;ll let you know how it is when I&amp;#8217;m&amp;nbsp;done.&lt;/p&gt;
&lt;p&gt;[1] Protip: google &amp;#8220;23 choose 2&amp;#8221; and it will calculate this for&amp;nbsp;you.&lt;/p&gt;
&lt;p&gt;[2] This means an 8-bit key. Don&amp;#8217;t use 8-bit&amp;nbsp;keys.&lt;/p&gt;</summary><category term="books"></category><category term="code"></category><category term="tech"></category></entry><entry><title>CUSEC 2011 thoughts</title><link href="http://tavisharmstrong.com/2011/01/17/cusec-2011-thoughts/" rel="alternate"></link><updated>2011-01-17T00:36:00-05:00</updated><author><name>Tavish Armstrong</name></author><id>tag:tavisharmstrong.com,2011-01-17:2011/01/17/cusec-2011-thoughts/</id><summary type="html">&lt;p&gt;&lt;span class="caps"&gt;CUSEC&lt;/span&gt; 2011 was my second time at the Canadian University Software
Engineering Conference. I felt less lost this time around, and it was a
good time. We saw some good talks, spoke to some cool people, and
skipped a lot of&amp;nbsp;class.&lt;/p&gt;
&lt;p&gt;Some highlights (my top&amp;nbsp;3):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.drewconway.com/Drew_Conway/About.html"&gt;Drew Conway&lt;/a&gt;
    spoke about terrorism and drug networks, and how to visualize them
    using R (a language that specializes in visualizing data). The
    biggest takeaway was that domain expertise + code = awesome cool&amp;nbsp;stuff.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://topologicalmedialab.net/xinwei/"&gt;Sha Xin Wei&lt;/a&gt; spoke about
    the Topological Media Lab at Concordia. It was refreshing to see a
    talk like that at a tech conference; it wouldn&amp;#8217;t have been out of
    place at an art conference, but it also wasn&amp;#8217;t out of place at
    &lt;span class="caps"&gt;CUSEC&lt;/span&gt;. I like using code to do art, so it was a pretty inspiring&amp;nbsp;talk.&lt;/li&gt;
&lt;li&gt;Mike Shaver spoke about managing the Mozilla team. This guy is the
    one of the smartest people I&amp;#8217;ve ever heard speak. He gave amazing
    answers to difficult questions, and answered even Linus
    Torvalds-grade flames with calm balance. You couldn&amp;#8217;t even get him
    to say incendiary stuff about Internet Explorer, which just blew my
    mind. &lt;br /&gt;
   Mike began his talk by speaking briefly about how he is bi-polar.
    People don&amp;#8217;t understand problems of mental health very well, he
    says, and we need to be able to talk about it more openly. I admire
    his courage and ability to speak about it in front of a crowd of
    possibly immature students. Here is &lt;a href="http://shaver.off.net/diary/"&gt;Mike Shaver&amp;#8217;s
    blog&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Great conference. I look forward to a new year of hackery. I made the
same resolution last year, but my new resolution is to get something
impressive ready to demo at &lt;span class="caps"&gt;CUSEC&lt;/span&gt; next&amp;nbsp;year.&lt;/p&gt;</summary><category term="engineering"></category><category term="school"></category><category term="tech"></category></entry><entry><title>Planets!</title><link href="http://tavisharmstrong.com/2010/12/14/planets/" rel="alternate"></link><updated>2010-12-14T01:02:00-05:00</updated><author><name>Tavish Armstrong</name></author><id>tag:tavisharmstrong.com,2010-12-14:2010/12/14/planets/</id><summary type="html">&lt;p&gt;Three things you should know about the planets in our solar&amp;nbsp;system:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Venus is the only planet whose north pole points in the direction of
    Earth&amp;#8217;s south pole. That means it rotates opposite to its revolution
    around the sun. It does so very slowly &amp;#8212; its day is 243 times as
    long as&amp;nbsp;ours.&lt;/li&gt;
&lt;li&gt;Uranus is tilted almost horizontally &amp;#8212; meaning that it is doing a
    barrel roll in the direction of its orbit. (Its north pole is still
    tilted slightly&amp;nbsp;&amp;#8220;upward&amp;#8221;.)&lt;/li&gt;
&lt;li&gt;A long time ago, Mercury was hit so hard that one side of it has a
    dent in it and the other side is a crumpled mess. The crumpled area
    is referred to as Weird Terrain because it looks&amp;nbsp;weird.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;And that&amp;#8217;s just the planets. Did you know that there&amp;#8217;s an asteroid
called Ida that &lt;em&gt;has a&amp;nbsp;moon?&lt;/em&gt;&lt;/p&gt;</summary><category term="Uncategorized"></category></entry><entry><title>Pause</title><link href="http://tavisharmstrong.com/2010/12/13/pause/" rel="alternate"></link><updated>2010-12-13T14:33:00-05:00</updated><author><name>Tavish Armstrong</name></author><id>tag:tavisharmstrong.com,2010-12-13:2010/12/13/pause/</id><summary type="html">&lt;blockquote&gt;
&lt;p&gt;&lt;span class="dquo"&gt;&amp;#8220;&lt;/span&gt;The true business of the literary artist is to plait or weave his
meaning, involving it around itself; so that each sentence, by
successive phrases, shall first come into a kind of knot, and then,
after a moment of suspended meaning, solve and clear&amp;nbsp;itself.&amp;#8221;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;George&amp;nbsp;Saintsbury&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;</summary><category term="writing"></category></entry><entry><title>Concordia ENCS hostnames</title><link href="http://tavisharmstrong.com/2010/12/03/concordia-encs-hostnames/" rel="alternate"></link><updated>2010-12-03T09:04:00-05:00</updated><author><name>Tavish Armstrong</name></author><id>tag:tavisharmstrong.com,2010-12-03:2010/12/03/concordia-encs-hostnames/</id><summary type="html">&lt;p&gt;I&amp;#8217;ve been doing a lot of my internetting in the lab at school, since my
laptop is in the shop. As I write this, I&amp;#8217;m sitting at
&lt;code&gt;chipewyan.cs.concordia.ca&lt;/code&gt;, and to my sides are &lt;code&gt;carrier&lt;/code&gt; and
&lt;code&gt;cowichan&lt;/code&gt;. My favourite so far is &lt;code&gt;absentee&lt;/code&gt;. I used it while skipping
class the other&amp;nbsp;day.&lt;/p&gt;
&lt;p&gt;My new dream job: anything that lets me name&amp;nbsp;computers.&lt;/p&gt;</summary><category term="tech"></category></entry><entry><title>George Orwell likes tea</title><link href="http://tavisharmstrong.com/2010/12/02/george-orwell-likes-tea/" rel="alternate"></link><updated>2010-12-02T18:51:00-05:00</updated><author><name>Tavish Armstrong</name></author><id>tag:tavisharmstrong.com,2010-12-02:2010/12/02/george-orwell-likes-tea/</id><summary type="html">&lt;p&gt;I enjoyed this essay by George Orwell on tea:
&lt;a href="http://www.booksatoz.com/witsend/tea/orwell.htm" title="George Orwell: A Nice Cup of Tea"&gt;link&lt;/a&gt;.
He attacks the subject with as much force as anything he&amp;#8217;s written. What
struck me, in particular, was how much he enjoyed writing it. It&amp;#8217;s
obvious, even in his reserved tone. This is something Zinsser talks
about often, and I&amp;#8217;m noticing it often in the writers I enjoy reading,
speakers I enjoy listening to, and teachers I enjoy learning&amp;nbsp;from.&lt;/p&gt;
&lt;p&gt;Orwell seems to think milk is a necessary ingredient in a nice cup of
tea. I disagree, for the same reason he disagrees with people who like
sugar in their tea. It tarnishes the drink, and I can&amp;#8217;t imagine feeling
&amp;#8220;wiser, braver, or more optimistic&amp;#8221; after drinking a milky&amp;nbsp;tea.&lt;/p&gt;</summary><category term="food"></category><category term="writing"></category></entry><entry><title>How I applied for a job at SeatGeek</title><link href="http://tavisharmstrong.com/2010/11/21/how-i-applied-for-a-job-at-seatgeek/" rel="alternate"></link><updated>2010-11-21T12:39:00-05:00</updated><author><name>Tavish Armstrong</name></author><id>tag:tavisharmstrong.com,2010-11-21:2010/11/21/how-i-applied-for-a-job-at-seatgeek/</id><summary type="html">&lt;p&gt;On Friday I was nerd-sniped by SeatGeek. They&amp;#8217;re looking for a new
programmer, and instead of going through Monster or other online job
sites, they made their own job application. To apply, you had to hack
into it. I couldn&amp;#8217;t resist the challenge, even though I&amp;#8217;m in school and
I don&amp;#8217;t need a&amp;nbsp;job.&lt;/p&gt;
&lt;p&gt;When you go to &lt;a href="http://apply.seatgeek.com/"&gt;http://apply.seatgeek.com/&lt;/a&gt;,
you see a message that&amp;nbsp;says:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This page must be viewed using the SeatGeek&amp;nbsp;browser.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img alt="User agent
challenge" src="http://tavisharmstrong.com/photos/seatgeek/useragent.png" /&gt;&lt;/p&gt;
&lt;p&gt;Websites don&amp;#8217;t actually test what browser you&amp;#8217;re using. Your browser
just tells the website what its name is (well, there are probably other
ways to test, but you get the point). When you go to a website in
Firefox, Firefox will happily say &amp;#8220;Hey Google, my name is Firefox 3.6 on
Linux!&amp;#8221; Your browser is under your control, so you can change this quite
easily (directions are for&amp;nbsp;Firefox):&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Open a new tab. Type about:config into the address bar, and hit&amp;nbsp;enter.&lt;/li&gt;
&lt;li&gt;Search for &lt;code&gt;useragent&lt;/code&gt;. You&amp;#8217;ll see a setting called
    &lt;code&gt;general.useragent.extra.firefox&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Change the value to&amp;nbsp;&amp;#8220;SeatGeek&amp;#8221;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Now, if you refresh the page, you&amp;#8217;ll see the full job application&amp;nbsp;form.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Full job
application" src="http://tavisharmstrong.com/photos/seatgeek/ignorethis.png" /&gt;&lt;/p&gt;
&lt;p&gt;But wait! There&amp;#8217;s a problem: &amp;#8220;only &amp;#8216;admin&amp;#8217; users may submit new&amp;nbsp;applicants.&amp;#8221;&lt;/p&gt;
&lt;p&gt;This took me about an hour to figure out. First, I viewed source (ctrl-u
on firefox) and saw the&amp;nbsp;following:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;lt;input name=&amp;quot;_csrf&amp;quot; value=&amp;quot;this is required (and this value is incorrect)&amp;quot; type=&amp;quot;hidden&amp;quot;&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;They were dropping me pretty big hints here. I tried changing the value
to &amp;#8216;admin&amp;#8217; in &lt;a href="http://getfirebug.com/"&gt;Firebug&lt;/a&gt;, but when I submitted my
application, all I got was a blank page (it was actually a 403 Forbidden
error&amp;nbsp;page).&lt;/p&gt;
&lt;p&gt;I tried to remember what &lt;span class="caps"&gt;CSRF&lt;/span&gt; stood for. Ah, right: Cross-Site Request
Forgery. Basically, this is how a lot of phishing works: they put a
login form for GMail on their website that looks a lot like the real
GMail login form, you type in your credentials, and they forward you on
to GMail &lt;em&gt;after they&amp;#8217;ve read your credentials&lt;/em&gt;. This is why looking at
the address bar and making sure you&amp;#8217;re on the site you think you&amp;#8217;re on
is&amp;nbsp;useful.&lt;/p&gt;
&lt;p&gt;So, with that in mind, I checked my cookies. This is what I&amp;nbsp;found:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sg.session=%7B%22admin%22%3A0%2C%22admin%22%3A0%2C%22csrf.token%22%3A%22UMZF2REa8eojqIgxaxI3z8267tcb1b%2F0NzfnNSu2qvQ%3D%22%7D;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If that doesn&amp;#8217;t make sense to you, you&amp;#8217;re not alone. But, if you look
closely, you&amp;#8217;ll notice that &amp;#8220;csrf&amp;#8221; and &amp;#8220;admin&amp;#8221; are in there. Aha! We&amp;#8217;re
getting&amp;nbsp;warmer.&lt;/p&gt;
&lt;p&gt;I opened the &lt;span class="caps"&gt;PHP&lt;/span&gt; prompt and URLDecoded the cookie string. (If you don&amp;#8217;t
know how to do that, go
&lt;a href="http://www.string-functions.com/urldecode.aspx"&gt;here&lt;/a&gt;.) This is what I&amp;nbsp;got:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sg.session={&amp;quot;admin&amp;quot;:0,&amp;quot;admin&amp;quot;:0,&amp;quot;csrf.token&amp;quot;:&amp;quot;UMZF2REa8eojqIgxaxI3z8267tcb1b/0NzfnNSu2qvQ=&amp;quot;};
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Awesome. When I&amp;#8217;m submitting this form, my browser is telling the
website &amp;#8220;hey, I&amp;#8217;m not an admin (0 is false), and my csrf token is [that
long string of text up there]&amp;#8221;. This is really bad security, since, as I
said before, you control your browser. So you can tell the website
whatever you want, if you know how to open up your browser. Naturally, I
can &lt;a href="https://addons.mozilla.org/af/firefox/addon/4510/"&gt;edit my cookie&lt;/a&gt;
to say &lt;code&gt;"admin":1&lt;/code&gt; instead. That csrf token is what I want to put into
the &lt;span class="caps"&gt;HTML&lt;/span&gt; input tag I was talking about earlier, like&amp;nbsp;this:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;lt;input name=&amp;quot;_csrf&amp;quot; value=&amp;quot;UMZF2REa8eojqIgxaxI3z8267tcb1b/0NzfnNSu2qvQ=&amp;quot; type=&amp;quot;hidden&amp;quot;&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The reason why websites do this (usually automatically &amp;#8212; they don&amp;#8217;t
want you to have to edit the &lt;span class="caps"&gt;HTML&lt;/span&gt; to log in!) is so that they know the
login form (or job app form) you&amp;#8217;re using was authorized by them. The
server knows about that long string of characters, and will make sure
that any job applications include one of these &amp;#8220;tokens&amp;#8221; they&amp;#8217;ve&amp;nbsp;issued.&lt;/p&gt;
&lt;p&gt;Now I could fill out the form and hit submit. And it&amp;nbsp;worked!&lt;/p&gt;
&lt;p&gt;&lt;img alt="Win!" src="http://tavisharmstrong.com/photos/seatgeek/seatgeek_win.png" /&gt;&lt;/p&gt;
&lt;p&gt;So, there you have it. This is a pretty contrived example of hacking
(they made it easy on purpose), but this is actually how a lot of it
happens. The server expects you to tell the truth, and doesn&amp;#8217;t have
safeguards in place to make sure you are&amp;nbsp;honest.&lt;/p&gt;
&lt;p&gt;Hopefully this has been an interesting look into the world of hacking.
Let me know if you don&amp;#8217;t understand something. I was trying to make this
somewhat comprehensible for a non-programmer, so if you don&amp;#8217;t get it,
let me&amp;nbsp;know.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Notes:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The image of the filled-out form doesn&amp;#8217;t match the image of me being
    successful, since the success image is from when I submitted using
    my real name and&amp;nbsp;resume.&lt;/li&gt;
&lt;li&gt;If you&amp;#8217;re following along, make sure you change your &lt;code&gt;useragent&lt;/code&gt;
    back to the default, or you&amp;#8217;ll get funny messages on certain&amp;nbsp;websites.&lt;/li&gt;
&lt;/ol&gt;</summary><category term="code"></category></entry><entry><title>Tavish’s super special pancake recipe</title><link href="http://tavisharmstrong.com/2010/11/20/tavishs-super-special-pancake-recipe/" rel="alternate"></link><updated>2010-11-20T11:25:00-05:00</updated><author><name>Tavish Armstrong</name></author><id>tag:tavisharmstrong.com,2010-11-20:2010/11/20/tavishs-super-special-pancake-recipe/</id><summary type="html">&lt;ul&gt;
&lt;li&gt;2 cups white&amp;nbsp;flour&lt;/li&gt;
&lt;li&gt;1 cup whole wheat&amp;nbsp;flour&lt;/li&gt;
&lt;li&gt;1 cup rye&amp;nbsp;flour&lt;/li&gt;
&lt;li&gt;3 tablespoons&amp;nbsp;sugar&lt;/li&gt;
&lt;li&gt;4 tablespoons&amp;nbsp;butter&lt;/li&gt;
&lt;li&gt;4 eggs,&amp;nbsp;beaten&lt;/li&gt;
&lt;li&gt;a bunch of milk (\~3&amp;nbsp;cups)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Directions:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Mix dry&amp;nbsp;ingredients.&lt;/li&gt;
&lt;li&gt;Beat&amp;nbsp;eggs.&lt;/li&gt;
&lt;li&gt;Melt&amp;nbsp;butter.&lt;/li&gt;
&lt;li&gt;Mix wet&amp;nbsp;ingredients.&lt;/li&gt;
&lt;li&gt;Mix all&amp;nbsp;ingredients.&lt;/li&gt;
&lt;li&gt;Fry on a buttered pan on low&amp;nbsp;heat.&lt;/li&gt;
&lt;li&gt;Eat.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Optionally put the mix in a squirt bottle so you can make pancakes in
the shape of an octopus or&amp;nbsp;whatever.&lt;/p&gt;
&lt;p&gt;You may not find this recipe sweet enough. You can get away with putting
twice as much sugar&amp;nbsp;in.&lt;/p&gt;</summary><category term="food"></category></entry><entry><title>Make delicious yogurt. Make cows happy.</title><link href="http://tavisharmstrong.com/2010/11/13/make-delicious-yogurt-make-cows-happy/" rel="alternate"></link><updated>2010-11-13T22:50:00-05:00</updated><author><name>Tavish Armstrong</name></author><id>tag:tavisharmstrong.com,2010-11-13:2010/11/13/make-delicious-yogurt-make-cows-happy/</id><summary type="html">&lt;p&gt;Making your own yogurt is like growing your own vegetables, but it
happens overnight. The yogurt you get out of it is delicate, cheap, and
way better than that gelatinous stuff you get in the&amp;nbsp;store.&lt;/p&gt;
&lt;p&gt;Step one: Heat your milk to 80 C. Heat it in a double boiler like this,
so it doesn&amp;#8217;t&amp;nbsp;burn:&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.flickr.com/photos/cheeseplusplus/5173831750/" title="Making yogurt: heat the milk by cheese++, on Flickr"&gt;&lt;img alt="Making yogurt: heat the
milk" src="http://farm5.static.flickr.com/4129/5173831750_2eef15ccff_m.jpg" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Step two: Cool the milk. Do this by putting your yogurt vessel into a
sink full of cold water. Do this so the milk is the right temperature
(40 C) for the yogurt&amp;nbsp;bacteria.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.flickr.com/photos/cheeseplusplus/5173226829/" title="Making yogurt: cooling the milk by cheese++, on Flickr"&gt;&lt;img alt="Making yogurt: cooling the
milk" src="http://farm5.static.flickr.com/4145/5173226829_2bca238fec_m.jpg" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Step three: Add your starter yogurt. You can just dump it in, or whisk
it in. I don&amp;#8217;t think it really&amp;nbsp;matters.&lt;/p&gt;
&lt;p&gt;Step four: leave on a heating pad overnight. Keep the innoculated milk
at around 35 C for 7-12&amp;nbsp;hours.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.flickr.com/photos/cheeseplusplus/5173831796/" title="Making yogurt: growing the yogurt by cheese++, on Flickr"&gt;&lt;img alt="Making yogurt: growing the
yogurt" src="http://farm5.static.flickr.com/4149/5173831796_08a00308cd_m.jpg" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;In the morning, stir the thickened yogurt into the greenish whey that
will be floating on top. Put your finished, but warm, yogurt into the
fridge and let it cool. It will be ready to eat after a few hours. After
a few days it will be noticeably&amp;nbsp;thicker.&lt;/p&gt;
&lt;p&gt;There, you&amp;#8217;ve done it. All-natural, tasty yogurt. You&amp;#8217;ve made cows
everywhere&amp;nbsp;proud.&lt;/p&gt;</summary><category term="cheese"></category><category term="food"></category></entry><entry><title>Home-made cheese</title><link href="http://tavisharmstrong.com/2010/10/26/home-made-cheese/" rel="alternate"></link><updated>2010-10-26T07:32:00-04:00</updated><author><name>Tavish Armstrong</name></author><id>tag:tavisharmstrong.com,2010-10-26:2010/10/26/home-made-cheese/</id><summary type="html">&lt;p&gt;I made this batch in the summer before school. On a scale from 1 to 10,
how jealous of me are&amp;nbsp;you?&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.flickr.com/photos/cheeseplusplus/5109392014/" title="Home-made cheese by cheese++, on Flickr"&gt;&lt;img alt="Home-made
cheese" src="http://farm5.static.flickr.com/4085/5109392014_d6377ca0d2_m.jpg" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="http://biology.clc.uc.edu/Fankhauser/Cheese/Cheese98.htm"&gt;David
Frankhauser&lt;/a&gt;
for his awesome&amp;nbsp;tutorials.&lt;/p&gt;</summary><category term="cheese"></category><category term="food"></category></entry><entry><title>About</title><link href="http://tavisharmstrong.com/2010/10/07/about/" rel="alternate"></link><updated>2010-10-07T00:36:00-04:00</updated><author><name>Tavish Armstrong</name></author><id>tag:tavisharmstrong.com,2010-10-07:2010/10/07/about/</id><summary type="html">&lt;h2&gt;The&amp;nbsp;basics&lt;/h2&gt;
&lt;p&gt;Hello! I&amp;#8217;m Tavish.
I come from &lt;a href="http://en.wikipedia.org/wiki/Aurora,_Ontario"&gt;Aurora, Ontario&lt;/a&gt;, a town near Toronto.
Between 2008 and 2014 I lived in Montreal where I studied software engineering at Concordia University.
Since June 2014 I&amp;#8217;ve lived in San Francisco where I work at &lt;a href="https://stripe.com"&gt;Stripe&lt;/a&gt;.
I&amp;#8217;ve also lived briefly in Montauban, France and enjoy speaking broken french to anyone who will&amp;nbsp;listen.&lt;/p&gt;
&lt;p&gt;Don&amp;#8217;t be shy! Send me an email: tavisharmstrong at gmail dot&amp;nbsp;com.&lt;/p&gt;</summary></entry></feed>
