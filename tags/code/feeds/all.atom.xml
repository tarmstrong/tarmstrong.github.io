<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tavish Armstrong</title>
    <link>http://tavisharmstrong.com/tags/code/feeds/all.atom/index.xml</link>
    <description>Recent content on Tavish Armstrong</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="http://tavisharmstrong.com/tags/code/feeds/all.atom/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Building for reliability: feature flags</title>
      <link>http://tavisharmstrong.com/2016/12/21/building-for-reliability-feature-flags</link>
      <pubDate>Wed, 21 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>http://tavisharmstrong.com/2016/12/21/building-for-reliability-feature-flags</guid>
      <description>&lt;p&gt;A while back I started writing about &lt;a href=&#34;https://github.com/tarmstrong/longcv/tree/master/bio.md&#34;&gt;everything I learned&lt;/a&gt; before I got my current job. My original intention was to make an exhaustive list of all the random things I learned, and then work through it to figure out which of those skills was essential to my job, which were merely useful for social signaling, and which were merely good for passing interviews. I still want to finish writing that, but I also want to write more about what I&amp;rsquo;ve learned since I left school. None of what I&amp;rsquo;ve learned is that novel or impressive; I just hope it&amp;rsquo;s useful to students or people who have had different work experience. I also want to write it down to test my own understanding.&lt;/p&gt;

&lt;p&gt;Today I&amp;rsquo;ll write about a technique for improving reliability that I learned on the job: feature flags.&lt;/p&gt;

&lt;p&gt;Before I start explain what these are, I&amp;rsquo;ll talk a bit about why you would even care about reliability, and in the sorts of situations you might want to use feature flags.&lt;/p&gt;

&lt;p&gt;First, context matters and reliability is not inherently virtuous. If you operate an API that delivers cat gifs to clients on request and all the users are hobby projects that can go down without upsetting anyone, you probably don&amp;rsquo;t need to care about reliability that much. If you push a bad commit and take down your site, people will not see cats for a few minutes while you try to fix it. That&amp;rsquo;s probably fine.&lt;/p&gt;

&lt;p&gt;There are plenty of situations where you might want to care about reliability. The boring examples involve money: if you go down you don&amp;rsquo;t make money or your customers don&amp;rsquo;t make money. This is a really easy reason to care about reliability because you can trade off software developer time against potential lost money. If you want the dollars lost to go down, you can pay more engineers to make your reliability better &lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:tradeoffs&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:tradeoffs&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;p&gt;There are more exciting reasons to care about reliability. You might want your software to be reliable if it is important for the medical treatment of people in your hospital. Let&amp;rsquo;s say, for example, that your electronic medical record system helps save X lives per year by being more efficient and less error-prone than the paper-based equivalent. That marginal improvement (X) probably goes away if the system is down for a 48-hours straight at some point in that month because your doctors will have to do more guesswork. This is more important than lost money because lives are on the line; the tradeoff is just harder to make.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s talk about a hypothetical example. Let&amp;rsquo;s say I have too many cats and would like to capitalize upon this surplus of fluff. I don&amp;rsquo;t know how to teach these cats how to do my bidding, so I have to capitalize on these cats in some other way. I know one thing: cats love to pose for photos. I have the perfect solution: I develop an API that serves cat gifs in response to payments. This API is adopted by struggling social media apps to keep their user engaged. In exchange for referrals, I give the social media companies a commission on every sale.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s say in the begging I started by writing my app in Ruby. I&amp;rsquo;m pretty comfortable with Ruby, after all, and it made getting set up pretty fast. This Ruby on Rails app talks to another server inside my VPN that operates a remote webcam pointed at these cats. It&amp;rsquo;s going great and the cats are thrilled. Here&amp;rsquo;s what that code looks like:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;def handle_successful_payment
  client = CatCamClient.new(host: &#39;https://cats.tavi.sh&#39;)
  cat_photo = client.get_cat!
  # return a 200 with the cat!
  [200, cat_photo]
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Unforunately, the masses want more cats from more angles. I make a new backend server that operates multiple cameras: a helmet cam for Alice the cat, a motion-sensing robot camera that follows Bob the cat around, etc. This new server is much more complicated but I&amp;rsquo;ve tested it pretty well.&lt;/p&gt;

&lt;p&gt;When I switch traffic over to the new backend server, I discover that the database on my cat server is not well indexed, which slows down my API to the point where most requests are timing out. The social networks are now mad at me because the cats were the only reason people were still using their apps, and the cats are mad at me because they want more attention.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;def handle_successful_payment
  client = CatCamClient.new(host: &#39;https://fancycats.tavi.sh&#39;)
  cat_photo = client.get_cat!
  # return a 200 with the cat!
  [200, cat_photo]
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In future I resolve to do better. The next time I make my change I write some code that looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;def handle_successful_payment
  url = if CatApp.flag_on?(&#39;fancy_cats&#39;)
    &#39;https://fancy-cats.tavi.sh&#39;
  else
    &#39;https://cats.tavi.sh&#39;
  end
  client = CatCamClient.new(host: url)
  cat_photo = client.get_cat!
  # return a 200 with the cat!
  [200, cat_photo]
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In this example, before I make my request to the backend server, I first check to see which backend server to use. To do so, the &lt;code&gt;CatApp.flag_on?&lt;/code&gt; helper checks the database to see if the confuration flag is on. If so, we use the &lt;code&gt;https://fancy-cats.tavi.sh&lt;/code&gt; url to fetch a cat.&lt;/p&gt;

&lt;p&gt;What does this get me? It means that I no longer need to deploy my code in order to change which backend server my web frontend server is talking to. I can just flip a switch in the database (maybe I&amp;rsquo;m fancy enough to have an administrative web app for employees where I can put it) and have the new backend run. Now when I run into problems with the backend server being slow, I can immediately fix it without having to write or deploy code. That makes the downtime shorter. Nice!&lt;/p&gt;

&lt;p&gt;I could even go one step further and have the flag be a &lt;em&gt;probability&lt;/em&gt; rather than a boolean. In that case, I could set the feature flag to only go hit the new backend 10% of the time. That way, if there&amp;rsquo;s a problem with the new backend, I&amp;rsquo;ve only broken cats for 10% of people. It&amp;rsquo;s definitely not nice to break things for 10% of people, but I&amp;rsquo;ve mitigated a pretty serious failure. In the event of downtime, I lose 90% less money, which makes it easier for me to afford more helmet cams for my cats.&lt;/p&gt;

&lt;p&gt;What are some other fun things you can do with feature flags?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You could profile both paths and figure out which one is faster. That way you can tell whether you are actually making something faster with your new database (instead of trusting the hype).

&lt;ul&gt;
&lt;li&gt;Github&amp;rsquo;s Scientist library has support for this!&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;You can display new features of your product to a smaller portion of your visitors to see whether or not it works well before rolling it out completely.&lt;/li&gt;
&lt;li&gt;You could use feature flags on desktop software (which would probably talk to a server you control) in order to slowly roll out risky changes while mitigating the risk of bricking a few billion dollars worth of computers.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here are more tips for using feature flags:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;In my example I suggested using a database field to determine whether a flag is on. Using a database can cause you a lot of pain if it shares a database with the rest of your app, because a problematic change to the main app could harm your ability to change the feature flag.&lt;/li&gt;
&lt;li&gt;Adding feature flags makes it harder to write tests, because you now have to test both code paths. Even though the feature flag decreases the risk of your new code path taking down your site, it doesn&amp;rsquo;t help much if the new code path does the same calculation incorrectly. (In the best case scenario, it raises an exception and quits; in the worst, it silently fails while your tests gleefully pass).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There you go: feature flags. They are so much fun!!!&lt;/p&gt;

&lt;p&gt;Is there anything I missed out on? Does anybody have great reference implementations that I can look at? Send me emails!&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:tradeoffs&#34;&gt;software engineering, like all engineering, is about making tradeoffs. One thing to keep in mind, though, is that no one really knows how to make these tradeoffs with any level of precision. You might think you can dump $X bazillions of dollars of engineering time into making your thing Y% more reliable and then end up with less reliable software because you replaced the database with a crappier database and didn&amp;rsquo;t realize it was going to be crappier until 6 months after you finished your project.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:tradeoffs&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>POSA in Czech: Výkonnost open source aplikací</title>
      <link>http://tavisharmstrong.com/2016/12/20/posa-in-czech-v%C3%BDkonnost-open-source-aplikac%C3%AD</link>
      <pubDate>Tue, 20 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>http://tavisharmstrong.com/2016/12/20/posa-in-czech-v%C3%BDkonnost-open-source-aplikac%C3%AD</guid>
      <description>&lt;p&gt;Ladislav Lhotka at cz.nic (which, from what I understand, is the administrator of the .cz TLD) have published a translation of The Performance of Open Source Applications: &amp;ldquo;Výkonnost Open Source Aplikací&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;On their site you can read an &lt;a href=&#34;https://www.nic.cz/page/3318/&#34;&gt;overview&lt;/a&gt; of the book, &lt;a href=&#34;https://knihy.nic.cz/&#34;&gt;download links&lt;/a&gt; for the book and many others, or go straight for the &lt;a href=&#34;https://knihy.nic.cz/files/edice/vykonnost_open_source_aplikaci.pdf&#34;&gt;pdf version&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I wish I could explain to you how cool it is that this book got translated by people I don&amp;rsquo;t know on the internet without any contact from them. Creative Commons has always seemed like a great way to license your works, especially community efforts like POSA, but I don&amp;rsquo;t often see it in action. Thank you Ladislav and friends!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Time.utc in ruby</title>
      <link>http://tavisharmstrong.com/2016/07/20/timeutc-in-ruby</link>
      <pubDate>Wed, 20 Jul 2016 20:09:00 +0000</pubDate>
      
      <guid>http://tavisharmstrong.com/2016/07/20/timeutc-in-ruby</guid>
      <description>&lt;p&gt;A coworker pointed out this strange behaviour in Ruby today:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;irb(main):003:0&amp;gt; Time.utc(2016, 2, 29)
=&amp;gt; 2016-02-29 00:00:00 UTC
irb(main):004:0&amp;gt; Time.utc(2015, 2, 29)
=&amp;gt; 2015-03-01 00:00:00 UTC
irb(main):005:0&amp;gt; Time.utc(2015, 1, 32)
ArgumentError: argument out of range
	from (irb):5:in `utc&#39;
	from (irb):5
	from /usr/bin/irb:11:in `&amp;lt;main&amp;gt;&#39;
irb(main):006:0&amp;gt; Time.utc(2015, 4, 31)
=&amp;gt; 2015-05-01 00:00:00 UTC
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Clearly the authors made the effort to stop you from passing in obviously bad values. But I still find it so odd that it rolls over values that are just a little incorrect without telling you.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Programming as argument</title>
      <link>http://tavisharmstrong.com/2015/05/09/programming-as-argument</link>
      <pubDate>Sat, 09 May 2015 14:26:00 +0000</pubDate>
      
      <guid>http://tavisharmstrong.com/2015/05/09/programming-as-argument</guid>
      <description>&lt;p&gt;Many people before me have argued that computer programs are secondarily about
making a machine perform a task and primarily about telling other humans what
you want the computer to do. Pseudocode takes this to the extreme &amp;ndash;
humans can discuss what a pseudocode program &lt;em&gt;would&lt;/em&gt; do and whether or not it
would be a good idea, without ever running the code on a computer.  The
pseudocode program is an argument &amp;ndash; it argues that a program could be
constructed to accomplish the task at hand. The problem with pseudocode
is &lt;em&gt;not&lt;/em&gt; that it doesn&amp;rsquo;t run on a computer. The problem with pseudocode is that it has no
way of convincing you that it would work if it &lt;em&gt;did&lt;/em&gt; run on a computer.&lt;/p&gt;

&lt;p&gt;The reason why a pseudocode program of any respectable size is not a convincing
argument is probably obvious to anyone who writes software for a living: it&amp;rsquo;s
easy to write code that looks plausible to other humans, but unless you run
the program, it&amp;rsquo;s hard to believe that it will actually work. Software that is easy to
run is more convincing because you can watch it work. You provide inputs, it
provides outputs. You can do this to prove or disprove hypotheses. In this case, though,
the code stops being an argument that a program &lt;em&gt;could&lt;/em&gt; be constructed to perform
a task (as is the case with pseudocode). Instead, it becomes an argument that
the compiled program will perform the task correctly. Testing the program manually
is one way of convincing yourself that it will do that. But it is only one way.&lt;/p&gt;

&lt;p&gt;An automated testing framework can be useful for making your code more convincing.
You can show that given &lt;em&gt;this&lt;/em&gt; input and &lt;em&gt;that&lt;/em&gt; input, the program will produce
the correct output. Other programmers can run the tests and feel more confident
that the program will behave that way.&lt;/p&gt;

&lt;p&gt;A few arguments are implicit in every test: these fake inputs are
representative of real inputs. This is an accurate simulation of global state.
These expected outputs are the &lt;em&gt;correct&lt;/em&gt; outputs.  When you use mocks or stubs
in your tests, you argue that the dependencies you are simulating
actually behave that way; a common mistake is over-mocking dependencies so much
that you have to just &lt;em&gt;trust&lt;/em&gt; that the code will work when connected to real dependencies.
For example, if your tests don&amp;rsquo;t open a socket
to a functioning server, can you really be sure that the code will do so correctly in
production?  If you can&amp;rsquo;t, you have to &lt;em&gt;trust&lt;/em&gt; that the networking code works. The
argument becomes &amp;ldquo;&lt;em&gt;if&lt;/em&gt; we assume the networking code exists, the following code
will write this message over the socket.&amp;rdquo; That &lt;em&gt;if&lt;/em&gt; might be a very big &lt;em&gt;if&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Code review makes this argumentation-model-of-programming more obvious. If you
write useless tests, a reviewer will often tell you that they are terrible
tests.  The point they are making is &lt;em&gt;not&lt;/em&gt; that your code doesn&amp;rsquo;t work.  The
point is that they have little reason to believe it will. They have not been
convinced by your argument.&lt;/p&gt;

&lt;p&gt;If code is an argument, what does that mean for working programmers?  Well, it
means that the rules of rhetoric apply when writing software. If you want your
code to be merged, or you want your project to be adopted, you need it to be
&lt;a href=&#34;http://en.wikipedia.org/wiki/Robert_Cialdini&#34;&gt;persuasive&lt;/a&gt;.  This raises an important question: is &lt;em&gt;persuasive&lt;/em&gt;
code the same thing as &lt;em&gt;good&lt;/em&gt; code?&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How long does it take to review a pull request on IPython?</title>
      <link>http://tavisharmstrong.com/2013/12/06/how-long-does-it-take-to-review-a-pull-request-on-ipython</link>
      <pubDate>Fri, 06 Dec 2013 00:32:00 +0000</pubDate>
      
      <guid>http://tavisharmstrong.com/2013/12/06/how-long-does-it-take-to-review-a-pull-request-on-ipython</guid>
      <description>&lt;p&gt;I wrote this a while ago, but I never linked to it from my blog. It&amp;rsquo;s an
IPython Notebook that looks at how long it takes to review a pull request on
the &lt;a href=&#34;http://ipython.org&#34;&gt;IPython&lt;/a&gt; project.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://nbviewer.ipython.org/github/tarmstrong/code-analysis/blob/master/IPythonReviewTime.ipynb&#34;&gt;How long does it take to review a pull request on IPython?&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I had fun writing it, and I&amp;rsquo;d like to see more of this from non-academics.
Hackers should be able to answer questions they have about a code base without
too much of a fuss. If I can find the time, I hope to make this a bit easier
with tools like &lt;a href=&#34;https://github.com/tarmstrong/git2json&#34;&gt;git2json&lt;/a&gt; &amp;mdash; if
you&amp;rsquo;d like to help, I&amp;rsquo;d be grateful.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The Architecture of Open Source Applications, Volume 2</title>
      <link>http://tavisharmstrong.com/2012/05/08/the-architecture-of-open-source-applications-volume-2</link>
      <pubDate>Tue, 08 May 2012 22:11:00 +0000</pubDate>
      
      <guid>http://tavisharmstrong.com/2012/05/08/the-architecture-of-open-source-applications-volume-2</guid>
      <description>&lt;p&gt;The second volume of &lt;a href=&#34;http://aosabook.org/&#34;&gt;The Architecture of Open Source
Applications&lt;/a&gt; was just released thanks to the hard
work of &lt;a href=&#34;http://www.amyrbrown.ca/index.html&#34;&gt;Amy Brown&lt;/a&gt; and &lt;a href=&#34;http://third-bit.com/&#34;&gt;Greg
Wilson&lt;/a&gt;. I had the privilege of helping copyedit
a few chapters of the book. Here&amp;rsquo;s the blurb:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Architects look at thousands of buildings during their training, and
study critiques of those buildings written by masters. In contrast,
most software developers only ever get to know a handful of large
programs well — usually programs they wrote themselves — and never
study the great programs of history. As a result, they repeat one
another’s mistakes rather than building on one another’s successes.&lt;/p&gt;

&lt;p&gt;This second volume of The Architecture of Open Source Applications
aims to change that. In it, the authors of twenty-four open source
applications explain how their software is structured, and why. What
are each program&amp;rsquo;s major components? How do they interact? And what
did their builders learn during their development? In answering these
questions, the contributors to this book provide unique insights into
how they think.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Go buy it &lt;a href=&#34;http://www.lulu.com/shop/amy-brown-and-greg-wilson/the-architecture-of-open-source-applications-volume-ii/paperback/product-20111008.html&#34;&gt;at
Lulu&lt;/a&gt;
(ebook versions will also be available). It&amp;rsquo;ll be available on Amazon at
some point, but Lulu is preferred, because a greater percentage of the
price goes towards royalties — which are going to Amnesty International.&lt;/p&gt;

&lt;p&gt;&lt;strike&gt;A free online version will be up at some point next week.&lt;/strike&gt; The online
version is available
&lt;a href=&#34;http://aosabook.org&#34; title=&#34;The Architecture of Open Source Applications&#34;&gt;here&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The Maeslant Kering: BOS development</title>
      <link>http://tavisharmstrong.com/2012/01/31/the-maeslant-kering-bos-development</link>
      <pubDate>Tue, 31 Jan 2012 14:25:00 +0000</pubDate>
      
      <guid>http://tavisharmstrong.com/2012/01/31/the-maeslant-kering-bos-development</guid>
      <description>&lt;p&gt;I came across &lt;a href=&#34;http://citeseer.ist.psu.edu/viewdoc/summary?doi=10.1.1.24.5280&#34;&gt;this
paper&lt;/a&gt;
(found via Lambda the Ultimate) on the development of BOS, the control
system for The Maeslant Kering, which is &amp;ldquo;the movable dam which has to
protect Rotterdam from floodings while, at (almost) the same time, not
restricting ship traffic to the port of Rotterdam&amp;rdquo;. The development team
used formal methods (such as formal models and proofs) to ensure the
quality of the finished product. It&amp;rsquo;s an interesting look at a much
different style of development than the one I&amp;rsquo;m used to. Whereas most of
my experience is in projects where the requirements remained unknown for
the length of the project and where getting the right design was more
crucial than a controlled development cycle, in the case of BOS figuring
out the requirements (and testing their logical consistency) ahead of
time was worth the cost.&lt;/p&gt;

&lt;p&gt;Software Engineering with Formal Methods: The Development of a Storm
Surge Barrier Control System - Seven Myths of Formal Methods Revisited
(2001), by Jan Tretmans, Klaas Wijbrans, Michel Chaudron:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The control system, called BOS, completely autonomously decides about
closing and opening of the barrier and, when necessary, also performs
these tasks without human intervention. BOS is a safety-critical
software system of the highest Safety Integrity Level according to IEC
61508. One of the reliability increasing techniques used during its
development is formal methods. This paper reports experiences obtained
from using formal methods in the development of BOS. These experiences
are presented in the context of Hall’s famous “Seven Myths of Formal
Methods”.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;As far as I can tell, it would be quite difficult to measure the
effectiveness of the formal methods used in this case. The finished
product was remarkably bug-free &amp;ndash; no faults have been found in the
mission-critical subsystems since deployment. But it does seem like an
attractive development model to me. Writing buggy software sucks. It&amp;rsquo;s
annoying, and it&amp;rsquo;s costly. We can&amp;rsquo;t write perfect software, even with
formal methods, but we should work towards writing better software.&lt;/p&gt;

&lt;p&gt;Also, it&amp;rsquo;s awesome to see such a badass application of control systems.
If my prof had opened the class with this as an example I would have
been much more interested.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Write Pretty Story, a writing program</title>
      <link>http://tavisharmstrong.com/2011/07/01/write-pretty-story-a-writing-program</link>
      <pubDate>Fri, 01 Jul 2011 15:33:00 +0000</pubDate>
      
      <guid>http://tavisharmstrong.com/2011/07/01/write-pretty-story-a-writing-program</guid>
      <description>&lt;p&gt;I just made a browser-based writing program that lets you write without
editing. Every time you hit return, it formats the paragraph you just
wrote. You can&amp;rsquo;t go back and edit that paragraph. Editing is for people
who have completed stories.&lt;/p&gt;

&lt;p&gt;Download it here:
&lt;a href=&#34;https://github.com/tarmstrong/write_pretty_story/zipball/master&#34;&gt;.zip&lt;/a&gt;
or
&lt;a href=&#34;https://github.com/tarmstrong/write_pretty_story/tarball/master&#34;&gt;.tar.gz&lt;/a&gt;
or &lt;a href=&#34;https://github.com/tarmstrong/write_pretty_story&#34;&gt;github.com&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To run it, open the &amp;ldquo;pretty.html&amp;rdquo; file with your browser.&lt;/p&gt;

&lt;p&gt;You can also try it
&lt;a href=&#34;http://tavisharmstrong.com/pretty/pretty.html&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Update:&lt;/strong&gt; Now it saves your story locally, so when you refresh the
page it&amp;rsquo;s still there.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Practical Cryptography and the Birthday Attack</title>
      <link>http://tavisharmstrong.com/2011/02/06/practical-cryptography-and-the-birthday-attack</link>
      <pubDate>Sun, 06 Feb 2011 14:31:00 +0000</pubDate>
      
      <guid>http://tavisharmstrong.com/2011/02/06/practical-cryptography-and-the-birthday-attack</guid>
      <description>&lt;p&gt;The other day I took &lt;em&gt;Practical Cryptography&lt;/em&gt; out of the library. In
this slim book, Bruce Schneier and Niels Ferguson cover what you need to
know about cryptography so you don&amp;rsquo;t shoot yourself in the foot. So far
I&amp;rsquo;ve only read the part on basic cryptographic theory, where they
discuss basic functions (authentication, encryption, signing), and basic
attacks (chosen plaintext, meet-in-the-middle and birthday).&lt;/p&gt;

&lt;p&gt;The second attack I mentioned &amp;ndash; the Birthday Attack &amp;ndash; is really neat,
because it&amp;rsquo;s based on the equally neat Birthday Paradox, which I will
explain: Consider a room of 23 people. What is the likelihood that two
people in that room will have the same birthday? Turns out it&amp;rsquo;s 50%.
There are 253 pairs you can make with 23 people [1], and the likelihood
that a single pair share the same birthday is &lt;sup&gt;1&lt;/sup&gt;&amp;frasl;&lt;sub&gt;356&lt;/sub&gt;. Multiply 253 by
&lt;sup&gt;1&lt;/sup&gt;&amp;frasl;&lt;sub&gt;356&lt;/sub&gt; and you get the probability of two people in a room of 23 people
having the same birthday.&lt;/p&gt;

&lt;p&gt;How can we apply this to cryptography? Well, if there are 256 different
values a cryptographic key can take on [2], that means you only need to
try around 17 of them to find two that are the same. That means if
you&amp;rsquo;re listening to two computers send cryptographically signed messages
to each other, and every time they send a message they use a different
key, you only need to wait for around 17 messages to be sent before you
find one that has been signed with a key that was used to sign an
earlier message. Basically, you can repeat old messages and the
receiving computer will think they are legitimate. If you saved a &amp;ldquo;pay
$10 to user X&amp;rdquo; message, you can make the receiving computer pay user X
$10. This is bad news.&lt;/p&gt;

&lt;p&gt;This is why it&amp;rsquo;s important to use long cryptographic keys &amp;ndash; they can
take on more values, and decrease the collision rate. Keys need to be
long enough to evade not only current attacks, but the attacks of 50
years from now. However, size doesn&amp;rsquo;t matter as much as correct use of
cryptography. A long key that doesn&amp;rsquo;t need to be attacked is about as
useless as a wall that blocks half of a castle from attack. And that is
what this book is about. I&amp;rsquo;ll let you know how it is when I&amp;rsquo;m done.&lt;/p&gt;

&lt;p&gt;[1] Protip: google &amp;ldquo;23 choose 2&amp;rdquo; and it will calculate this for you.&lt;/p&gt;

&lt;p&gt;[2] This means an 8-bit key. Don&amp;rsquo;t use 8-bit keys.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>