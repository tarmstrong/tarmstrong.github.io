<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tavish Armstrong</title>
    <link>http://tavisharmstrong.com/tags/engineering/feeds/all.atom/index.xml</link>
    <description>Recent content on Tavish Armstrong</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="http://tavisharmstrong.com/tags/engineering/feeds/all.atom/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>What they didn&#39;t teach me in school</title>
      <link>http://tavisharmstrong.com/2015/07/26/what-they-didnt-teach-me-in-school</link>
      <pubDate>Sun, 26 Jul 2015 04:28:00 +0000</pubDate>
      
      <guid>http://tavisharmstrong.com/2015/07/26/what-they-didnt-teach-me-in-school</guid>
      <description>&lt;p&gt;Mike Hoye has some &lt;a href=&#34;http://exple.tive.org/blarg/2015/06/15/september-never-changes/&#34;&gt;good advice&lt;/a&gt; for university professors hoping to
incorporate open source development into their courses:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;[W]e’re grateful any effort put in, large or small, to making Firefox better
and supporting a free and open Web. Only this: there are a couple of things
that make working with Firefox in an academic context challenging and you
should be aware of them.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The main problem he talks about is the disconnect between the cadence of the
university project and of an open source release. Sometimes a small bug can
turn into a large one, and open source developers won&amp;rsquo;t merge patches
willy-nilly just to appease an impatient professor. It&amp;rsquo;s hard for developers to
find bugs that will be easily fixed within that short time frame, and it&amp;rsquo;s made
much harder by the lack of warning they&amp;rsquo;re given by professors. His advice is
good, and if you&amp;rsquo;re hoping to unleash a bunch of hapless undergrads onto
an open source project you should follow it.&lt;/p&gt;

&lt;p&gt;The post reminded me of a few things that I&amp;rsquo;ve been thinking about lately,
especially things that are way harder than I understood when I was in school.&lt;/p&gt;

&lt;p&gt;In the case of open source development, I never truly understood what was so
damn hard about it when you&amp;rsquo;re starting out. When I was in first year, I read
a bunch of ideologically-charged essays by Stallman, Doctorow, and friends.
Easy &amp;ndash; just download the source code to an open source project you use. Muck
around with the source code and you&amp;rsquo;ll learn how to code. Before you know it,
you&amp;rsquo;ll be submitting patches. Great. This all sounded reasonable to me back then.
On the internet, no one knows you&amp;rsquo;re a dog, and so I pulled myself onto my hind
legs and compiled &lt;code&gt;nano&lt;/code&gt; and tried to figure out how the source code worked &lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;.
But it never seemed to stick; I didn&amp;rsquo;t actually learn how the internals worked,
I never actually got around to fixing any bugs, and I thought it was all because
I was too dumb to be a developer.&lt;/p&gt;

&lt;p&gt;Over the next few years I would occasionally convince myself that I could make
it happen. And it never really did.&lt;/p&gt;

&lt;p&gt;Part of the problem was that I didn&amp;rsquo;t really know how to program all that well,
and you need to know how to program pretty well to be able to contribute
anything meaningful to, say, Firefox. Or maybe you don&amp;rsquo;t, but you sure as hell need
to be able to figure out the build system.&lt;/p&gt;

&lt;p&gt;But I think you can overcome that, especially if you&amp;rsquo;re brave enough to ask for help
on the internet. The hardest part is that people who run open source projects are
working engineers, and they expect you to also be a working engineer. They expect
you to understand the social norms around software development and to have familiarity
with the tools necessary to keep up with them.&lt;/p&gt;

&lt;p&gt;I first started making open source patches when I was an intern at a Drupal
consulting company. Here&amp;rsquo;s &lt;a href=&#34;https://www.drupal.org/node/1260528&#34;&gt;one&lt;/a&gt;. And that took a lot of hand-holding
from some very good mentors who I am very grateful for. It wasn&amp;rsquo;t just the code
that was hard to figure out. I needed to figure out how to create an actual &lt;code&gt;.patch&lt;/code&gt;
file. I needed to understand how to interpret test output. And I needed to do all
of the above enough times to appease the reviewers. It takes many different skills
to work with other developers, and it&amp;rsquo;s difficult to learn these skills independently
of the others.&lt;/p&gt;

&lt;p&gt;The point about mentors is, I guess, what this whole post is really about. The
thing that has been most useful to me when learning to write software has
been sitting down with someone who is better than me and watching them work.
This is still true today: whenever I can, I try to watch how my peers do their
work and it&amp;rsquo;s staggering how much I can learn in a few minutes. I imagine
some people don&amp;rsquo;t need to watch over other people&amp;rsquo;s shoulders to learn the
trade, but it really works for me.&lt;/p&gt;

&lt;p&gt;If I was going to give advice to a more junior developer, I guess it&amp;rsquo;d be this:
find someone more experienced and try to convince them to let you watch them
work.  Ask questions when you don&amp;rsquo;t understand something. And try to mimic them
when you write software yourself. If you&amp;rsquo;re a more experienced engineer, offer
this to people more junior to you. I know it&amp;rsquo;s hard to work when someone&amp;rsquo;s
looking over your shoulder, but do it anyways.&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;&lt;p&gt;To this day I receive the nano-devel mailing list to my inbox; it baffles
  me that I ever thought this would help launch my open source career.&lt;/p&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>The Last Line</title>
      <link>http://tavisharmstrong.com/2015/05/24/the-last-line</link>
      <pubDate>Sun, 24 May 2015 21:42:00 +0000</pubDate>
      
      <guid>http://tavisharmstrong.com/2015/05/24/the-last-line</guid>
      <description>&lt;p&gt;Greg Wilson posted a &lt;a href=&#34;http://software-carpentry.org/blog/2015/05/icse2015.html&#34;&gt;list of papers worth reading&lt;/a&gt; from
the 2015 &lt;em&gt;International Conference on Software Engineering&lt;/em&gt;.  One of the
abstracts that caught my eye was from &lt;a href=&#34;http://www.st.ewi.tudelft.nl/~mbeller/publications/2015_beller_zaidman_karpov_the_last_line_effect_preprint.pdf&#34;&gt;&lt;em&gt;The Last Line Effect&lt;/em&gt;&lt;/a&gt; &lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:cite&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:cite&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Abstract: Micro-clones are tiny duplicated pieces of code; they
typically comprise only a few statements or lines. In this paper,
we expose the “last line effect,” the phenomenon that the last
line or statement in a micro-clone is much more likely to contain
an error than the previous lines or statements. We do this by
analyzing 208 open source projects and reporting on 202 faulty
micro-clones.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It might be easier to just look at an example of what they&amp;rsquo;re talking about:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;x += other.x;
y += other.y;
z += other.y;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here, the last line reads &lt;code&gt;other.y&lt;/code&gt; instead of &lt;code&gt;other.z&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;I think this is a great example of the kind of software engineering research
paper I really enjoy. The paper isn&amp;rsquo;t claiming that much: in the software they
studied using their tool, they found a bunch of copy pasta. Among that copy
pasta, they found that the last, er, noodle is more likely to be buggy.
Many engineers could guess at this result, but having evidence to back up your
anecdote is useful.&lt;/p&gt;

&lt;p&gt;The other part that I like is that it&amp;rsquo;s &lt;em&gt;useful&lt;/em&gt;. Next time
I&amp;rsquo;m reviewing code, I&amp;rsquo;m probably going to look more suspiciously at &amp;ldquo;micro-clones&amp;rdquo;,
and when I do, I&amp;rsquo;ll know where to focus my efforts &amp;ndash; on the last line.&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:cite&#34;&gt;Beller, Zaidman, and Karpov, 2015.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:cite&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Programming as argument</title>
      <link>http://tavisharmstrong.com/2015/05/09/programming-as-argument</link>
      <pubDate>Sat, 09 May 2015 14:26:00 +0000</pubDate>
      
      <guid>http://tavisharmstrong.com/2015/05/09/programming-as-argument</guid>
      <description>&lt;p&gt;Many people before me have argued that computer programs are secondarily about
making a machine perform a task and primarily about telling other humans what
you want the computer to do. Pseudocode takes this to the extreme &amp;ndash;
humans can discuss what a pseudocode program &lt;em&gt;would&lt;/em&gt; do and whether or not it
would be a good idea, without ever running the code on a computer.  The
pseudocode program is an argument &amp;ndash; it argues that a program could be
constructed to accomplish the task at hand. The problem with pseudocode
is &lt;em&gt;not&lt;/em&gt; that it doesn&amp;rsquo;t run on a computer. The problem with pseudocode is that it has no
way of convincing you that it would work if it &lt;em&gt;did&lt;/em&gt; run on a computer.&lt;/p&gt;

&lt;p&gt;The reason why a pseudocode program of any respectable size is not a convincing
argument is probably obvious to anyone who writes software for a living: it&amp;rsquo;s
easy to write code that looks plausible to other humans, but unless you run
the program, it&amp;rsquo;s hard to believe that it will actually work. Software that is easy to
run is more convincing because you can watch it work. You provide inputs, it
provides outputs. You can do this to prove or disprove hypotheses. In this case, though,
the code stops being an argument that a program &lt;em&gt;could&lt;/em&gt; be constructed to perform
a task (as is the case with pseudocode). Instead, it becomes an argument that
the compiled program will perform the task correctly. Testing the program manually
is one way of convincing yourself that it will do that. But it is only one way.&lt;/p&gt;

&lt;p&gt;An automated testing framework can be useful for making your code more convincing.
You can show that given &lt;em&gt;this&lt;/em&gt; input and &lt;em&gt;that&lt;/em&gt; input, the program will produce
the correct output. Other programmers can run the tests and feel more confident
that the program will behave that way.&lt;/p&gt;

&lt;p&gt;A few arguments are implicit in every test: these fake inputs are
representative of real inputs. This is an accurate simulation of global state.
These expected outputs are the &lt;em&gt;correct&lt;/em&gt; outputs.  When you use mocks or stubs
in your tests, you argue that the dependencies you are simulating
actually behave that way; a common mistake is over-mocking dependencies so much
that you have to just &lt;em&gt;trust&lt;/em&gt; that the code will work when connected to real dependencies.
For example, if your tests don&amp;rsquo;t open a socket
to a functioning server, can you really be sure that the code will do so correctly in
production?  If you can&amp;rsquo;t, you have to &lt;em&gt;trust&lt;/em&gt; that the networking code works. The
argument becomes &amp;ldquo;&lt;em&gt;if&lt;/em&gt; we assume the networking code exists, the following code
will write this message over the socket.&amp;rdquo; That &lt;em&gt;if&lt;/em&gt; might be a very big &lt;em&gt;if&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Code review makes this argumentation-model-of-programming more obvious. If you
write useless tests, a reviewer will often tell you that they are terrible
tests.  The point they are making is &lt;em&gt;not&lt;/em&gt; that your code doesn&amp;rsquo;t work.  The
point is that they have little reason to believe it will. They have not been
convinced by your argument.&lt;/p&gt;

&lt;p&gt;If code is an argument, what does that mean for working programmers?  Well, it
means that the rules of rhetoric apply when writing software. If you want your
code to be merged, or you want your project to be adopted, you need it to be
&lt;a href=&#34;http://en.wikipedia.org/wiki/Robert_Cialdini&#34;&gt;persuasive&lt;/a&gt;.  This raises an important question: is &lt;em&gt;persuasive&lt;/em&gt;
code the same thing as &lt;em&gt;good&lt;/em&gt; code?&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The Architecture of Open Source Applications, Volume 2</title>
      <link>http://tavisharmstrong.com/2012/05/08/the-architecture-of-open-source-applications-volume-2</link>
      <pubDate>Tue, 08 May 2012 22:11:00 +0000</pubDate>
      
      <guid>http://tavisharmstrong.com/2012/05/08/the-architecture-of-open-source-applications-volume-2</guid>
      <description>&lt;p&gt;The second volume of &lt;a href=&#34;http://aosabook.org/&#34;&gt;The Architecture of Open Source
Applications&lt;/a&gt; was just released thanks to the hard
work of &lt;a href=&#34;http://www.amyrbrown.ca/index.html&#34;&gt;Amy Brown&lt;/a&gt; and &lt;a href=&#34;http://third-bit.com/&#34;&gt;Greg
Wilson&lt;/a&gt;. I had the privilege of helping copyedit
a few chapters of the book. Here&amp;rsquo;s the blurb:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Architects look at thousands of buildings during their training, and
study critiques of those buildings written by masters. In contrast,
most software developers only ever get to know a handful of large
programs well — usually programs they wrote themselves — and never
study the great programs of history. As a result, they repeat one
another’s mistakes rather than building on one another’s successes.&lt;/p&gt;

&lt;p&gt;This second volume of The Architecture of Open Source Applications
aims to change that. In it, the authors of twenty-four open source
applications explain how their software is structured, and why. What
are each program&amp;rsquo;s major components? How do they interact? And what
did their builders learn during their development? In answering these
questions, the contributors to this book provide unique insights into
how they think.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Go buy it &lt;a href=&#34;http://www.lulu.com/shop/amy-brown-and-greg-wilson/the-architecture-of-open-source-applications-volume-ii/paperback/product-20111008.html&#34;&gt;at
Lulu&lt;/a&gt;
(ebook versions will also be available). It&amp;rsquo;ll be available on Amazon at
some point, but Lulu is preferred, because a greater percentage of the
price goes towards royalties — which are going to Amnesty International.&lt;/p&gt;

&lt;p&gt;&lt;strike&gt;A free online version will be up at some point next week.&lt;/strike&gt; The online
version is available
&lt;a href=&#34;http://aosabook.org&#34; title=&#34;The Architecture of Open Source Applications&#34;&gt;here&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The Maeslant Kering: BOS development</title>
      <link>http://tavisharmstrong.com/2012/01/31/the-maeslant-kering-bos-development</link>
      <pubDate>Tue, 31 Jan 2012 14:25:00 +0000</pubDate>
      
      <guid>http://tavisharmstrong.com/2012/01/31/the-maeslant-kering-bos-development</guid>
      <description>&lt;p&gt;I came across &lt;a href=&#34;http://citeseer.ist.psu.edu/viewdoc/summary?doi=10.1.1.24.5280&#34;&gt;this
paper&lt;/a&gt;
(found via Lambda the Ultimate) on the development of BOS, the control
system for The Maeslant Kering, which is &amp;ldquo;the movable dam which has to
protect Rotterdam from floodings while, at (almost) the same time, not
restricting ship traffic to the port of Rotterdam&amp;rdquo;. The development team
used formal methods (such as formal models and proofs) to ensure the
quality of the finished product. It&amp;rsquo;s an interesting look at a much
different style of development than the one I&amp;rsquo;m used to. Whereas most of
my experience is in projects where the requirements remained unknown for
the length of the project and where getting the right design was more
crucial than a controlled development cycle, in the case of BOS figuring
out the requirements (and testing their logical consistency) ahead of
time was worth the cost.&lt;/p&gt;

&lt;p&gt;Software Engineering with Formal Methods: The Development of a Storm
Surge Barrier Control System - Seven Myths of Formal Methods Revisited
(2001), by Jan Tretmans, Klaas Wijbrans, Michel Chaudron:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The control system, called BOS, completely autonomously decides about
closing and opening of the barrier and, when necessary, also performs
these tasks without human intervention. BOS is a safety-critical
software system of the highest Safety Integrity Level according to IEC
61508. One of the reliability increasing techniques used during its
development is formal methods. This paper reports experiences obtained
from using formal methods in the development of BOS. These experiences
are presented in the context of Hall’s famous “Seven Myths of Formal
Methods”.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;As far as I can tell, it would be quite difficult to measure the
effectiveness of the formal methods used in this case. The finished
product was remarkably bug-free &amp;ndash; no faults have been found in the
mission-critical subsystems since deployment. But it does seem like an
attractive development model to me. Writing buggy software sucks. It&amp;rsquo;s
annoying, and it&amp;rsquo;s costly. We can&amp;rsquo;t write perfect software, even with
formal methods, but we should work towards writing better software.&lt;/p&gt;

&lt;p&gt;Also, it&amp;rsquo;s awesome to see such a badass application of control systems.
If my prof had opened the class with this as an example I would have
been much more interested.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>