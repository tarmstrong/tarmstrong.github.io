<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tavish Armstrong</title>
    <link>http://tavisharmstrong.com/tags/books/feeds/atom.all/index.xml</link>
    <description>Recent content on Tavish Armstrong</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="http://tavisharmstrong.com/tags/books/feeds/atom.all/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Books I read in 2014</title>
      <link>http://tavisharmstrong.com/2015/04/04/books-i-read-in-2014</link>
      <pubDate>Sat, 04 Apr 2015 14:35:00 +0000</pubDate>
      
      <guid>http://tavisharmstrong.com/2015/04/04/books-i-read-in-2014</guid>
      <description>&lt;p&gt;I&amp;rsquo;d like to start writing on this blog again, but blogging takes a lot of work so I&amp;rsquo;m just going to list some of the fiction I read in 2014. I&amp;rsquo;m pretty sure I read more books than this, but these are the ones that I remember. They are in order from most to least favourite.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Use of Weapons&lt;/em&gt; by Iain M. Banks&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Ancillary Justice&lt;/em&gt; by Ann Leckie&lt;/li&gt;
&lt;li&gt;&lt;em&gt;The Dispossessed&lt;/em&gt; by Ursula K. Le Guin&lt;/li&gt;
&lt;li&gt;&lt;em&gt;A Deepness in the Sky&lt;/em&gt; by Vernor Vinge&lt;/li&gt;
&lt;li&gt;&lt;em&gt;The Diamond Age&lt;/em&gt; by Neal Stephenson&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Player of Games&lt;/em&gt; by Iain M. Banks&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Excession&lt;/em&gt; by Iain M. Banks&lt;/li&gt;
&lt;li&gt;&lt;em&gt;The Name of the Wind&lt;/em&gt; by Patrick Rothfuss&lt;/li&gt;
&lt;li&gt;&lt;em&gt;The Windup Girl&lt;/em&gt; by Paolo Bacigalupi&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I also read some short fiction, but mostly can&amp;rsquo;t remember it. This is what I do remember:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://subterraneanpress.com/magazine/fall_2010/fiction_the_lifecycle_of_software_objects_by_ted_chiang&#34;&gt;&lt;em&gt;The Lifecycle of Software Objects&lt;/em&gt;&lt;/a&gt; by Ted Chiang&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://clarkesworldmagazine.com/mcdonald_07_13_reprint/&#34;&gt;&lt;em&gt;The Dust Assassin&lt;/em&gt;&lt;/a&gt; by Ian McDonald&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://clarkesworldmagazine.com/macfarlane_08_13/&#34;&gt;&lt;em&gt;Found&lt;/em&gt;&lt;/a&gt; by Alex Dally MacFarlane&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>The Architecture of Open Source Applications, Volume 2</title>
      <link>http://tavisharmstrong.com/2012/05/08/the-architecture-of-open-source-applications-volume-2</link>
      <pubDate>Tue, 08 May 2012 22:11:00 +0000</pubDate>
      
      <guid>http://tavisharmstrong.com/2012/05/08/the-architecture-of-open-source-applications-volume-2</guid>
      <description>&lt;p&gt;The second volume of &lt;a href=&#34;http://aosabook.org/&#34;&gt;The Architecture of Open Source
Applications&lt;/a&gt; was just released thanks to the hard
work of &lt;a href=&#34;http://www.amyrbrown.ca/index.html&#34;&gt;Amy Brown&lt;/a&gt; and &lt;a href=&#34;http://third-bit.com/&#34;&gt;Greg
Wilson&lt;/a&gt;. I had the privilege of helping copyedit
a few chapters of the book. Here&amp;rsquo;s the blurb:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Architects look at thousands of buildings during their training, and
study critiques of those buildings written by masters. In contrast,
most software developers only ever get to know a handful of large
programs well — usually programs they wrote themselves — and never
study the great programs of history. As a result, they repeat one
another’s mistakes rather than building on one another’s successes.&lt;/p&gt;

&lt;p&gt;This second volume of The Architecture of Open Source Applications
aims to change that. In it, the authors of twenty-four open source
applications explain how their software is structured, and why. What
are each program&amp;rsquo;s major components? How do they interact? And what
did their builders learn during their development? In answering these
questions, the contributors to this book provide unique insights into
how they think.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Go buy it &lt;a href=&#34;http://www.lulu.com/shop/amy-brown-and-greg-wilson/the-architecture-of-open-source-applications-volume-ii/paperback/product-20111008.html&#34;&gt;at
Lulu&lt;/a&gt;
(ebook versions will also be available). It&amp;rsquo;ll be available on Amazon at
some point, but Lulu is preferred, because a greater percentage of the
price goes towards royalties — which are going to Amnesty International.&lt;/p&gt;

&lt;p&gt;&lt;strike&gt;A free online version will be up at some point next week.&lt;/strike&gt; The online
version is available
&lt;a href=&#34;http://aosabook.org&#34; title=&#34;The Architecture of Open Source Applications&#34;&gt;here&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Practical Cryptography and the Birthday Attack</title>
      <link>http://tavisharmstrong.com/2011/02/06/practical-cryptography-and-the-birthday-attack</link>
      <pubDate>Sun, 06 Feb 2011 14:31:00 +0000</pubDate>
      
      <guid>http://tavisharmstrong.com/2011/02/06/practical-cryptography-and-the-birthday-attack</guid>
      <description>&lt;p&gt;The other day I took &lt;em&gt;Practical Cryptography&lt;/em&gt; out of the library. In
this slim book, Bruce Schneier and Niels Ferguson cover what you need to
know about cryptography so you don&amp;rsquo;t shoot yourself in the foot. So far
I&amp;rsquo;ve only read the part on basic cryptographic theory, where they
discuss basic functions (authentication, encryption, signing), and basic
attacks (chosen plaintext, meet-in-the-middle and birthday).&lt;/p&gt;

&lt;p&gt;The second attack I mentioned &amp;ndash; the Birthday Attack &amp;ndash; is really neat,
because it&amp;rsquo;s based on the equally neat Birthday Paradox, which I will
explain: Consider a room of 23 people. What is the likelihood that two
people in that room will have the same birthday? Turns out it&amp;rsquo;s 50%.
There are 253 pairs you can make with 23 people [1], and the likelihood
that a single pair share the same birthday is &lt;sup&gt;1&lt;/sup&gt;&amp;frasl;&lt;sub&gt;356&lt;/sub&gt;. Multiply 253 by
&lt;sup&gt;1&lt;/sup&gt;&amp;frasl;&lt;sub&gt;356&lt;/sub&gt; and you get the probability of two people in a room of 23 people
having the same birthday.&lt;/p&gt;

&lt;p&gt;How can we apply this to cryptography? Well, if there are 256 different
values a cryptographic key can take on [2], that means you only need to
try around 17 of them to find two that are the same. That means if
you&amp;rsquo;re listening to two computers send cryptographically signed messages
to each other, and every time they send a message they use a different
key, you only need to wait for around 17 messages to be sent before you
find one that has been signed with a key that was used to sign an
earlier message. Basically, you can repeat old messages and the
receiving computer will think they are legitimate. If you saved a &amp;ldquo;pay
$10 to user X&amp;rdquo; message, you can make the receiving computer pay user X
$10. This is bad news.&lt;/p&gt;

&lt;p&gt;This is why it&amp;rsquo;s important to use long cryptographic keys &amp;ndash; they can
take on more values, and decrease the collision rate. Keys need to be
long enough to evade not only current attacks, but the attacks of 50
years from now. However, size doesn&amp;rsquo;t matter as much as correct use of
cryptography. A long key that doesn&amp;rsquo;t need to be attacked is about as
useless as a wall that blocks half of a castle from attack. And that is
what this book is about. I&amp;rsquo;ll let you know how it is when I&amp;rsquo;m done.&lt;/p&gt;

&lt;p&gt;[1] Protip: google &amp;ldquo;23 choose 2&amp;rdquo; and it will calculate this for you.&lt;/p&gt;

&lt;p&gt;[2] This means an 8-bit key. Don&amp;rsquo;t use 8-bit keys.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>