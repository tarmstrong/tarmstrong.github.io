<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tavish Armstrong</title>
    <link>http://tavisharmstrong.com/tags/software-engineering/feeds/all.atom/index.xml</link>
    <description>Recent content on Tavish Armstrong</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="http://tavisharmstrong.com/tags/software-engineering/feeds/all.atom/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Building for reliability: feature flags</title>
      <link>http://tavisharmstrong.com/2016/12/21/building-for-reliability-feature-flags</link>
      <pubDate>Wed, 21 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>http://tavisharmstrong.com/2016/12/21/building-for-reliability-feature-flags</guid>
      <description>&lt;p&gt;A while back I started writing about &lt;a href=&#34;https://github.com/tarmstrong/longcv/tree/master/bio.md&#34;&gt;everything I learned&lt;/a&gt; before I got my current job. My original intention was to make an exhaustive list of all the random things I learned, and then work through it to figure out which of those skills was essential to my job, which were merely useful for social signaling, and which were merely good for passing interviews. I still want to finish writing that, but I also want to write more about what I&amp;rsquo;ve learned since I left school. None of what I&amp;rsquo;ve learned is that novel or impressive; I just hope it&amp;rsquo;s useful to students or people who have had different work experience. I also want to write it down to test my own understanding.&lt;/p&gt;

&lt;p&gt;Today I&amp;rsquo;ll write about a technique for improving reliability that I learned on the job: feature flags.&lt;/p&gt;

&lt;p&gt;Before I start explain what these are, I&amp;rsquo;ll talk a bit about why you would even care about reliability, and in the sorts of situations you might want to use feature flags.&lt;/p&gt;

&lt;p&gt;First, context matters and reliability is not inherently virtuous. If you operate an API that delivers cat gifs to clients on request and all the users are hobby projects that can go down without upsetting anyone, you probably don&amp;rsquo;t need to care about reliability that much. If you push a bad commit and take down your site, people will not see cats for a few minutes while you try to fix it. That&amp;rsquo;s probably fine.&lt;/p&gt;

&lt;p&gt;There are plenty of situations where you might want to care about reliability. The boring examples involve money: if you go down you don&amp;rsquo;t make money or your customers don&amp;rsquo;t make money. This is a really easy reason to care about reliability because you can trade off software developer time against potential lost money. If you want the dollars lost to go down, you can pay more engineers to make your reliability better &lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:tradeoffs&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:tradeoffs&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;p&gt;There are more exciting reasons to care about reliability. You might want your software to be reliable if it is important for the medical treatment of people in your hospital. Let&amp;rsquo;s say, for example, that your electronic medical record system helps save X lives per year by being more efficient and less error-prone than the paper-based equivalent. That marginal improvement (X) probably goes away if the system is down for a 48-hours straight at some point in that month because your doctors will have to do more guesswork. This is more important than lost money because lives are on the line; the tradeoff is just harder to make.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s talk about a hypothetical example. Let&amp;rsquo;s say I have too many cats and would like to capitalize upon this surplus of fluff. I don&amp;rsquo;t know how to teach these cats how to do my bidding, so I have to capitalize on these cats in some other way. I know one thing: cats love to pose for photos. I have the perfect solution: I develop an API that serves cat gifs in response to payments. This API is adopted by struggling social media apps to keep their user engaged. In exchange for referrals, I give the social media companies a commission on every sale.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s say in the begging I started by writing my app in Ruby. I&amp;rsquo;m pretty comfortable with Ruby, after all, and it made getting set up pretty fast. This Ruby on Rails app talks to another server inside my VPN that operates a remote webcam pointed at these cats. It&amp;rsquo;s going great and the cats are thrilled. Here&amp;rsquo;s what that code looks like:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;def handle_successful_payment
  client = CatCamClient.new(host: &#39;https://cats.tavi.sh&#39;)
  cat_photo = client.get_cat!
  # return a 200 with the cat!
  [200, cat_photo]
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Unforunately, the masses want more cats from more angles. I make a new backend server that operates multiple cameras: a helmet cam for Alice the cat, a motion-sensing robot camera that follows Bob the cat around, etc. This new server is much more complicated but I&amp;rsquo;ve tested it pretty well.&lt;/p&gt;

&lt;p&gt;When I switch traffic over to the new backend server, I discover that the database on my cat server is not well indexed, which slows down my API to the point where most requests are timing out. The social networks are now mad at me because the cats were the only reason people were still using their apps, and the cats are mad at me because they want more attention.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;def handle_successful_payment
  client = CatCamClient.new(host: &#39;https://fancycats.tavi.sh&#39;)
  cat_photo = client.get_cat!
  # return a 200 with the cat!
  [200, cat_photo]
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In future I resolve to do better. The next time I make my change I write some code that looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;def handle_successful_payment
  url = if CatApp.flag_on?(&#39;fancy_cats&#39;)
    &#39;https://fancy-cats.tavi.sh&#39;
  else
    &#39;https://cats.tavi.sh&#39;
  end
  client = CatCamClient.new(host: url)
  cat_photo = client.get_cat!
  # return a 200 with the cat!
  [200, cat_photo]
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In this example, before I make my request to the backend server, I first check to see which backend server to use. To do so, the &lt;code&gt;CatApp.flag_on?&lt;/code&gt; helper checks the database to see if the confuration flag is on. If so, we use the &lt;code&gt;https://fancy-cats.tavi.sh&lt;/code&gt; url to fetch a cat.&lt;/p&gt;

&lt;p&gt;What does this get me? It means that I no longer need to deploy my code in order to change which backend server my web frontend server is talking to. I can just flip a switch in the database (maybe I&amp;rsquo;m fancy enough to have an administrative web app for employees where I can put it) and have the new backend run. Now when I run into problems with the backend server being slow, I can immediately fix it without having to write or deploy code. That makes the downtime shorter. Nice!&lt;/p&gt;

&lt;p&gt;I could even go one step further and have the flag be a &lt;em&gt;probability&lt;/em&gt; rather than a boolean. In that case, I could set the feature flag to only go hit the new backend 10% of the time. That way, if there&amp;rsquo;s a problem with the new backend, I&amp;rsquo;ve only broken cats for 10% of people. It&amp;rsquo;s definitely not nice to break things for 10% of people, but I&amp;rsquo;ve mitigated a pretty serious failure. In the event of downtime, I lose 90% less money, which makes it easier for me to afford more helmet cams for my cats.&lt;/p&gt;

&lt;p&gt;What are some other fun things you can do with feature flags?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You could profile both paths and figure out which one is faster. That way you can tell whether you are actually making something faster with your new database (instead of trusting the hype).

&lt;ul&gt;
&lt;li&gt;Github&amp;rsquo;s Scientist library has support for this!&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;You can display new features of your product to a smaller portion of your visitors to see whether or not it works well before rolling it out completely.&lt;/li&gt;
&lt;li&gt;You could use feature flags on desktop software (which would probably talk to a server you control) in order to slowly roll out risky changes while mitigating the risk of bricking a few billion dollars worth of computers.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here are more tips for using feature flags:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;In my example I suggested using a database field to determine whether a flag is on. Using a database can cause you a lot of pain if it shares a database with the rest of your app, because a problematic change to the main app could harm your ability to change the feature flag.&lt;/li&gt;
&lt;li&gt;Adding feature flags makes it harder to write tests, because you now have to test both code paths. Even though the feature flag decreases the risk of your new code path taking down your site, it doesn&amp;rsquo;t help much if the new code path does the same calculation incorrectly. (In the best case scenario, it raises an exception and quits; in the worst, it silently fails while your tests gleefully pass).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There you go: feature flags. They are so much fun!!!&lt;/p&gt;

&lt;p&gt;Is there anything I missed out on? Does anybody have great reference implementations that I can look at? Send me emails!&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:tradeoffs&#34;&gt;software engineering, like all engineering, is about making tradeoffs. One thing to keep in mind, though, is that no one really knows how to make these tradeoffs with any level of precision. You might think you can dump $X bazillions of dollars of engineering time into making your thing Y% more reliable and then end up with less reliable software because you replaced the database with a crappier database and didn&amp;rsquo;t realize it was going to be crappier until 6 months after you finished your project.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:tradeoffs&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>How would we regulate software engineers?</title>
      <link>http://tavisharmstrong.com/2016/12/10/regulated-software-engineering</link>
      <pubDate>Sat, 10 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>http://tavisharmstrong.com/2016/12/10/regulated-software-engineering</guid>
      <description>&lt;p&gt;What obligations do software engineers have toward the public? Other disciplines like civil engineering have an obvious impact on public safety: if you are sloppy with your design and a bridge falls down, you&amp;rsquo;ll have blood on your hands. With software, these are real concerns too. I don&amp;rsquo;t know if any internet-of-things bridges exist, but I can point to at least one &lt;a href=&#34;http://tavisharmstrong.com/2012/01/31/the-maeslant-kering-bos-development/&#34;&gt;software-controlled dam&lt;/a&gt;. Any software engineering course worth its salt will mention the &lt;a href=&#34;https://en.wikipedia.org/wiki/Therac-25&#34;&gt;Therac-25 radiation therapy machine&lt;/a&gt; which overdosed its patients. However, the software engineering discipline is fraught with moral challenges that go far beyond not killing people &amp;ndash; surveillance and sexual harassment are just a few that come to mind. So what would a regulated software engineering profession look like?&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ll give some background on my own experience first. I graduated with an engineering degree (a B.Eng.) in Quebec. This has two implications professionally: one, I am eligible to enroll in the Order of Engineers of Quebec; two, I was given a weird misshapen ring to wear on my pinky finger in a vaguely cultish graduation ceremony. I&amp;rsquo;ll take these in order.&lt;/p&gt;

&lt;p&gt;First, enrolling in the Order of Engineers of Quebec would entitle me to call myself an engineer, use &amp;ldquo;eng.&amp;rdquo; or &amp;ldquo;ing.&amp;rdquo; after my name when signing letters, stamp certain technical documentation, and do specific kinds of work in some protected industries (I believe railroad control systems are an example). If you are like me and work in the software industry, this all sounds absurd. If software engineers acted like doctors they would be laughed at, and rightly so. For all practical purposes, enrolling in the Order of Engineers of Quebec would not be super useful to me. Google Montreal employees get by just fine with calling themselves software developers.&lt;/p&gt;

&lt;p&gt;That said, there are aspects to the structure that are appealing. Many professional orders like this (supposedly) support their members by revoking licenses of the corrupt or dangerously incompetent. They &lt;a href=&#34;http://www.peo.on.ca/index.php/ci_id/16158/la_id/1.htm&#34;&gt;support members who wish to blow the whistle on projects that endanger public safety&lt;/a&gt; and require members to do so.&lt;/p&gt;

&lt;p&gt;The second thing that my engineering degree gave me was a weird ring that I wear on my pinky finger called the &lt;a href=&#34;https://en.wikipedia.org/wiki/Iron_Ring&#34;&gt;Iron Ring&lt;/a&gt;. In San Francisco, this immediately marks me as a Canadian-educated engineer &lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:waterloo&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:waterloo&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;. When you graduate with an engineering degree, you are invited to atend the Ritual of the Calling of the Engineer, a private (but not secret) ceremony designed by none other than Rudyard Kipling where the presenters address each other as, e.g., &amp;ldquo;Engineer Tavish Armstrong&amp;rdquo;. A feeble attempt at making it secular has been made. While the ceremony itself is weird or offensive to many, the main thing to take away from it is the Obligation, which you can read in lovely jpeg form &lt;a href=&#34;https://en.wikipedia.org/wiki/File:Ritual_of_the_Calling_of_an_Engineer_Oath.jpg&#34;&gt;here&lt;/a&gt;. The general idea is that you should not allow your work to harm public safety and you should not be corrupt. The ring itself is meant to remind you of these two aims: it scratches on the paper when you write your plans &lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:autocad&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:autocad&#34;&gt;2&lt;/a&gt;&lt;/sup&gt; and will scratch gaudy gold jewellery that you have on the adjacent finger.&lt;/p&gt;

&lt;p&gt;Does the Ritual of the Calling of the Engineer provoke good work and behaviour from engineers? &lt;a href=&#34;http://montrealgazette.com/news/local-news/1031-city-engineers&#34;&gt;Unclear&lt;/a&gt;. But at least it&amp;rsquo;s a nice story.&lt;/p&gt;

&lt;p&gt;So, with all that out of the way, what would it look like to regulate software engineers like me?&lt;/p&gt;

&lt;p&gt;For starters, I like Mike Hoye&amp;rsquo;s &lt;a href=&#34;http://exple.tive.org/blarg/2016/10/12/minimum-viable-basic-human-decency/&#34;&gt;blog post&lt;/a&gt; on the bare minimum developers of social software should do to protect and support their users and his much longer post on &lt;a href=&#34;http://exple.tive.org/blarg/2016/08/29/free-as-in-health-care/&#34;&gt;how software affects your everyday freedoms&lt;/a&gt; and why this is such a different issue than the notion of software freedom that the Free Software Foundation pushes.&lt;/p&gt;

&lt;p&gt;The ACM has published a &lt;a href=&#34;https://www.acm.org/about-acm/acm-code-of-ethics-and-professional-conduct&#34;&gt;code of ethics&lt;/a&gt; that contains passages like:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Inequities between different groups of people may result from the use or
misuse of information and technology. In a fair society, all individuals would
have equal opportunity to participate in, or benefit from, the use of
computer resources regardless of race, sex, religion, age, disability,
national origin or other such similar factors. However, these ideals do not
justify unauthorized use of computer resources nor do they provide an
adequate basis for violation of any other ethical imperatives of this code.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;While jumping straight from &amp;ldquo;well, computers systems can be biased&amp;rdquo; to &amp;ldquo;but be sure not to hack racist computer systems&amp;rdquo; is a strange way to phrase this, we could charitably assume the author(s) intended to discourage &lt;a href=&#34;http://www.theverge.com/2015/7/1/8880363/google-apologizes-photos-app-tags-two-black-people-gorillas&#34;&gt;racist facial recognition systems&lt;/a&gt; or &lt;a href=&#34;https://www.propublica.org/article/facebook-lets-advertisers-exclude-users-by-race&#34;&gt;advertising tools that enable violations of the Fair Housing act of 1968&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m interested in learning more about the history of professional organizations of engineers or any attempts that have been made to regulate the software engineering profession. If you have suggestions, please let me know (my email is tavisharmstrong at gmail).&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:waterloo&#34;&gt;Many also mistakenly assume I studied at Waterloo.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:waterloo&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:autocad&#34;&gt;it also clicks against the mouse when you use autocad, I guess?
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:autocad&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>